// הדפס הודעה בהתחלה
      console.log("השרת החדש עם העיצוב האדמדם פועל! גרסה 12.0 - כל הדפים");

      const express = require('express');
      const path = require('path');
      const crypto = require('crypto');
      const fs = require('fs');
      const multer = require('multer');
      const app = express();
      const port = 3000;
      function formatDateInHebrew(dateString) {
        const date = new Date(dateString);
        const months = [
          'ינואר', 'פברואר', 'מרץ', 'אפריל', 'מאי', 'יוני',
          'יולי', 'אוגוסט', 'ספטמבר', 'אוקטובר', 'נובמבר', 'דצמבר'
        ];

        return `${date.getDate()} ב${months[date.getMonth()]} ${date.getFullYear()}`;
      }

      // הגדרות multer לאחסון קבצים
      // Configure multer for file uploads
      const storage = multer.memoryStorage();

      const fileFilter = (req, file, cb) => {
        if (file.mimetype.startsWith('image/')) {
          cb(null, true);
        } else {
          cb(new Error('רק קבצי תמונה מותרים!'), false);
        }
      };

      const upload = multer({
        storage: storage,
        fileFilter: fileFilter,
        limits: {
          fileSize: 5 * 1024 * 1024 // 5MB limit
        }
      });

      const { Pool } = require('pg');

      // התחברות למסד הנתונים
      const pool = new Pool({
        connectionString: process.env.DATABASE_URL,
        ssl: {
          rejectUnauthorized: false
        },
        max: 10,
        connectionTimeoutMillis: 30000,
        query_timeout: 30000,
        idleTimeoutMillis: 30000,
        keepAlive: true
      });

      // שיפור הטיפול בשגיאות חיבור
      pool.on('error', (err) => {
        console.error('שגיאה בחיבור לדאטאבייס:', err);
        initDatabase(); // ניסיון חיבור מחדש
      });

      // בדיקת חיבור לדאטאבייס
      async function initDatabase() {
        try {
          const client = await pool.connect();
          console.log('✅ התחברות לדאטאבייס הצליחה');
          client.release();
        } catch (err) {
          console.error('❌ שגיאה בהתחברות לדאטאבייס:', err);
          console.log('ממשיך עם אחסון מקומי...');
        }
      }

      initDatabase();

      async function saveUserToDatabase(user, shouldSaveRelated = true) {
        const client = await pool.connect();
        try {
          // Begin transaction
          await client.query('BEGIN');

          // Save user data
          await client.query(`
            INSERT INTO users (
              id, first_name, last_name, email, password, gender,
              relationship_status, has_children, dob, height,
              about_me, looking_for, religious_level, city,
              phone, facebook, instagram, profile_image,
              has_subscription, is_approved, created_at
            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21)
            ON CONFLICT (id) DO UPDATE SET
              first_name = EXCLUDED.first_name,
              last_name = EXCLUDED.last_name,
              email = EXCLUDED.email,
              password = EXCLUDED.password,
              gender = EXCLUDED.gender,
              relationship_status = EXCLUDED.relationship_status,
              has_children = EXCLUDED.has_children,
              dob = EXCLUDED.dob,
              height = EXCLUDED.height,
              about_me = EXCLUDED.about_me,
              looking_for = EXCLUDED.looking_for,
              religious_level = EXCLUDED.religious_level,
              city = EXCLUDED.city,
              phone = EXCLUDED.phone,
              facebook = EXCLUDED.facebook,
              instagram = EXCLUDED.instagram,
              profile_image = EXCLUDED.profile_image,
              has_subscription = EXCLUDED.has_subscription,
              is_approved = EXCLUDED.is_approved,
              created_at = EXCLUDED.created_at
          `, [
            user.id,
            user.firstName,
            user.lastName,
            user.email,
            user.password,
            user.gender,
            user.relationshipStatus,
            user.hasChildren,
            user.dob,
            user.height,
            user.aboutMe,
            user.lookingFor,
            user.religiousLevel,
            user.city,
            user.phone,
            user.facebook,
            user.instagram,
            user.profileImage,
            user.hasSubscription,
            user.isApproved,
            user.createdAt || new Date()
          ]);

          // Save likes with DISTINCT to prevent duplicates
          const existingLikes = await client.query('SELECT DISTINCT id FROM likes WHERE from_user_id = $1', [user.id]);
          if (existingLikes.rows.length === 0) {
            const uniqueLikes = Array.from(new Set(likes.filter(l => l.fromUserId === user.id).map(l => JSON.stringify(l))))
              .map(l => JSON.parse(l));

            for (const like of uniqueLikes) {
              await client.query(`
                INSERT INTO likes (id, from_user_id, to_user_id, created_at)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (id) DO NOTHING
              `, [like.id, like.fromUserId, like.toUserId, like.timestamp || new Date()]);
            }
          }

          // Save views only once
          await client.query('DELETE FROM views WHERE from_user_id = $1', [user.id]);
          for (const view of views.filter(v => v.fromUserId === user.id)) {
            await client.query(`
              INSERT INTO views (from_user_id, to_user_id, timestamp, is_admin_view)
              VALUES ($1, $2, $3, $4)
              ON CONFLICT (from_user_id, to_user_id, timestamp) DO NOTHING
            `, [view.fromUserId, view.toUserId, view.timestamp, view.isAdminView]);
          }

          // Save event participations only once
          for (const event of events) {
            if (event.participants.includes(user.id)) {
              await client.query(`
                INSERT INTO event_participants (event_id, user_id, status)
                VALUES ($1, $2, 'approved')
                ON CONFLICT (event_id, user_id) DO NOTHING
              `, [event.id, user.id]);
            }
          }

          // Save all events
          for (const event of events) {
            await client.query(`
              INSERT INTO events (id, name, date, location, description, image)
              VALUES ($1, $2, $3, $4, $5, $6)
              ON CONFLICT (id) DO UPDATE SET
                name = EXCLUDED.name,
                date = EXCLUDED.date,
                location = EXCLUDED.location,
                description = EXCLUDED.description,
                image = EXCLUDED.image
            `, [event.id, event.name, event.date, event.location, event.description, event.image]);

            // Save event participants
            await client.query('DELETE FROM event_participants WHERE event_id = $1', [event.id]);
            for (const participantId of event.participants) {
              await client.query(`
                INSERT INTO event_participants (event_id, user_id, status)
                VALUES ($1, $2, 'approved')
              `, [event.id, participantId]);
            }
          }

          // Save all views
          await client.query('DELETE FROM views WHERE from_user_id = $1', [user.id]);
          for (const view of views.filter(v => v.fromUserId === user.id)) {
            await client.query(`
              INSERT INTO views (from_user_id, to_user_id, timestamp, is_admin_view)
              VALUES ($1, $2, $3, $4)
            `, [view.fromUserId, view.toUserId, view.timestamp, view.isAdminView]);
          }

          // Commit transaction
          // Save all views for this user
          if (shouldSaveRelated) {
            const userViews = views.filter(v => v.fromUserId === user.id || v.toUserId === user.id);
            for (const view of userViews) {
              await client.query(`
                INSERT INTO views (from_user_id, to_user_id, timestamp, is_admin_view)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (from_user_id, to_user_id, timestamp) DO NOTHING
              `, [view.fromUserId, view.toUserId, view.timestamp || new Date(), view.isAdminView || false]);
            }
          }

          // Save all events and participations
          if (shouldSaveRelated) {
            for (const event of events) {
              await client.query(`
                INSERT INTO events (id, name, date, location, description, image)
                VALUES ($1, $2, $3, $4, $5, $6)
                ON CONFLICT (id) DO UPDATE SET
                  name = EXCLUDED.name,
                  date = EXCLUDED.date,
                  location = EXCLUDED.location,
                  description = EXCLUDED.description,
                  image = EXCLUDED.image
              `, [event.id, event.name, event.date, event.location, event.description, event.image]);

              // Save event participants
              if (event.participants.includes(user.id)) {
                await client.query(`
                  INSERT INTO event_participants (event_id, user_id, status)
                  VALUES ($1, $2, 'approved')
                  ON CONFLICT (event_id, user_id) DO NOTHING
                `, [event.id, user.id]);
              }
            }
          }

          await client.query('COMMIT');
          console.log("✅ משתמש ונתונים קשורים נשמרו בהצלחה בדאטאבייס:", user.id);
        } catch (error) {
          await client.query('ROLLBACK');
          console.error("❌ שגיאה בשמירת נתוני משתמש בדאטאבייס:", error);
          throw error;
        } finally {
          client.release();
        }
      }

      // יצירת טבלאות
      async function initDB() {
        try {
          // יצירת טבלאות
          await pool.query(`
            CREATE TABLE IF NOT EXISTS matches (
              id TEXT PRIMARY KEY,
              user1_id TEXT NOT NULL,
              user2_id TEXT NOT NULL,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              FOREIGN KEY (user1_id) REFERENCES users(id) ON DELETE CASCADE,
              FOREIGN KEY (user2_id) REFERENCES users(id) ON DELETE CASCADE
            );

            CREATE TABLE IF NOT EXISTS views (
              from_user_id TEXT REFERENCES users(id),
              to_user_id TEXT REFERENCES users(id),
              timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              is_admin_view BOOLEAN DEFAULT FALSE,
              PRIMARY KEY (from_user_id, to_user_id, timestamp)
            );

            CREATE TABLE IF NOT EXISTS users (
              id TEXT PRIMARY KEY,
              first_name TEXT NOT NULL,
              last_name TEXT NOT NULL,
              email TEXT UNIQUE NOT NULL,
              password TEXT NOT NULL,
              gender TEXT NOT NULL,
              relationship_status TEXT,
              has_children TEXT,
              dob DATE,
              height INTEGER,
              about_me TEXT,
              looking_for TEXT,
              religious_level TEXT,
              city TEXT,
              phone TEXT,
              facebook TEXT,
              instagram TEXT,
              profile_image TEXT,
              smoking TEXT,
              hobbies TEXT,
              education TEXT,
              occupation TEXT,
              ethnicity TEXT,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              has_subscription BOOLEAN DEFAULT FALSE,
              is_approved BOOLEAN DEFAULT FALSE
            );

            -- הוספת עמודות חדשות אם הן לא קיימות
            DO $$ 
            BEGIN
              BEGIN
                ALTER TABLE users ADD COLUMN IF NOT EXISTS smoking TEXT;
              EXCEPTION
                WHEN duplicate_column THEN NULL;
              END;
              BEGIN
                ALTER TABLE users ADD COLUMN IF NOT EXISTS hobbies TEXT;
              EXCEPTION
                WHEN duplicate_column THEN NULL;
              END;
              BEGIN
                ALTER TABLE users ADD COLUMN IF NOT EXISTS education TEXT;
              EXCEPTION
                WHEN duplicate_column THEN NULL;
              END;
              BEGIN
                ALTER TABLE users ADD COLUMN IF NOT EXISTS occupation TEXT;
              EXCEPTION
                WHEN duplicate_column THEN NULL;
              END;
              BEGIN
                ALTER TABLE users ADD COLUMN IF NOT EXISTS ethnicity TEXT;
              EXCEPTION
                WHEN duplicate_column THEN NULL;
              END;
            END $$;

            CREATE TABLE IF NOT EXISTS likes (
              id TEXT PRIMARY KEY,
              from_user_id TEXT REFERENCES users(id),
              to_user_id TEXT REFERENCES users(id),
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              UNIQUE(from_user_id, to_user_id)
            );

            CREATE TABLE IF NOT EXISTS events (
              id TEXT PRIMARY KEY,
              name TEXT NOT NULL,
              date DATE NOT NULL,
              location TEXT NOT NULL,
              description TEXT,
              image_data BYTEA,
              image_type TEXT,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            CREATE TABLE IF NOT EXISTS event_participants (
              event_id TEXT REFERENCES events(id),
              user_id TEXT REFERENCES users(id),
              status TEXT DEFAULT 'pending',
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              PRIMARY KEY (event_id, user_id)
            );

            CREATE TABLE IF NOT EXISTS images (
              id TEXT PRIMARY KEY,
              data BYTEA NOT NULL,
              mime_type TEXT NOT NULL,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            CREATE TABLE IF NOT EXISTS notifications (
              id TEXT PRIMARY KEY,
              user_id TEXT REFERENCES users(id),
              type TEXT NOT NULL,
              title TEXT NOT NULL,
              content TEXT NOT NULL,
              is_read BOOLEAN DEFAULT FALSE,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
          `);
          console.log('✅ טבלאות נוצרו בהצלחה');

          // העתקת רק אירועים מהקובץ המקומי למסד הנתונים
          const localData = JSON.parse(fs.readFileSync('users_data.json', 'utf8'));
          console.log('מעביר אירועים מ-JSON לדאטאבייס...');

          for (const event of localData.events) {
            try {
              // הכנס את האירוע
              await pool.query(`
                INSERT INTO events (id, name, date, location, description, image)
                VALUES ($1, $2, $3, $4, $5, $6)
                ON CONFLICT (id) DO NOTHING
              `, [event.id, event.name, event.date, event.location, event.description, event.image]);

              // הכנס את המשתתפים של האירוע
              if (event.participants && Array.isArray(event.participants)) {
                for (const participantId of event.participants) {
                  await pool.query(`
                    INSERT INTO event_participants (event_id, user_id, status)
                    VALUES ($1, $2, 'approved')
                    ON CONFLICT (event_id, user_id) DO NOTHING
                  `, [event.id, participantId]);
                }
              }

              console.log(`✅ אירוע ${event.name} הועבר בהצלחה`);
            } catch (error) {
              console.error(`❌ שגיאה בהעברת אירוע ${event.name}:`, error);
            }
          }

          console.log('✅ נתונים הועתקו בהצלחה למסד הנתונים');
        } catch (err) {
          console.error('❌ שגיאה ביצירת טבלאות או העתקת נתונים:', err);
        }
      }

      // מערכים זמניים לשמירת נתונים בזיכרון
      const users = [];
      let likes = [];
      let events = [];
      let systemNotifications = [];

      // Initialize arrays if undefined
      if (!events) events = [];
      if (!likes) likes = [];

      // Clear existing arrays before loading
      events = [];
      likes = [];

      // Load all events and likes from database on startup
      async function loadEventsFromDB() {
        const client = await pool.connect();
        try {
          // Load events
          const eventsResult = await client.query(`
            SELECT e.*, array_agg(ep.user_id) as participants
            FROM events e
            LEFT JOIN event_participants ep ON e.id = ep.event_id
            GROUP BY e.id
          `);
          events = eventsResult.rows.map(row => ({
            ...row,
            participants: row.participants[0] ? row.participants : [],
            pendingParticipants: []
          }));
          console.log('✅ נטענו ' + events.length + ' אירועים מהדאטאבייס');

          // Load likes
          const likesResult = await client.query('SELECT * FROM likes');
          likes = likesResult.rows.map(row => ({
            id: row.id,
            fromUserId: row.from_user_id,
            toUserId: row.to_user_id,
            timestamp: row.created_at
          }));
          console.log('✅ נטענו ' + likes.length + ' לייקים מהדאטאבייס');

        } catch (error) {
          console.error('❌ שגיאה בטעינת נתונים:', error);
        } finally {
          client.release();
        }
      }

      // Call loadEventsFromDB after database initialization
      loadEventsFromDB();

      // וידוא שלכל האירועים יש מערכי משתתפים תקינים
      events.forEach(event => {
        if (!event.participants || !Array.isArray(event.participants)) {
          event.participants = [];
        }
        if (!event.pendingParticipants || !Array.isArray(event.pendingParticipants)) {

      // נתיב להצגת תמונת אירוע מהדאטאבייס
      app.get('/event-image/:id', async (req, res) => {
        const client = await pool.connect();
        try {
          const result = await client.query(
            'SELECT image_data, image_type FROM events WHERE id = $1',
            [req.params.id]
          );
          if (result.rows.length === 0 || !result.rows[0].image_data) {
            return res.status(404).send('תמונה לא נמצאה');
          }
          const image = result.rows[0];
          res.set('Content-Type', image.image_type);
          res.send(image.image_data);
        } catch (error) {
          console.error('שגיאה בטעינת תמונת אירוע:', error);
          res.status(500).send('שגיאה בטעינת התמונה');
        } finally {
          client.release();
        }
      });

          event.pendingParticipants = [];
        }
      });

      // Ensure all events have required arrays
      events.forEach(event => {
        if (!event.participants) event.participants = [];
        if (!event.pendingParticipants) event.pendingParticipants = [];
      });

      console.log('אתחול מסד נתונים...');
      initDB();

      // יצירת תיקייה לשמירת התמונות אם לא קיימת
      const isDeployment = process.env.REPLIT_DEPLOYMENT === '1';
      const dataDir = path.join(__dirname, 'data');
      const uploadsDir = path.join(dataDir, 'uploads');
      const backupsDir = path.join(dataDir, 'backups');

      // יצירת כל התיקיות הנדרשות אם הן לא קיימות
      [dataDir, uploadsDir, backupsDir].forEach(dir => {
        if (!fs.existsSync(dir)) {
          try {
            fs.mkdirSync(dir, { recursive: true });
            console.log(`✅ תיקייה נוצרה בהצלחה: ${dir}`);
          } catch (err) {
            console.error(`❌ שגיאה ביצירת תיקייה ${dir}:`, err);
          }
        }
      });

      // יצירת תיקיות נדרשות
      [dataDir, uploadsDir, backupsDir].forEach(dir => {
        if (!fs.existsSync(dir)) {
          try {
            fs.mkdirSync(dir, { recursive: true });
            console.log(`✅ תיקייה נוצרה בהצלחה: ${dir}`);
          } catch (err) {
            console.error(`❌ שגיאה ביצירת תיקייה ${dir}:`, err);
            // נסה ליצור בנתיב אחר אם נכשל
            const altDir = path.join(process.cwd(), dir.split(path.sep).pop());
            try {
              fs.mkdirSync(altDir, { recursive: true });
              console.log(`✅ תיקייה נוצרה בנתיב חלופי: ${altDir}`);
            } catch (altErr) {
              console.error(`❌ שגיאה ביצירת תיקייה חלופית:`, altErr);
            }
          }
        }
      });

      // וידוא שהתיקיות קיימות לפני התחלת השרת
      if (!fs.existsSync(uploadsDir) || !fs.existsSync(backupsDir)) {
        console.error("❌ לא ניתן ליצור תיקיות נדרשות");
        process.exit(1);
      }

      // פונקציה לשמירת תמונה בדאטאבייס
      async function saveImageToDB(buffer, mimeType) {
        if (!buffer) {
          throw new Error('Buffer is required');
        }

        const client = await pool.connect();
        try {
          const imageId = Date.now().toString();
          await client.query('BEGIN');
          await client.query(
            'INSERT INTO images (id, data, mime_type) VALUES ($1, $2, $3)',
            [imageId, buffer, mimeType]
          );
          await client.query('COMMIT');
          return imageId;
        } catch (error) {
          await client.query('ROLLBACK');
          console.error('שגיאה בשמירת תמונה:', error);
          throw error;
        } finally {
          client.release();
        }
      }

      // עדכון הטיפול בתמונת פרופיל בהרשמה
      app.post("/signup", upload.single("profileImage"), async (req, res) => {
        try {
          console.log("נתוני הרשמה התקבלו:", req.body);
          console.log("קובץ תמונה:", req.file);

          const {
            firstName,
            lastName,
            email,
            password,
            gender,
            dob,
            height,
            aboutMe,
            lookingFor,
            religiousLevel,
            city,
            phone,
            facebook,
            instagram,
          } = req.body;

          if (!firstName || !lastName || !email || !password || !phone) {
            return res.status(400).send(`
              <script>
                alert("יש למלא את כל שדות החובה");
                window.location.href = "/";
              </script>
            `);
          }

          const existingUser = users.find((u) => u.email === email);
          if (existingUser) {
            return res.status(400).send(`
              <script>
                alert("כתובת האימייל כבר רשומה במערכת");
                window.location.href = "/";
              </script>
            `);
          }

          const hashedPassword = hashPassword(password);
          let profileImagePath = null;

          if (req.file) {
            const imageId = await saveImageToDB(req.file.buffer, req.file.mimetype);
            profileImagePath = `/image/${imageId}`;
          }

          const newUser = {
            id: Date.now().toString(),
            firstName,
            lastName,
            email,
            password: hashedPassword,
            gender: gender || "",
            relationshipStatus: req.body.relationshipStatus || "",
            hasChildren: req.body.hasChildren || "",
            dob: dob || null,
            height: height ? Number(height) : null,
            aboutMe: aboutMe || "",
            lookingFor: lookingFor || "",
            religiousLevel: religiousLevel || "",
            city: city || "",
            phone: phone || "",
            facebook: facebook || "",
            instagram: instagram || "",
            smoking: req.body.smoking || "",
            hobbies: req.body.hobbies || "",
            education: req.body.education || "",
            occupation: req.body.occupation || "",
            ethnicity: req.body.ethnicity || "",
            profileImage: profileImagePath,
            createdAt: new Date(),
            hasSubscription: false,
            isApproved: true,
          };

          const client = await pool.connect();
          try {
            await client.query('BEGIN');

            // Save user to database
            await client.query(`
              INSERT INTO users (
                id, first_name, last_name, email, password, gender,
                relationship_status, has_children, dob, height,
                about_me, looking_for, religious_level, city,
                phone, facebook, instagram, profile_image,
                has_subscription, is_approved, created_at
              ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21)
            `, [
              newUser.id, newUser.firstName, newUser.lastName, newUser.email,
              newUser.password, newUser.gender, newUser.relationshipStatus,
              newUser.hasChildren, newUser.dob, newUser.height, newUser.aboutMe,
              newUser.lookingFor, newUser.religiousLevel, newUser.city,
              newUser.phone, newUser.facebook, newUser.instagram, newUser.profileImage,
              newUser.hasSubscription, newUser.isApproved, newUser.createdAt
            ]);

            await client.query('COMMIT');

            // Add to memory array
            users.push(newUser);
            await saveUsersData();

            // Show success message and redirect
            res.send(`
              <!DOCTYPE html>
              <html lang="he" dir="rtl">
              <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>נרשמת בהצלחה - הכר/י את החצי השני שלך</title>
                <style>
                  ${commonStyles}
                  .success-container {
                    text-align: center;
                    max-width: 600px;
                    margin: 100px auto;
                    padding: 30px;
                    background-color: var(--form-background);
                    border-radius: 10px;
                    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
                  }
                  .success-icon {
                    font-size: 72px;
                    margin-bottom: 20px;
                    color: var(--primary-color);
                  }
                  .success-message {
                    font-size: 1.5rem;
                    margin-bottom: 30px;
                    color: var(--dark-color);
                  }
                </style>
              </head>
              <body>
                <div class="success-container">
                  <div class="success-icon">✅</div>
                  <h1>נרשמת בהצלחה!</h1>
                  <p class="success-message">התחלי/י לעשות לייק כדי להכיר ❤️</p>
                  <a href="/home?userId=${newUser.id}" class="button">המשך לדף הבית</a>
                </div>

                <script>
                  setTimeout(() => {
                    window.location.href = "/home?userId=${newUser.id}";
                  }, 3000);
                </script>
              </body>
              </html>
            `);
          } catch (dbError) {
            await client.query('ROLLBACK');
            console.error("שגיאה בשמירת משתמש:", dbError);
            throw dbError;
          } finally {
            client.release();
          }
        } catch (error) {
          console.error("שגיאה בהרשמה:", error);
          res.status(500).send(`
            <script>
              alert("שגיאה בתהליך ההרשמה, נסה שוב");
              window.location.href = "/";
            </script>
          `);
        }
      });

      // עדכון הטיפול בתמונת אירוע
      app.post("/admin/create-event", upload.single("eventImage"), async (req, res) => {
        const client = await pool.connect();
        try {
          const { name, date, location, description } = req.body;

          await client.query('BEGIN');

          let imageId = null;
          if (req.file) {
            // קרא את התמונה כ-buffer
            const imageBuffer = req.file.buffer;
            imageId = await saveImageToDB(imageBuffer, req.file.mimetype);
          }

          const eventId = Date.now().toString();

          // Insert event into database with image data
          await client.query(`
            INSERT INTO events (id, name, date, location, description, image, created_at)
            VALUES ($1, $2, $3, $4, $5, $6, NOW())
          `, [eventId, name, date, location, description, imageId ? `/image/${imageId}` : null]);

          const newEvent = {
            id: eventId,
            name,
            date,
            location, 
            description,
            image: imageId ? `/event-image/${eventId}` : null,
            participants: [],
            pendingParticipants: []
          };

          events.push(newEvent);
          await client.query('COMMIT');

          await saveUsersData();
          res.json({ success: true, message: "האירוע נוצר בהצלחה", event: newEvent });

        } catch (error) {
          await client.query('ROLLBACK');
          console.error("שגיאה ביצירת אירוע:", error);
          res.status(500).json({ success: false, message: "שגיאה ביצירת האירוע: " + error.message });
        } finally {
          client.release();
        }
      });

      // נתיב להצגת תמונה מהדאטאבייס
      app.get('/image/:id', async (req, res) => {
        const client = await pool.connect();
        try {
          const result = await client.query(
            'SELECT data, mime_type FROM images WHERE id = $1',
            [req.params.id]
          );
          if (result.rows.length === 0) {
            return res.status(404).send('תמונה לא נמצאה');
          }
          const image = result.rows[0];
          res.set('Content-Type', image.mime_type);
          res.send(image.data);
        } catch (error) {
          console.error('שגיאה בטעינת תמונה:', error);
          res.status(500).send('שגיאה בטעינת התמונה');
        } finally {
          client.release();
        }
      });


      // Serve uploaded files
      // הגדרת נגישות לשתי תיקיות ה-uploads
      app.use('/uploads', express.static(path.join(__dirname, 'uploads')));
      app.use('/uploads', express.static(path.join(__dirname, 'data/uploads')));


      // Initialize views array
      let views = [];

      // הגדרת multer כבר קיימת למעלה, אז נמחק את ההגדרה הכפולה

      // משתמשים מנוהלים דרך קובץ JSON

      // משתמשי ברירת מחדל יתווספו רק אם אין קובץ users_data.json
      if (!fs.existsSync(path.join(dataDir, "users_data.json"))) {
        users.push({
          id: "test123",
          firstName: "משתמש",
          lastName: "בדיקה",
          email: "zagizagi321@gmail.com",
          password:
            "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3", // הצפנה של "123"
          gender: "male",
          dob: "1990-01-01",
          height: 175,
          religiousLevel: "חילוני",
          aboutMe: "משתמש לבדיקת המערכת",
          lookingFor: "בדיקות מערכת",
          city: "תל אביב",
          phone: "0501234567",
          facebook: "test.user",
          instagram: "test.user",
          createdAt: new Date(),
          hasSubscription: true,
        });

        users.push({
          id: "yaronbuhnik",
          firstName: "ירון",
          lastName: "בוכניק",
          email: "yaronbuhnik@gmail.com",
          password:
            "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3", // הצפנה של "123"
          gender: "male",
          dob: "1990-01-01",
          height: 175,
          religiousLevel: "חילוני",
          aboutMe: "משתמש חדש",
          lookingFor: "היכרויות",
          city: "תל אביב",
          phone: "0501234567",
          createdAt: new Date(),
          hasSubscription: false,
        });
      }

      // מוצא את היוזרים לפי האימייל
      const user1 = users.find((u) => u.email === "zagizagi321@gmail.com");
      const user2 = users.find((u) => u.email === "yaronbuhnik@gmail.com");

      // פונקציית עזר לחישוב גיל
      function calculateAge(dob) {
        const birthDate = new Date(dob);
        const today = new Date();
        let age = today.getFullYear() - birthDate.getFullYear();
        const m = today.getMonth() - birthDate.getMonth();
        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
          age--;
        }
        return age;
      }

      // פונקציית עזר לתצוגת משתמש ללא סיסמה וללא נתוני קשר
      function sanitizeUser(
        user,
        showContactInfo = false,
        isOwnProfile = false,
        currentUser = null,
      ) {
        // בדיקת התאמה הדדית
        const hasMatch =
          currentUser &&
          likes.some(
            (l) => l.fromUserId === currentUser.id && l.toUserId === user.id,
          ) &&
          likes.some(
            (l) => l.fromUserId === user.id && l.toUserId === currentUser.id,
          );
        if (!user) return null;

        // נתונים שאינם סודיים תמיד מוצגים
        const publicInfo = {
          id: user.id,
          firstName: user.firstName,
          lastName: user.lastName,
          gender: user.gender,
          dob: user.dob,
          height: user.height,
          religiousLevel: user.religiousLevel,
          aboutMe: user.aboutMe,
          lookingFor: user.lookingFor,
          profileImage: user.profileImage,
          city: user.city,
          createdAt: user.createdAt,
          relationshipStatus: user.relationshipStatus,
          hasChildren: user.hasChildren,
          smoking: user.smoking,
          hobbies: user.hobbies,
          education: user.education,
          occupation: user.occupation,
          ethnicity: user.ethnicity,
          hasSubscription: user.hasSubscription,
          phone: user.phone,
          facebook: user.facebook,
          instagram: user.instagram,
          email: user.email,
        };

        // בדיקת הרשאה לצפייה בפרטי קשר
        const canViewContactInfo =
          isOwnProfile ||
          (showContactInfo &&
            hasMatch &&
            (currentUser?.gender === "female" || currentUser?.hasSubscription));

        // רק אם אין הרשאה לצפות בפרטי קשר, מחליף את הערכים ב'לא צוין'
        if (!canViewContactInfo) {
          publicInfo.phone = "לא צוין";
          publicInfo.facebook = "לא צוין";
          publicInfo.instagram = "לא צוין";
          publicInfo.email = "לא צוין";
        }

        return publicInfo;
      }

      // פונקציה להצפנת סיסמה
      function hashPassword(password) {
        return crypto.createHash("sha256").update(password).digest("hex");
      }

      // Middleware
      app.use(express.json());
      app.use(express.urlencoded({ extended: true }));
      app.use(express.static("public", { index: false }));
      app.get("/uploads/:filename", (req, res) => {
        try {
          const filePath = path.join(__dirname, 'uploads', req.params.filename);
          if (!fs.existsSync(filePath)) {
            return res.status(404).send('קובץ לא נמצא');
          }
          res.sendFile(filePath);
        } catch (error) {
          console.error("שגיאה בטעינת קובץ:", error);
          res.status(500).send('שגיאה בטעינת הקובץ');
        }
      });

      // עשיית לייק API
      app.post("/like", express.json(), async (req, res) => {
        let client;
        try {
          const { fromUserId, toUserId } = req.body;
          console.log("התקבלה בקשת לייק:", { fromUserId, toUserId });

          if (!fromUserId || !toUserId) {
            return res.status(400).json({ success: false, message: "חסרים פרטי משתמש" });
          }

          const fromUser = users.find(u => u.id === fromUserId);
          const toUser = users.find(u => u.id === toUserId);

          if (!fromUser || !toUser) {
            return res.status(404).json({ success: false, message: "משתמש לא נמצא" });
          }

          client = await pool.connect();
          await client.query('BEGIN');

          const existingLike = await client.query(
            'SELECT DISTINCT id FROM likes WHERE from_user_id = $1 AND to_user_id = $2',
            [fromUserId, toUserId]
          );

          if (existingLike.rows.length > 0) {
            await client.query('ROLLBACK');
            return res.json({ success: true, message: "כבר נתת לייק למשתמש זה" });
          }

          const newLike = {
            id: Date.now().toString(),
            fromUserId,
            toUserId,
            timestamp: new Date()
          };

          await client.query(
            'INSERT INTO likes (id, from_user_id, to_user_id, created_at) VALUES ($1, $2, $3, $4)',
            [newLike.id, newLike.fromUserId, newLike.toUserId, newLike.timestamp]
          );

          const matchingLike = await client.query(
            'SELECT id FROM likes WHERE from_user_id = $1 AND to_user_id = $2',
            [toUserId, fromUserId]
          );

          const hasMatch = matchingLike.rows.length > 0;

          try {
            if (hasMatch) {
              await client.query(`
                INSERT INTO matches (id, user1_id, user2_id, created_at)
                VALUES ($1, $2, $3, NOW())
                ON CONFLICT DO NOTHING
              `, [Date.now().toString(), fromUserId, toUserId]);

              try {
                if (!systemNotifications.some(n => 
                  n.userId === fromUserId && 
                  n.type === 'match' && 
                  n.content.includes(toUser.firstName)
                )) {
                  await addMatchNotification(fromUserId, toUserId);
                }
                if (!systemNotifications.some(n => 
                  n.userId === toUserId && 
                  n.type === 'match' && 
                  n.content.includes(fromUser.firstName)
                )) {
                  await addMatchNotification(toUserId, fromUserId);
                }
              } catch (notificationError) {
                console.error("שגיאה בהוספת התראות:", notificationError);
                // Continue execution even if notification fails
              }
            }
          } catch (matchError) {
            console.error("שגיאה בהוספת התאמה:", matchError);
            // Continue execution even if match creation fails
          }

          likes = likes.filter(l => !(l.fromUserId === fromUserId && l.toUserId === toUserId));
          likes.push(newLike);

          await client.query('COMMIT');
          await saveUsersData();

          return res.json({
            success: true,
            match: hasMatch,
            matchName: hasMatch ? toUser.firstName : null,
            message: "הלייק נוסף בהצלחה ❤️"
          });

        } catch (error) {
          if (client) {
            await client.query('ROLLBACK');
          }
          console.error("שגיאה בעת עשיית לייק:", error);
          // Return success even if there was an internal error, as long as the like was added
          return res.json({ 
            success: true,
            message: "הלייק נוסף בהצלחה ❤️"
          });
        } finally {
          if (client) {
            client.release();
          }
        }
      });

      // ביטול לייק API
      app.post("/unlike", express.json(), async (req, res) => {
        const client = await pool.connect();
        try {
          const { fromUserId, toUserId } = req.body;
          console.log("התקבלה בקשת ביטול לייק:", { fromUserId, toUserId });

          await client.query('BEGIN');

          // מחק את הלייק מהדאטאבייס
          await client.query(
            'DELETE FROM likes WHERE from_user_id = $1 AND to_user_id = $2',
            [fromUserId, toUserId]
          );

          // עדכן את המערך בזיכרון
          likes = likes.filter(
            like => !(like.fromUserId === fromUserId && like.toUserId === toUserId)
          );

          // בדוק אם יש לייק הפוך
          const hasReverseLike = likes.some(l => 
            l.fromUserId === toUserId && l.toUserId === fromUserId
          );

          // אם אין לייק הפוך, מחק את ההתאמה מהדאטאבייס
          if (!hasReverseLike) {
            await client.query(
              'DELETE FROM matches WHERE (user1_id = $1 AND user2_id = $2) OR (user1_id = $2 AND user2_id = $1)',
              [fromUserId, toUserId]
            );
          }

          await client.query('COMMIT');
          await saveUsersData();

          res.json({
            success: true,
            message: "הלייק בוטל בהצלחה",
            match: hasReverseLike
          });

        } catch (error) {
          await client.query('ROLLBACK');
          console.error("שגיאה בביטול לייק:", error);
          res.status(500).json({ success: false, message: "שגיאה בביטול הלייק" });
        } finally {
          client.release();
        }
      });

      // API לעדכון פרופיל
      app.post("/update-profile", express.json(), async (req, res) => {
        const client = await pool.connect();
        try {
          const {
            userId,
            aboutMe,
            lookingFor,
            facebook,
            instagram,
            smoking,
            hobbies,
            education,
            occupation,
            ethnicity,
            relationshipStatus,
            hasChildren,
          } = req.body;

          if (!userId) {
            return res
              .status(400)
              .json({ success: false, message: "מזהה משתמש חסר" });
          }

          const userIndex = users.findIndex((u) => u.id === userId);
          if (userIndex === -1) {
            return res.status(404).json({ success: false, message: "משתמש לא נמצא" });
          }

          await client.query('BEGIN');

          // עדכון במסד הנתונים
          const result = await client.query(`
            UPDATE users 
            SET about_me = COALESCE($1, about_me),
                looking_for = COALESCE($2, looking_for),
                facebook = COALESCE($3, facebook),
                instagram = COALESCE($4, instagram),
                smoking = COALESCE($5, smoking),
                hobbies = COALESCE($6, hobbies),
                education = COALESCE($7, education),
                occupation = COALESCE($8, occupation),
                ethnicity = COALESCE($9, ethnicity),
                relationship_status = COALESCE($10, relationship_status),
                has_children = COALESCE($11, has_children)
            WHERE id = $12
            RETURNING *
          `, [
            aboutMe,
            lookingFor,
            facebook,
            instagram,
            smoking,
            hobbies,
            education,
            occupation,
            ethnicity,
            relationshipStatus,
            hasChildren,
            userId
          ]);

          if (result.rowCount === 0) {
            throw new Error("לא נמצא משתמש לעדכון");
          }

          // עדכון בזיכרון
          const updatedUser = result.rows[0];
          users[userIndex] = {
            ...users[userIndex],
            aboutMe: updatedUser.about_me,
            lookingFor: updatedUser.looking_for,
            facebook: updatedUser.facebook,
            instagram: updatedUser.instagram,
            smoking: updatedUser.smoking,
            hobbies: updatedUser.hobbies,
            education: updatedUser.education,
            occupation: updatedUser.occupation,
            ethnicity: updatedUser.ethnicity,
            relationshipStatus: updatedUser.relationship_status,
            hasChildren: updatedUser.has_children
          };

          await saveUsersData();
          await client.query('COMMIT');

          res.json({ success: true, message: "הפרופיל עודכן בהצלחה" });

        } catch (error) {
          await client.query('ROLLBACK');
          console.error("שגיאה בעדכון פרופיל:", error);
          res.status(500).json({ success: false, message: "שגיאה בעדכון הפרופיל" });
        } finally {
          client.release();
        }
      });

      // נתיב הרשמה - עכשיו עם טיפול בהעלאת תמונה ושדות נוספים
      app.post("/signup", upload.single("profileImage"), async (req, res) => {
        try {
          console.log("נתוני הרשמה התקבלו:", req.body);
          console.log("קובץ תמונה:", req.file);

          const {
            firstName,
            lastName,
            email,
            password,
            gender,
            dob,
            height,
            aboutMe,
            lookingFor,
            religiousLevel,
            city,
            phone,
            facebook,
            instagram,
          } = req.body;

          // בדיקות תקינות שדות חובה
          if (!firstName || !lastName || !email || !password || !phone) {
            return res.status(400).send("שגיאה - יש למלא את כל שדות החובה");
          }

          // בדיקה אם המשתמש כבר קיים
          const existingUser = users.find((u) => u.email === email);
          if (existingUser) {
            return res.status(400).send("שגיאה - כתובת האימייל כבר רשומה במערכת");
          }

          // הצפנת הסיסמה
          const hashedPassword = hashPassword(password);

          // נתיב תמונת הפרופיל אם הועלתה תמונה
          const profileImagePath = req.file ? `/uploads/${req.file.filename}` : null;

          // יצירת משתמש חדש
          const newUser = {
            id: Date.now().toString(),
            firstName,
            lastName,
            isApproved: false, // משתמש חדש מחכה לאישור מנהל
            email,
            password: hashedPassword,
            gender: gender || "",
            relationshipStatus: req.body.relationshipStatus || "",
            hasChildren: req.body.hasChildren || "",
            dob: dob || null,
            height: height ? Number(height) : null,
            aboutMe: aboutMe || "",
            lookingFor: lookingFor || "",
            religiousLevel: religiousLevel || "",
            city: city || "",
            phone: phone || "",
            facebook: facebook || "",
            instagram: instagram || "",
            smoking: req.body.smoking || "",
            hobbies: req.body.hobbies || "",
            education: req.body.education || "",
            occupation: req.body.occupation || "",
            ethnicity: req.body.ethnicity || "",
            profileImage: profileImagePath,
            createdAt: new Date(),
            eventId: "1743063523732", // מסיבת השקעות לעצלנים
            hasSubscription: false, // מנוי לא פעיל באופן אוטומטי
            isApproved: true, // כולם מאושרים אוטומטית
          };

          // רישום אוטומטי לאירוע מתוך הפרמטרים
          const eventId = req.query.eventId || "1743962846251"; // ברירת מחדל אם לא הועבר אירוע
          const event = events.find((e) => e.id === eventId);

          if (event) {
            if (!event.participants.includes(newUser.id)) {
              // הוספה למערך בזיכרון
              event.participants.push(newUser.id);

              // הוספה לדאטאבייס
              await client.query(`
                INSERT INTO event_participants (event_id, user_id, status)
                VALUES ($1, $2, 'approved')
                ON CONFLICT (event_id, user_id) DO NOTHING
              `, [eventId, newUser.id]);

              console.log(`✅ משתמש ${newUser.id} נרשם בהצלחה לאירוע ${event.name}`);
            }
          } else {
            console.log(`❌ לא נמצא אירוע עם מזהה ${eventId}`);
          }

          // הוסף את המשתמש לאירוע מסיבת השקעות לעצלנים
          const existingEvent = events.find((e) => e.id === "1743962846251");
          if (existingEvent) {
            if (!existingEvent.participants.includes(newUser.id)) {
              existingEvent.participants.push(newUser.id);
              console.log(
                `משתמש ${newUser.id} נרשם בהצלחה לאירוע ${existingEvent.name}`,
              );
            }
          }

          // שמירת המשתמש
          users.push(newUser);
          try {
            await saveUserToDatabase(newUser);
            console.log("משתמש נוצר בהצלחה:", sanitizeUser(newUser));
          } catch (error) {
            console.error("שגיאה בשמירת משתמש במסד הנתונים:", error);
          }

          // שמירת הנתונים מיד לאחר הוספת משתמש חדש
          try {
            const data = {
              users: users,
              likes: likes,
              events: events,
              lastUpdate: new Date().toISOString(),
            };
            fs.writeFileSync(
              "users_data.json",
              JSON.stringify(data, null, 2),
              "utf8",
            );
            console.log("נתוני משתמש חדש נשמרו בהצלחה");
          } catch (error) {
            console.error("שגיאה בשמירת נתוני משתמש חדש:", error);
          }
          function saveData(data, filename) {
            try {
              fs.writeFileSync(filename, JSON.stringify(data, null, 2), "utf8");
              console.log("✅ נתונים נשמרו בהצלחה בקובץ הראשי:", filename);
              const backupFilename = `${filename}.backup`;
              fs.writeFileSync(backupFilename, JSON.stringify(data, null, 2), "utf8");
              console.log("✅ נתונים גובו בהצלחה:", backupFilename);
              return true;
            } catch (error) {
              console.error("❌ שגיאה בשמירת נתונים:", error);
              return false;
            }
          }
          function loadData(filename) {
            try {
              const data = JSON.parse(fs.readFileSync(filename, "utf8"));
              console.log("✅ נתונים נטענו בהצלחה מהקובץ הראשי:", filename);
              return data;
            } catch (mainError) {
              console.error("❌ שגיאה בטעינת הקובץ הראשי:", mainError);

              try {
                const backupFilename = `${filename}.backup`;
                const backupData = JSON.parse(
                  fs.readFileSync(backupFilename, "utf8"),
                );
                console.log("🔄 משחזר נתונים מגיבוי:", backupFilename);

                fs.writeFileSync(
                  filename,
                  JSON.stringify(backupData, null, 2),
                  "utf8",
                );
                console.log("✅ הקובץ הראשי שוחזר בהצלחה מגיבוי");

                return backupData;
              } catch (backupError) {
                console.error("❌ שגיאה בשחזור מגיבוי:", backupError);
                return null;
              }
            }
          }

          // הפניה לדף התחברות לאחר הרשמה מוצלחת
          // בדיקת מגדר - כל הבחורות מקבלות הודעת הצלחה מותאמת ועוברות לדף הבית
          if (req.body.gender === "female") {
            res.send(`
              <!DOCTYPE html>
              <html lang="he" dir="rtl">
              <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>נרשמת בהצלחה - הכר/י את החצי השני שלך</title>
                <style>
                  ${commonStyles}
                  .success-container {
                    text-align: center;
                    max-width: 600px;
                    margin: 100px auto;
                    padding: 30px;
                    background-color: var(--form-background);
                    border-radius: 10px;
                    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
                  }
                  .success-icon {
                    font-size: 72px;
                    margin-bottom: 20px;
                    color: var(--primary-color);
                  }
                  .success-message {
                    font-size: 1.5rem;
                    margin-bottom: 30px;
                    color: var(--dark-color);
                  }
                </style>
              </head>
              <body>
                <div class="success-container">
                  <div class="success-icon">✅</div>
                  <h1>נרשמת בהצלחה!</h1>
                  <p class="success-message">התחילי לעשות לייקים ולהכיר את החצי השני שלך ❤️</p>
                  <a href="/home?userId=${newUser.id}" class="button">המשך לדף הבית</a>
                </div>
                <script>
                  setTimeout(() => {
                    window.location.href = "/home?userId=${newUser.id}";
                  }, 3000);
                </script>
              </body>
              </html>
            `);
            return;
          }

          // הצגת דף הצלחה מותאם מגדר והפניה בהתאם
          const redirectPage = `
      <!DOCTYPE html>
      <html lang="he" dir="rtl">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>נרשמת בהצלחה - הכר/י את החצי השני שלך</title>
        <style>
          ${commonStyles}

          .success-container {
            text-align: center;
            max-width: 600px;
            margin: 100px auto;
            padding: 30px;
            background-color: var(--form-background);
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
          }

          .success-icon {
            font-size: 72px;
            margin-bottom: 20px;
            color: var(--primary-color);
          }

          .success-message {
            font-size: 1.5rem;
            margin-bottom: 30px;
            color: var(--dark-color);
          }

          .welcome-message {
            background: linear-gradient(135deg, var(--accent-color) 0%, var(--form-background) 100%);
            padding: 20px;
            border-radius: 12px;
            margin: 20px 0;
            border-right: 4px solid var(--primary-color);
          }
        </style>
      </head>
      <body>
        <div class="success-container">
          <div class="success-icon">${req.body.gender === 'female' ? '✨' : '✅'}</div>
          <h1>${req.body.gender === 'female' ? 'ברוכה הבאה!' : 'נרשמת בהצלחה!'}</h1>
          ${req.body.gender === 'female' ? `
            <div class="welcome-message">
              <p class="success-message">נרשמת בהצלחה!</p>
              <p>התחילי לעשות לייקים ולהכיר את החצי השני שלך ❤️</p>
            </div>
          ` : '<p class="success-message">ברוך הבא! אתה מועבר לדף הבית</p>'}
        </div>

        <script>
          setTimeout(() => {
            window.location.href = "/home?userId=${newUser.id}";
          }, 3000);
        </script>
      </body>
      </html>
      `;

          res.send(redirectPage);
        } catch (error) {
          console.error("שגיאה:", error);
          res.status(500).send("שגיאה בתהליך ההרשמה");
        }
      });

      // נתיב התחברות
      app.post("/login", (req, res) => {
        try {
          console.log("נתוני התחברות התקבלו:", req.body);

          const { email, password } = req.body;

          // בדיקה אם המשתמש קיים
          const user = users.find((u) => u.email === email);

          if (!user) {
            return res.send(`
              <!DOCTYPE html>
              <html dir="rtl">
                <head><meta charset="UTF-8"><title>שגיאה</title><style>${commonStyles}</style></head>
                <body>
                  <div class="page-container">
                    <h1>שגיאה</h1>
                    <p>משתמש לא קיים במערכת</p>
                    <a href="/login" class="button">חזרה להתחברות</a>
                  </div>
                </body>
              </html>
            `);
          }

          // בדיקה אם המשתמש אושר על ידי מנהל
          if (!user.isApproved) {
            return res.send(`
              <!DOCTYPE html>
              <html dir="rtl">
                <head><meta charset="UTF-8"><title>המתן לאישור</title><style>${commonStyles}</style></head>
                <body>
                  <div class="page-container">
                    <h1>המתן לאישור מנהל</h1>
                    <p>לאחר אישור הרשמתך על ידי מנהל המערכת תוכל להתחבר ולהתחיל להכיר</p>
                    <p>אם טרם שילמת דמי רישום, ניתן לשלם כאן:</p>
                    <a href="/subscribe?userId=${user.id}" class="button">המשך לתשלום</a>
                    <a href="/login" class="button" style="margin-top: 10px;">חזרה להתחברות</a>
                  </div>
                </body>
              </html>
            `);
          }

          // בדיקות תקינות
          if (!email || !password) {
            // החזר את דף ההתחברות עם הודעת שגיאה
            return res.send(`
              <!DOCTYPE html>
              <html lang="he" dir="rtl">
              <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>התחברות - הכר/י את החצי השני שלך</title>
                <style>
                  ${commonStyles}

                  .login-container {
                    max-width: 400px;
                    margin: 80px auto;
                    padding: 30px;
                    background-color: var(--form-background);
                    border-radius: 12px;
                    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
                  }

                  .form-group {
                    margin-bottom: 20px;
                  }

                  label {
                    display: block;
                    margin-bottom: 8px;
                    font-weight: bold;
                  }

                  input {
                    width: 100%;
                    padding: 12px;
                    border: 1px solid #ddd;
                    border-radius: 6px;
                    font-size: 16px;
                  }

                  .error-message {
                    color: var(--primary-color);
                    background-color: var(--accent-color);
                    padding: 10px;
                    border-radius: 6px;
                    margin-bottom: 20px;
                    border-right: 4px solid var(--primary-color);
                  }

                  .forgot-password {
                    display: block;
                    margin-top: 15px;
                    color: var(--primary-color);
                    text-decoration: none;
                  }

                  .forgot-password:hover {
                    text-decoration: underline;
                  }
                </style>
              </head>
              <body>
                <div class="navbar">
                  <a href="/" class="navbar-brand">הכר/י את החצי השני שלך</a>
                </div>

                <div class="login-container">
                  <h1>התחברות</h1>

                  <div class="error-message">
                    <strong>שגיאה!</strong> יש להזין אימייל וסיסמה.
                  </div>

                  <form action="/login" method="POST">
                    <div class="form-group">
                      <label for="email">אימייל:</label>
                      <input type="email" id="email" name="email" value="${email || ""}" required>
                    </div>

                    <div class="form-group">
                      <label for="password">סיסמה:</label>
                      <input type="password" id="password" name="password" required>
                    </div>

                    <button type="submit" class="button">התחבר</button>
                    <a href="/forgot-password" class="forgot-password">שכחתי סיסמה</a>
                  </form>

                  <p style="margin-top: 30px; text-align: center;">
                    אין לך עדיין חשבון? <a href="/signup" style="color: var(--primary-color);">הירשם עכשיו</a>
                  </p>
                </div>
              </body>
              </html>
            `);
          }

          // חיפוש המשתמש
          const foundUser = users.find((u) => u.email === email);

          // אם האימייל לא קיים
          if (!foundUser) {
            return res.send(`
              <!DOCTYPE html>
              <html lang="he" dir="rtl">
              <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>התחברות - הכר/י את החצי השני שלך</title>
                <style>
                  ${commonStyles}

                  .login-container {
                    max-width: 400px;
                    margin: 80px auto;
                    padding: 30px;
                    background-color: var(--form-background);
                    border-radius: 12px;
                    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
                  }

                  .form-group {
                    margin-bottom: 20px;
                  }

                  label {
                    display: block;
                    margin-bottom: 8px;
                    font-weight: bold;
                  }

                  input {
                    width: 100%;
                    padding: 12px;
                    border: 1px solid #ddd;
                    border-radius: 6px;
                    font-size: 16px;
                  }

                  .error-message {
                    color: var(--primary-color);
                    background-color: var(--accent-color);
                    padding: 10px;
                    border-radius: 6px;
                    margin-bottom: 20px;
                    border-right: 4px solid var(--primary-color);
                  }

                  .forgot-password {
                    display: block;
                    margin-top: 15px;
                    color: var(--primary-color);
                    text-decoration: none;
                  }

                  .forgot-password:hover {
                    text-decoration: underline;
                  }
                </style>
              </head>
              <body>
                <div class="navbar">
                  <a href="/" class="navbar-brand">הכר/י את החצי השני שלך</a>
                </div>

                <div class="login-container">
                  <h1>התחברות</h1>

                  <div class="error-message">
                    <strong>שגיאה!</strong> האימייל שהזנת אינו רשום במערכת.
                  </div>

                  <form action="/login" method="POST">
                    <div class="form-group">
                      <label for="email">אימייל:</label>
                      <input type="email" id="email" name="email" value="${email}" required>
                    </div>

                    <div class="form-group">
                      <label for="password">סיסמה:</label>
                      <input type="password" id="password" name="password" required>
                    </div>

                    <button type="submit" class="button">התחבר</button>
                    <a href="/forgot-password" class="forgot-password">שכחתי סיסמה</a>
                  </form>

                  <p style="margin-top: 30px; text-align: center;">
                    אין לך עדיין חשבון? <a href="/signup" style="color: var(--primary-color);">הירשם עכשיו</a>
                  </p>
                </div>
              </body>
              </html>
            `);
          }

          // השוואת סיסמאות מוצפנות
          const hashedInputPassword = hashPassword(password);
          if (user.password !== hashedInputPassword) {
            return res.send(`
              <!DOCTYPE html>
              <html lang="he" dir="rtl">
              <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>התחברות - הכר/י את החצי השני שלך</title>
                <style>
                  ${commonStyles}

                  .login-container {
                    max-width: 400px;
                    margin: 80px auto;
                    padding: 30px;
                    background-color: var(--form-background);
                    border-radius: 12px;
                    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
                  }

                  .form-group {
                    margin-bottom: 20px;
                  }

                  label {
                    display: block;
                    margin-bottom: 8px;
                    font-weight: bold;
                  }

                  input {
                    width: 100%;
                    padding: 12px;
                    border: 1px solid #ddd;
                    border-radius: 6px;
                    font-size: 16px;
                  }

                  .error-message {
                    color: var(--primary-color);
                    background-color: var(--accent-color);
                    padding: 10px;
                    border-radius: 6px;
                    margin-bottom: 20px;
                    border-right: 4px solid var(--primary-color);
                  }

                  .forgot-password {
                    display: block;
                    margin-top: 15px;
                    color: var(--primary-color);
                    text-decoration: none;
                  }

                  .forgot-password:hover {
                    text-decoration: underline;
                  }
                </style>
              </head>
              <body>
                <div class="navbar">
                  <a href="/" class="navbar-brand">הכר/י את החצי השני שלך</a>
                </div>

                <div class="login-container">
                  <h1>התחברות</h1>

                  <div class="error-message">
                    <strong>שגיאה!</strong> הסיסמה שהזנת שגויה.
                  </div>

                  <form action="/login" method="POST">
                    <div class="form-group">
                      <label for="email">אימייל:</label>
                      <input type="email" id="email" name="email" value="${email}" required>
                    </div>

                    <div class="form-group">
                      <label for="password">סיסמה:</label>
                      <input type="password" id="password" name="password" required>
                    </div>

                    <button type="submit" class="button">התחבר</button>
                    <a href="/forgot-password" class="forgot-password">שכחתי סיסמה</a>
                  </form>

                  <p style="margin-top: 30px; text-align: center;">
                    אין לך עדיין חשבון? <a href="/signup" style="color: var(--primary-color);">הירשם עכשיו</a>
                  </p>
                </div>
              </body>
              </html>
            `);
          }

          // הפניה לדף הבית המעודכן (עם אירועים ומשתתפים)
          res.send(`
      <!DOCTYPE html>
      <html lang="he" dir="rtl">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>התחברת בהצלחה - הכר/י את החצי השני שלך</title>
        <style>
          ${commonStyles}

          .success-container {
            text-align: center;
            max-width: 600px;
            margin: 100px auto;
            padding: 30px;
            background-color: var(--form-background);
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
          }

          .success-icon {
            font-size: 72px;
            margin-bottom: 20px;
            color: var(--primary-color);
          }

          .success-message {
            font-size: 1.5rem;
            margin-bottom: 30px;
            color: var(--dark-color);
          }
           </style>
      </head>
      <body>
        <div class="success-container">
          <div class="success-icon">✅</div>
          <h1>התחברת בהצלחה!</h1>
          <p class="success-message">התחלי/י לעשות לייק כדי להכיר ❤️</p>
          <a href="/home?userId=${user.id}" class="button">המשך לדף הבית</a>
        </div>

        <script>
          // הפניה אוטומטית לדף הבית אחרי 3 שניות
          setTimeout(() => {
            window.location.href = "/home?userId=${user.id}";
          }, 3000);
        </script>
      </body>
      </html>
      `);
        } catch (error) {
          console.error("שגיאה:", error);
          res.status(500).send(`
            <!DOCTYPE html>
            <html lang="he" dir="rtl">
            <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>שגיאה - הכר/י את החצי השני שלך</title>
              <style>${commonStyles}</style>
            </head>
            <body>
              <div class="navbar">
                <a href="/" class="navbar-brand">הכר/י את החצי השני שלך</a>
              </div>

              <div style="max-width: 500px; margin: 100px auto; text-align: center; padding: 20px; background-color: var(--form-background); border-radius: 10px;">
                <h1>שגיאה</h1>
                <p>אירעה שגיאה בתהליך ההתחברות. אנא נסה שוב מאוחר יותר.</p>
                <a href="/login" class="button">חזור לדף ההתחברות</a>
              </div>
            </body>
            </html>
          `);
        }
      });
      // סגנון CSS משותף לכל הדפים - עם צבעי אדמדם
      const commonStyles = `
      :root {
        --primary-color: #b22222;
        --secondary-color: #d85a5a;
        --accent-color: #f8d7da;
        --dark-color: #333333;
        --light-color: #ffffff;
        --highlight-color: #f7f2e9;
        --success-color: #28a745;
        --heart-color: #ff7e5f;
        --background-color: #f7f2e9;
        --form-background: #ffffff;
        --input-background: #ffffff;
        --gray-color: #6c757d;
        --match-gradient: linear-gradient(135deg, #ff7e5f 0%, #feb47b 100%);
        --match-background: #ffffff;
      }

      @import url('https://fonts.googleapis.com/css2?family=Rubik:wght@300;400;500;600;700&display=swap');

      body {
        font-family: 'Rubik', 'Segoe UI', sans-serif;
        line-height: 1.8;
        color: var(--dark-color);
        background-color: var(--background-color);
        letter-spacing: 0.3px;
        font-size: 16px;
      }

      /* הגדרת האנימציה תחילה */
      @keyframes blink {
        0%, 100% {
          opacity: 1;
        }
        50% {
          opacity: 0;
        }
      }

      .blinking {
        animation: blink 1.2s infinite;
      }





      h1, h2, h3 {
        font-family: 'Rubik', 'Segoe UI', sans-serif;
        font-weight: 700;
        letter-spacing: 0.4px;
        line-height: 1.4;
        text-transform: none;
      }

      h1 {
        font-size: 2.8rem;
        margin-bottom: 1.5rem;
        color: var(--primary-color);
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
      }

      h2 {
        font-size: 2.2rem;
        margin-bottom: 1.2rem;
      }

      h3 {
        font-size: 1.8rem;
        margin-bottom: 1rem;
      }

      .profile-name, .site-description, .event-title {
        font-weight: 500;
        letter-spacing: 0.5px;
      }

      .profile-info p, .event-info p {
        font-size: 1.1rem;
        line-height: 1.7;
        letter-spacing: 0.2px;
      }

      .button, input, select, textarea {
        font-family: 'Rubik', 'Segoe UI', sans-serif;
        font-weight: 500;
        letter-spacing: 0.3px;
      }

      h1 {
        font-size: 2.8rem;
        margin-bottom: 1rem;
        color: var(--primary-color);
        text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
      }

      h2 {
        font-size: 2rem;
        margin-bottom: 0.8rem;
      }

      h3 {
        font-size: 1.5rem;
        margin-bottom: 0.6rem;
      }

      button, .button {
        font-family: 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
        font-weight: 500;
        letter-spacing: 0.3px;
        text-transform: none;
        font-size: 1rem;
      }

      input, select, textarea {
        font-family: 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
        font-size: 1rem;
        letter-spacing: 0.2px;
        line-height: 1.6;
      }

      body {
        font-family: 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
        font-size: 1rem;
        line-height: 1.6;
        letter-spacing: 0.2px;
        color: var(--dark-color);
      }

      .profile-info p, .event-info p, .site-description {
        font-size: 1.1rem;
        line-height: 1.7;
        margin-bottom: 1rem;
      }

      .navbar-brand {
        font-size: 1.4rem;
        font-weight: 600;
      }

      .nav-link {
        font-size: 1.1rem;
        font-weight: 500;
      }

      .profile-detail {
        font-size: 0.95rem;
        letter-spacing: 0.3px;
      }

      h1, h2, h3 {
        font-weight: 600;
        line-height: 1.3;
      }

      .button {
        font-weight: 500;
        letter-spacing: 0.3px;
        transition: all 0.2s ease;
        border-radius: 6px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }

      .card {
        border-radius: 8px;
        border: 1px solid #eee;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
      }

      .profile-card {
        transition: all 0.2s ease;
        border: 1px solid #eee;
      }

      .profile-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      }

      .navbar {
        backdrop-filter: blur(10px);
        background-color: rgba(255,255,255,0.9);
        border-bottom: 1px solid #eee;
      }

      body { 
        font-family: Arial, sans-serif; 
        margin: 0; 
        padding: 0; 
        direction: rtl;
        background-color: var(--background-color);
        color: var(--dark-color);
        background-image: linear-gradient(120deg, #f7f2e9 0%, #f4e9e1 100%);
        min-height: 100vh;
      }

      .page-container {
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
      }

      h1, h2, h3 {
        color: var(--primary-color);
      }

      h1 {
        text-align: center;
        font-size: 2.5rem;
        margin-bottom: 5px;
        text-shadow: 1px 1px 3px rgba(0,0,0,0.1);
      }

      .site-description {
        text-align: center;
        margin: 0 auto 30px;
        max-width: 700px;
        line-height: 1.6;
        background-color: var(--form-background);
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 5px 20px rgba(178, 34, 34, 0.1);
        position: relative;
        border-right: 4px solid var(--primary-color);
      }

      .site-description .welcome {
        display: block;
        font-size: 22px;
        font-weight: bold;
        color: var(--primary-color);
        margin-bottom: 15px;
      }

      .card {
        background-color: var(--form-background);
        border-radius: 12px;
        padding: 25px;
        margin-bottom: 20px;
        box-shadow: 0 5px 15px rgba(178, 34, 34, 0.1);
      }

      button, .button { 
        padding: 12px 20px;
        background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        font-weight: bold;
        transition: all 0.3s;
        display: inline-block;
        text-decoration: none;
        text-align: center;
        box-shadow: 0 4px 10px rgba(178, 34, 34, 0.2);
      }

      button:hover, .button:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 15px rgba(178, 34, 34, 0.3);
      }

      input, select, textarea { 
        width: 100%; 
        padding: 14px; 
        margin-top: 6px;
        margin-bottom: 15px;
        border: 2px solid #f0e6d2;
        border-radius: 8px;
        box-sizing: border-box;
        font-size: 16px;
        transition: all 0.3s;
        background-color: var(--input-background);
      }

      input:focus, select:focus, textarea:focus {
        border-color: var(--primary-color);
        outline: none;
        box-shadow: 0 0 0 3px rgba(178, 34, 34, 0.2);
      }

      label { 
        display: block; 
        margin-top: 15px; 
        font-weight: bold;
        color: var(--dark-color);
      }

      .navbar {
        background-color: var(--form-background);
        box-shadow: 0 2px 10px rgba(178, 34, 34, 0.1);
        padding: 15px 20px;
        margin-bottom: 30px;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .navbar-brand {
        color: var(--primary-color);
        font-size: 24px;
        font-weight: bold;
        text-decoration: none;
      }

      .navbar-nav {
        display: flex;
        gap: 20px;
      }

      .nav-link {
        color: var(--dark-color);
        text-decoration: none;
        font-weight: bold;
        transition: all 0.3s;
        padding: 5px 10px;
        border-radius: 5px;
      }

      .nav-link:hover, .nav-link.active {
        color: var(--primary-color);
        background-color: var(--accent-color);
      }

      .footer {
        text-align: center;
        margin-top: 40px;
        padding: 20px;
        color: #888;
        border-top: 1px solid #f0e6d2;
      }

      .footer a {
        color: var(--primary-color);
        text-decoration: none;
        font-weight: bold;
      }

      .alert {
        padding: 15px;
        margin-bottom: 20px;
        border-radius: 8px;
      }

      .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
      }

      .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
      }

      .grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 25px;
        margin: 30px auto;
        max-width: 1400px;
        padding: 0 20px;
      }

      .profile-card {
        background: linear-gradient(to bottom, #ffffff, #fafafa);
        border: 1px solid rgba(178, 34, 34, 0.1);
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        display: flex;
        flex-direction: column;
        min-height: 550px;
      }

      .profile-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 30px rgba(178, 34, 34, 0.1);
      }

      .profile-img-container {
        height: 300px;
        overflow: hidden;
        position: relative;
        background: linear-gradient(45deg, var(--accent-color), var(--highlight-color));
      }

      .profile-img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.5s ease;
      }

      .profile-card:hover .profile-img {
        transform: scale(1.05);
      }

      .profile-info {
        padding: 12px;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        position: relative;
        min-height: 180px;
      }

      .action-buttons {
        position: absolute;
        bottom: 8px;
        left: 12px;
        right: 12px;
        padding-top: 5px;
        background: rgba(255, 255, 255, 0.95);
      }

      .profile-info p {
        margin-bottom: 25px;
      }

      .profile-details {
        margin: 4px 0;
      }

      .profile-info h3 {
        font-size: 1.4rem;
        margin-bottom: 15px;
        color: var(--primary-color);
      }

      .profile-details {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin: 15px 0;
      }

      .profile-detail {
        background: linear-gradient(135deg, #fff6f6 0%, #fff 100%);
        padding: 8px 15px;
        border-radius: 20px;
        font-size: 0.9rem;
        color: var(--dark-color);
        border: 1px solid rgba(178, 34, 34, 0.1);
      }

      .action-buttons {
        display: flex;
        gap: 10px;
        margin-top: 40px;
        padding-top: 20px;
        border-top: 1px solid rgba(178, 34, 34, 0.1);
      }

      .like-btn, .profile-btn {
        flex: 1;
        padding: 12px;
        border-radius: 12px;
        font-weight: 500;
        font-size: 1rem;
        transition: all 0.3s ease;
      }

      @media (max-width: 768px) {
        .dashboard-stats {
          display: grid;
          grid-template-columns: repeat(4, 1fr);
          gap: 4px;
          padding: 4px;
        }

        .stat-card {
          padding: 6px;
          margin-bottom: 0;
        }

        .stat-value {
          font-size: 1.2em;
          margin: 2px 0;
        }

        .stat-label {
          font-size: 0.7em;
          line-height: 1.2;
        }

        .grid {
          grid-template-columns: repeat(2, 1fr);
          gap: 8px;
          padding: 8px;
        }

        .profile-card {
          font-size: 0.85em;
          margin-bottom: 8px;
        }

        .profile-img-container {
          height: 140px;
        }

        .profile-info {
          padding: 8px;
        }

        .profile-info h3 {
          font-size: 0.9rem;
          margin-bottom: 4px;
        }

        .profile-details {
          gap: 3px;
          margin: 6px 0;
        }

        .profile-detail {
          font-size: 0.75rem;
          padding: 2px 4px;
        }

        .action-buttons {
          gap: 4px;
          margin-top: 6px;
        }

        .like-btn, .profile-btn {
          padding: 4px 8px;
          font-size: 0.8rem;
          min-height: 24px;
        }

        h1 {
          font-size: 1.8rem;
          margin-bottom: 0.5rem;
        }

        h2 {
          font-size: 1.4rem;
          margin-bottom: 0.4rem;
        }

        h3 {
          font-size: 1.2rem;
          margin-bottom: 0.3rem;
        }

        .navbar {
          padding: 8px;
        }

        .navbar-brand {
          font-size: 1.2rem;
        }

        .nav-link {
          font-size: 0.9rem;
          padding: 4px 8px;
        }

        .profile-name {
          font-size: 1.1rem;
        }

        .site-description {
          font-size: 0.9rem;
          padding: 15px;
          margin-bottom: 15px;
        }

        .button {
          padding: 8px 12px;
          font-size: 0.9rem;
        }

        .profile-section {
          padding: 15px;
          margin-bottom: 15px;
        }

        .profile-info-value {
          font-size: 0.9em;
        }

        .contact-info {
          padding: 10px;
          font-size: 0.9em;
        }

        .match-card, .event-card {
          flex-direction: column;
          margin: 8px 0;
        }

        .match-img, .event-img {
          width: 100%;
          height: 120px;
        }

        .match-info, .event-info {
          padding: 10px;
        }
      }

      .profile-card {
        background: linear-gradient(to bottom, var(--form-background), #fff);
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 5px 20px rgba(178, 34, 34, 0.12);
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        border: 1px solid rgba(178, 34, 34, 0.1);
        display: flex;
        flex-direction: column;
        min-height: 550px;
        height: 100%;
        position: relative;
      }

      .profile-info p {
        margin-bottom: 30px; /* Increased margin space */
      }

      .action-buttons {
        margin-top: 20px; /* Added top margin */
      }

      @media (min-width: 769px) {
        .profile-card .profile-info {
          padding: 20px;
          flex: 1;
          display: flex;
          flex-direction: column;
        }

        .profile-card .about-me {
          margin: 15px 0;
          flex-grow: 1;
          overflow: hidden;
        }

        .profile-card .action-buttons {
          position: absolute;
          bottom: 20px;
          left: 20px;
          right: 20px;
          padding: 0;
          background: none;
        }
      }

      .profile-info {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        padding: 15px;
        position: relative;
      }

      .action-buttons {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        padding: 15px;
        background: white;
        margin-top: auto;
      }

      @media (max-width: 768px) {
        .profile-card {
          height: auto;
          min-height: 420px;
        }

        .profile-info {
          padding: 15px;
          flex: 1;
        }

        .action-buttons {
          padding: 10px 15px;
          margin-top: auto;
        }
      }

      .profile-card:hover {
        transform: translateY(-8px) scale(1.01);
        box-shadow: 0 12px 30px rgba(178, 34, 34, 0.18);
      }

      .profile-img-container {
        width: 100%;
        height: 300px;
        overflow: hidden;
        position: relative;
        background: linear-gradient(45deg, var(--accent-color), var(--highlight-color));
      }

      .profile-img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.5s;
      }

      .profile-card:hover .profile-img {
        transform: scale(1.05);
      }

      .profile-info {
        padding: 20px;
        position: relative;
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(10px);
      }

      .profile-info h3 {
        margin: 0 0 10px 0;
        color: var(--primary-color);
        font-size: 1.25rem;
        font-weight: 600;
        letter-spacing: 0.5px;
      }

      .profile-info p {
        font-size: 0.95rem;
        line-height: 1.5;
        margin: 8px 0;
        color: var(--dark-color);
      }

      .profile-details {
        margin: 12px 0;
        display: flex;
        flex-wrap: wrap;
        gap: 6px;
      }

      .profile-detail {
        background: linear-gradient(135deg, var(--accent-color), var(--highlight-color));
        padding: 6px 10px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
        color: var(--dark-color);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(5px);
      }

      .action-buttons button {
        font-size: 0.9rem;
        padding: 8px 12px;
      }

      .action-buttons {
        display: flex;
        gap: 8px;
        margin-top: 12px;
        justify-content: center;
      }

      .like-btn {
        flex: 1;
        background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
        color: white;
        border: none;
        border-radius: 6px;
        padding: 8px;
        font-size: 0.9rem;
        cursor: pointer;
        transition: all 0.3s;
        min-height: 36px;
      }

      .like-btn.liked {
        background: linear-gradient(135deg, var(--heart-color) 0%, #d85a5a 100%);
      }

      .profile-btn {
        flex: 1;
        background-color: var(--light-color);
        color: var(--dark-color);
        border: 1px solid var(--secondary-color);
        border-radius: 6px;
        padding: 8px;
        font-size: 0.9rem;
        cursor: pointer;
        transition: all 0.3s;
        min-height: 36px;
      }

      @media (max-width: 768px) {
        .action-buttons {
          flex-direction: column;
          gap: 8px;
          margin-top: 12px;
          padding: 0 10px;
        }

        .like-btn, .profile-btn {
          padding: 8px;
          font-size: 0.9rem;
          min-height: 32px;
          width: 100%;
          border-radius: 6px;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          transition: all 0.2s ease;
        }

        .like-btn:active, .profile-btn:active {
          transform: scale(0.98);
        }
      }

      .profile-btn:hover {
        background-color: var(--accent-color);
      }

      .match-card {
        display: flex;
        flex-direction: column;
        background: linear-gradient(135deg, #ffffff 0%, #fff6f6 100%);
        border-radius: 15px;
        overflow: hidden;
        margin-bottom: 20px;
        box-shadow: 0 5px 15px rgba(178, 34, 34, 0.12);
        border: 1px solid rgba(255, 202, 176, 0.4);
        position: relative;
        transition: all 0.3s ease-in-out;
        width: 100%;
        max-width: 600px;
        margin-left: auto;
        margin-right: auto;
      }

      @media (max-width: 768px) {
        .match-card {
          margin-bottom: 15px;
          border-radius: 12px;
        }

        .match-info {
          padding: 15px;
        }

        .match-img {
          width: 120px;
          height: 120px;
          margin: 10px;
        }

        .match-title {
          font-size: 1.1em;
        }

        .match-date {
          font-size: 0.9em;
        }

        .match-actions {
          padding: 10px;
          gap: 8px;
        }

        .match-actions button {
          padding: 8px 12px;
          font-size: 0.9em;
        }

        .contact-info {
          padding: 12px;
          font-size: 0.9em;
        }
      }

      .match-info {
        flex: 1;
        padding: 25px;
      }

      .match-actions {
        padding: 20px;
        background: linear-gradient(135deg, #fff6f6 0%, #ffe8e8 100%);
        border-top: 1px solid rgba(255, 202, 176, 0.3);
        display: flex;
        gap: 15px;
        justify-content: center;
      }

      .match-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 40px rgba(178, 34, 34, 0.2);
        border-color: rgba(255, 202, 176, 1);
      }

      .match-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 8px;
        background: linear-gradient(135deg, #ff7e5f 0%, #feb47b 100%);
        opacity: 0.8;
      }

      .match-img {
        width: 200px;
        height: 200px;
        object-fit: cover;
        border-radius: 15px;
        margin: 20px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
      }

      .match-card:hover .match-img {
        transform: scale(1.05);
      }

      .match-info {
        padding: 25px;
        flex: 1;
        font-family: 'Rubik', sans-serif;
      }

      .match-actions {
        display: flex;
        flex-direction: column;
        justify-content: center;
        padding: 25px;
        background: linear-gradient(135deg, #fff6f6 0%, #ffe8e8 100%);
        min-width: 200px;
      }

      .match-date {
        font-size: 15px;
        color: var(--gray-color);
        margin-bottom: 15px;
        font-weight: 500;
      }

      .match-icon {
        font-size: 24px;
        margin-left: 8px;
        color: var(--heart-color);
        animation: pulse 1.5s infinite;
      }

      @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.2); }
        100% { transform: scale(1); }
      }

      .match-title {
        color: var(--heart-color);
        display: flex;
        align-items: center;
        font-size: 1.5em;
        font-weight: 600;
        margin-bottom: 15px;
      }

      .match-badge {
        background: linear-gradient(135deg, #ff7e5f 0%, #feb47b 100%);
        color: white;
        padding: 8px 16px;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.9em;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        margin: 10px 0;
        box-shadow: 0 4px 15px rgba(255, 126, 95, 0.3);
        animation: glow 2s infinite;
      }

      @keyframes glow {
        0% { box-shadow: 0 4px 15px rgba(255, 126, 95, 0.3); }
        50% { box-shadow: 0 4px 25px rgba(255, 126, 95, 0.5); }
        100% { box-shadow: 0 4px 15px rgba(255, 126, 95, 0.3); }
      }

      .contact-info {
        margin-top: 10px;
        padding: 15px;
        background-color: var(--highlight-color);
        border-radius: 8px;
        border-right: 3px solid var(--heart-color);
      }

      .contact-info p {
        margin: 5px 0;
      }

      .event-card {
        display: flex;
        background-color: var(--form-background);
        border-radius: 12px;
        overflow: hidden;
        margin-bottom: 20px;
        box-shadow: 0 5px 15px rgba(178, 34, 34, 0.1);
      }

      .event-img {
        width: 200px;
        height: 150px;
        object-fit: cover;
      }

      .event-info {
        padding: 15px;
        flex: 1;
      }

      .event-actions {
        display: flex;
        flex-direction: column;
        justify-content: center;
        padding: 15px;
        background-color: var(--accent-color);
      }

      .event-date {
        font-weight: bold;
        color: var(--primary-color);
        margin-bottom: 10px;
      }

      .event-participants {
        margin-top: 10px;
        font-size: 14px;
      }

      .tab-container {
        margin-bottom: 30px;
      }

      .tabs {
        display: flex;
        margin-bottom: 20px;
        overflow-x: auto;
        border-bottom: 2px solid var(--accent-color);
      }

      .tab {
        padding: 10px 20px;
        cursor: pointer;
        font-weight: bold;
        color: var(--dark-color);
        background-color: var(--form-background);
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
        margin-left: 5px;
        transition: all 0.3s;
      }

      .tab.active {
        color: white;
        background-color: var(--primary-color);
      }

      .tab-content {
        padding: 20px;
        background-color: var(--form-background);
        border-radius: 0 0 8px 8px;
      }

      .tab-pane {
        display: none;
      }

      .tab-pane.active {
        display: block;
      }

      .profile-container {
        display: grid;
        grid-template-columns: 300px 1fr;
        gap: 40px;
        margin-top: 40px;
        padding: 20px;
        background: linear-gradient(135deg, var(--form-background), var(--highlight-color));
        border-radius: 20px;
        box-shadow: 0 8px 30px rgba(178, 34, 34, 0.15);
      }

      .profile-sidebar {
        background: rgba(255, 255, 255, 0.95);
        padding: 25px;
        border-radius: 16px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(178, 34, 34, 0.1);
        height: fit-content;
      }

      .profile-content {
        background: rgba(255, 255, 255, 0.95);
        padding: 30px;
        border-radius: 16px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(178, 34, 34, 0.1);
      }

      .profile-header {
        text-align: center;
        margin-bottom: 30px;
        padding: 20px;
        background: linear-gradient(135deg, var(--accent-color), var(--highlight-color));
        border-radius: 16px;
        position: relative;
      }

      .profile-avatar {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        object-fit: cover;
        margin: 0 auto 15px;
        border: 5px solid white;
        box-shadow: 0 5px 15px rgba(178, 34, 34, 0.2);
        transition: transform 0.3s ease;
      }

      .profile-avatar:hover {
        transform: scale(1.05);
      }

      .empty-state {
        text-align: center;
        padding: 30px;
        background-color: var(--form-background);
        border-radius: 12px;
        margin: 20px 0;
      }

      .empty-state-icon {
        font-size: 48px;
        color: var(--gray-color);
        margin-bottom: 15px;
      }

      .profile-details-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
      }

      .profile-detail-item {
        display: flex;
        align-items: center;
        background: linear-gradient(135deg, #fff 0%, #f8f9fa 100%);
        padding: 15px;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(178, 34, 34, 0.08);
        transition: all 0.3s ease;
      }

      .profile-detail-item:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 20px rgba(178, 34, 34, 0.12);
      }

      .detail-icon {
        font-size: 24px;
        margin-right: 15px;
        color: var(--primary-color);
      }

      .detail-content {
        flex: 1;
      }

      .detail-label {
        font-size: 0.9em;
        color: var(--gray-color);
        margin-bottom: 5px;
      }

      .detail-value {
        font-size: 1.1em;
        font-weight: 600;
        color: var(--dark-color);
      }

      .readonly-field {
        background-color: var(--accent-color);
        opacity: 0.8;
        cursor: not-allowed;
      }

      .editable-field {
        background-color: var(--input-background);
      }

      .form-hint {
        font-size: 14px;
        color: var(--gray-color);
        margin-top: -10px;
        margin-bottom: 15px;
        font-style: italic;
      }

      .match-badge {
        display: inline-block;
        background: var(--match-gradient);
        color: white;
        padding: 8px 15px;
        border-radius: 20px;
        font-weight: bold;
        margin-right: 10px;
        box-shadow: 0 3px 10px rgba(255, 126, 95, 0.3);
        animation: pulse 1.5s infinite;
      }

      @keyframes pulse {
        0% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.05);
        }
        100% {
          transform: scale(1);
        }
      }

      .match-notification {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: var(--match-background);
        border-radius: 15px;
        padding: 30px;
        text-align: center;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        border: 3px solid #ffcab0;
        max-width: 90%;
        width: 400px;
        animation: fadeIn 0.5s;
      }

      .match-notification h2 {
        color: var(--heart-color);
        margin-top: 0;
      }

      .match-notification .match-emoji {
        font-size: 50px;
        margin: 20px 0;
        display: inline-block;
        animation: bounce 1s infinite alternate;
      }

      .match-notification .button {
        margin-top: 20px;
      }

      .match-notification-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 999;
        animation: fadeIn 0.5s;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
        }
        to {
          opacity: 1;
        }
      }

      @keyframes bounce {
        from {
          transform: translateY(0px);
        }
        to {
          transform: translateY(-10px);
        }
      }

      @media (max-width: 768px) {
        .grid {
          grid-template-columns: repeat(2, 1fr);
          gap: 10px;
          padding: 8px;
        }

        .profile-card {
          margin-bottom: 8px;
        }

        .profile-img-container {
          height: 180px;
        }

        .profile-info {
          padding: 12px;
        }

        .profile-info h3 {
          font-size: 1.1rem;
          margin-bottom: 5px;
        }

        .profile-details {
          gap: 4px;
          margin: 8px 0;
        }

        .profile-detail {
          font-size: 0.8rem;
          padding: 4px 8px;
        }

        .action-buttons {
          gap: 6px;
          margin-top: 8px;
        }

        .like-btn, .profile-btn {
          padding: 8px;
          font-size: 0.9rem;
        }

        .match-card, .event-card {
          flex-direction: column;
          margin: 8px 0;
        }

        .match-img, .event-img {
          width: 100%;
          height: 160px;
        }

        .navbar {
          flex-direction: column;
          padding: 10px;
        }

        .navbar-nav {
          margin-top: 15px;
          width: 100%;
          flex-direction: column;
          gap: 8px;
        }

        .nav-link {
          width: 100%;
          text-align: center;
          padding: 10px;
        }

        .profile-container {
          grid-template-columns: 1fr;
          gap: 20px;
        }

        .profile-sidebar {
          order: 2;
        }

        .profile-content {
          order: 1;
        }

        .profile-action-buttons {
          flex-direction: column;
          gap: 10px;
        }

        .button {
          width: 100%;
          margin: 5px 0;
        }

        .filter-row {
          flex-direction: column;
        }

        .filter-group {
          width: 100%;
        }

        .profile-header {
          padding: 10px;
        }

        .profile-photo-large {
          width: 200px;
          height: 200px;
        }

        input, select, textarea {
          font-size: 16px;
          padding: 12px;
        }
      }
      `;

      // הגדרות multer לאחסון קבצים
      // Using the existing storage and upload configuration from above

      // דף הבית - נתיב ראשי עם העיצוב האדמדם
      // Add email validation endpoint
      app.post("/check-email", express.json(), (req, res) => {
        const { email } = req.body;
        const exists = users.some(u => u.email === email);
        res.json({ exists });
      });

      // נתיב להרשמה ישירה לאירוע
      app.get("/signup-special/:eventId", (req, res) => {
        const eventId = req.params.eventId;
        return res.send(`
      <!DOCTYPE html>
      <html lang="he">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>הכר/י את החצי השני שלך - הרשמה מיוחדת</title>
        <style>
        ${commonStyles}

        .required-note {
          text-align: center;
          margin-bottom: 25px;
          font-size: 14px;
          color: #666;
          padding: 10px;
          background-color: var(--highlight-color);
          border-radius: 8px;
        }

        .required:after {
          content: " *";
          color: var(--heart-color);
          font-weight: bold;
        }

        .profile-image-title {
          text-align: center;
          font-weight: bold;
          margin-bottom: 12px;
          font-size: 18px;
          color: var(--primary-color);
        }

        .file-input-wrapper {
          position: relative;
          margin: 15px auto 30px;
          background-color: var(--highlight-color);
          padding: 25px;
          width: 200px;
          height: 200px;
          border-radius: 50%;
          border: 2px dashed var(--secondary-color);
          text-align: center;
          transition: all 0.3s;
          display: flex;
          align-items: center;
          justify-content: center;
        }

        .file-input-wrapper:hover {
          border-color: var(--primary-color);
          background-color: var(--accent-color);
          transform: translateY(-2px);
        }

        .image-preview {
          margin-top: 15px;
          text-align: center;
          display: none;
        }

        .image-preview img {
          max-width: 100%;
          max-height: 250px;
          border-radius: 12px;
          box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        form {
          max-width: 600px;
          margin: 0 auto;
          background-color: var(--form-background);
          padding: 35px;
          border-radius: 15px;
          box-shadow: 0 8px 25px rgba(178, 34, 34, 0.15);
        }
        </style>
      </head>
      <body>
      <script>
        function previewImage(input) {
          const preview = document.getElementById('imagePreview');
          const previewContainer = document.getElementById('imagePreviewContainer');

          if (input.files && input.files[0]) {
            const reader = new FileReader();

            reader.onload = function(e) {
              preview.src = e.target.result;
              previewContainer.style.display = 'block';
            }

            reader.readAsDataURL(input.files[0]);
          } else {
            previewContainer.style.display = 'none';
          }
        }
      </script>
      </head>
      <body>
        <div class="page-container">
         <h1>הכר/י את החצי השני שלך</h1>
          <p class="site-description">
                  <span class="welcome">ברוכים הבאים!<br><span class="how-it-works" style="font-size: 1.2em; font-weight: bold; color: var(--primary-color);">זה לא עוד אתר הכרויות, בנינו עבורכם שירות הכרויות אונליין ללא צ'אט.
      </span> </span>
            <span class="how-it-works" style="font-size: 1.2em; font-weight: bold; color: var(--primary-color);">איך זה עובד?</span>
            <br>
            <br>
            ממלאים את השאלון, עושים הרשמה, ולאחר מכן תוכלו לצפות בכרטיסי הכרויות מותאמים עבורכם. 
            <br>
            כאשר יש התאמה הדדית (לייק של שני הצדדים) תקבלו את פרטי הקשר אחד של השני!
            <br>
            לא צריך לצ'וטט שעות, ואין אפליקציה להוריד. 

            <br><br>
            <span class="cta">מתחילים ❤</span>
          </p>

          <form action="/signup" method="POST" enctype="multipart/form-data">
            <div class="required-note">שדות המסומנים בכוכבית (*) הם שדות חובה</div>

                  <!-- שדה העלאת תמונה ממורכז -->
            <div class="profile-image-title required">תמונת פרופיל (בחר/י תמונה ברורה כדי שיזהו אותך)</div>
            <div class="file-input-wrapper" onclick="document.getElementById('hiddenFileInput').click();">
              <div style="font-size: 48px; cursor: pointer;">📸</div>
              <input type="file" id="hiddenFileInput" name="profileImage" accept="image/*" onchange="previewImage(this)" required style="display: none;">
            </div>

            <div id="imagePreviewContainer" class="image-preview">
              <img id="imagePreview" src="#" alt="תצוגה מקדימה">
            </div>

            <div id="imagePreviewContainer" class="image-preview">
              <img id="imagePreview" src="#" alt="תצוגה מקדימה">
            </div>

            <label for="firstName" class="required">שם פרטי</label>
            <input type="text" id="firstName" name="firstName" required>

            <label for="lastName" class="required">שם משפחה</label>
            <input type="text" id="lastName" name="lastName" required>

            <label for="gender" class="required">מגדר</label>
            <select id="gender" name="gender" required>
              <option value="male">זכר</option>
              <option value="female">נקבה</option>
            </select>

            <label for="relationshipStatus" class="required">מצב משפחתי</label>
            <select id="relationshipStatus" name="relationshipStatus" required>
              <option value="רווק">רווק/ה</option>
              <option value="גרוש">גרוש/ה</option>
              <option value="אלמן">אלמן/ה</option>
            </select>

        <label for="hasChildren" class="required">ילדים</label>
            <select id="hasChildren" name="hasChildren" required>
               <option value="אין">אין</option>
              <option value="יש">יש</option>
            </select>

            <label for="city" class="required">עיר מגורים</label>
      <select id="city" name="city" required>
        <option value="">בחר/י עיר</option>
        <optgroup label="צפון">
          <option value="אודם">אודם</option>
          <option value="אום אל פחם">אום אל פחם</option>
          <option value="איילת השחר">איילת השחר</option>
          <option value="אלוני הבשן">אלוני הבשן</option>
          <option value="בית שאן">בית שאן</option>
          <option value="בית שערים">בית שערים</option>
          <option value="גבעת אבני">גבעת אבני</option>
          <option value="חדרה">חדרה</option>
          <option value="חיפה">חיפה</option>
          <option value="טבריה">טבריה</option>
          <option value="טירת הכרמל">טירת הכרמל</option>
          <option value="יקנעם">יקנעם</option>
          <option value="יבנאל">יבנאל</option>
          <option value="כפר תבור">כפר תבור</option>
          <option value="כרמיאל">כרמיאל</option>
          <option value="מגדל העמק">מגדל העמק</option>
          <option value="מטולה">מטולה</option>
          <option value="נהריה">נהריה</option>
          <option value="עכו">עכו</option>
          <option value="עפולה">עפולה</option>
          <option value="צפת">צפת</option>
          <option value="קרית ביאליק">קרית ביאליק</option>
          <option value="קרית ים">קרית ים</option>
          <option value="קרית מוצקין">קרית מוצקין</option>
          <option value="קרית שמונה">קרית שמונה</option>
          <option value="קצרין">קצרין</option>
          <option value="ראש פינה">ראש פינה</option>
          <option value="רמת ישי">רמת ישי</option>
          <option value="זכרון יעקב">זכרון יעקב</option>
        </optgroup>

        <optgroup label="מרכז">
          <option value="אור יהודה">אור יהודה</option>
          <option value="אורנית">אורנית</option>
          <option value="אזור">אזור</option>
          <option value="אלעד">אלעד</option>
          <option value="אריאל">אריאל</option>
          <option value="גבעת שמואל">גבעת שמואל</option>
          <option value="גני תקווה">גני תקווה</option>
          <option value="הוד השרון">הוד השרון</option>
          <option value="הרצליה">הרצליה</option>
          <option value="יהוד">יהוד</option>
          <option value="ירושלים">ירושלים</option>
          <option value="כוכב יאיר">כוכב יאיר</option>
          <option value="כפר יונה">כפר יונה</option>
          <option value="כפר סבא">כפר סבא</option>
          <option value="לוד">לוד</option>
          <option value="מודיעין">מודיעין</option>
          <option value="ראש העין">ראש העין</option>
          <option value="רמת גן">רמת גן</option>
          <option value="רמת השרון">רמת השרון</option>
          <option value="רעננה">רעננה</option>
          <option value="שוהם">שוהם</option>
          <option value="תל אביב">תל אביב</option>
        </optgroup>

        <optgroup label="שפלה">
          <option value="אביחיל">אביחיל</option>
          <option value="אבן ספיר">אבן ספיר</option>
          <option value="אחיטוב">אחיטוב</option>
          <option value="אחיסמך">אחיסמך</option>
          <option value="באר יעקב">באר יעקב</option>
          <option value="בארות יצחק">בארות יצחק</option>
          <option value="בית דגן">בית דגן</option>
          <option value="בית שמש">בית שמש</option>
          <option value="בני ברק">בני ברק</option>
          <option value="בני דרור">בני דרור</option>
          <option value="בני ציון">בני ציון</option>
          <option value="בני עטרות">בני עטרות</option>
          <option value="בני עי&quot;ש">בני עי"ש</option>
          <option value="בני ראם">בני ראם</option>
          <option value="בת ים">בת ים</option>
          <option value="בת חפר">בת חפר</option>
          <option value="גאליה">גאליה</option>
          <option value="גבעתיים">גבעתיים</option>
          <option value="גדרה">גדרה</option>
          <option value="גן יבנה">גן יבנה</option>
          <option value="גן שורק">גן שורק</option>
          <option value="יבנה">יבנה</option>
          <option value="נס ציונה">נס ציונה</option>
          <option value="ניר צבי">ניר צבי</option>
          <option value="מזכרת בתיה">מזכרת בתיה</option>
          <option value="רחובות">רחובות</option>
          <option value="ראשון לציון">ראשון לציון</option>
          <option value="רמלה">רמלה</option>
          <option value="קרית מלאכי">קרית מלאכי</option>
          <option value="קרית עקרון">קרית עקרון</option>
        </optgroup>

        <optgroup label="דרום">
          <option value="אופקים">אופקים</option>
          <option value="אשדוד">אשדוד</option>
          <option value="אשקלון">אשקלון</option>
          <option value="אילת">אילת</option>
          <option value="באר שבע">באר שבע</option>
          <option value="דימונה">דימונה</option>
          <option value="ירוחם">ירוחם</option>
          <option value="מצפה רמון">מצפה רמון</option>
          <option value="נתיבות">נתיבות</option>
          <option value="ערד">ערד</option>
          <option value="רהט">רהט</option>
          <option value="שדרות">שדרות</option>
          <option value="קרית גת">קרית גת</option>
        </optgroup>
      </select>





            <label for="dob" class="required">תאריך לידה</label>
            <input type="date" id="dob" name="dob" required>

                  <label for="height" class="required">גובה (סנטימטרים)</label>
            <select id="height" name="height" required>
      <option value="140">140 ס"מ</option>
      <option value="141">141 ס"מ</option>
      <option value="142">142 ס"מ</option>
      <option value="143">143 ס"מ</option>
      <option value="144">144 ס"מ</option>
      <option value="145">145 ס"מ</option>
      <option value="146">146 ס"מ</option>
      <option value="147">147 ס"מ</option>
      <option value="148">148 ס"מ</option>
      <option value="149">149 ס"מ</option>
      <option value="150">150 ס"מ</option>
      <option value="151">151 ס"מ</option>
      <option value="152">152 ס"מ</option>
      <option value="153">153 ס"מ</option>
      <option value="154">154 ס"מ</option>
      <option value="155">155 ס"מ</option>
      <option value="156">156 ס"מ</option>
      <option value="157">157 ס"מ</option>
      <option value="158">158 ס"מ</option>
      <option value="159">159 ס"מ</option>
      <option value="160">160 ס"מ</option>
      <option value="161">161 ס"מ</option>
      <option value="162">162 ס"מ</option>
      <option value="163">163 ס"מ</option>
      <option value="164">164 ס"מ</option>
      <option value="165">165 ס"מ</option>
      <option value="166">166 ס"מ</option>
      <option value="167">167 ס"מ</option>
      <option value="168">168 ס"מ</option>
      <option value="169">169 ס"מ</option>
      <option value="170">170 ס"מ</option>
      <option value="171">171 ס"מ</option>
      <option value="172">172 ס"מ</option>
      <option value="173">173 ס"מ</option>
      <option value="174">174 ס"מ</option>
      <option value="175">175 ס"מ</option>
      <option value="176">176 ס"מ</option>
      <option value="177">177 ס"מ</option>
      <option value="178">178 ס"מ</option>
      <option value="179">179 ס"מ</option>
      <option value="180">180 ס"מ</option>
      <option value="181">181 ס"מ</option>
      <option value="182">182 ס"מ</option>
      <option value="183">183 ס"מ</option>
      <option value="184">184 ס"מ</option>
      <option value="185">185 ס"מ</option>
      <option value="186">186 ס"מ</option>
      <option value="187">187 ס"מ</option>
      <option value="188">188 ס"מ</option>
      <option value="189">189 ס"מ</option>
      <option value="190">190 ס"מ</option>
      <option value="191">191 ס"מ</option>
      <option value="192">192 ס"מ</option>
      <option value="193">193 ס"מ</option>
      <option value="194">194 ס"מ</option>
      <option value="195">195 ס"מ</option>
      <option value="196">196 ס"מ</option>
      <option value="197">197 ס"מ</option>
      <option value="198">198 ס"מ</option>
      <option value="199">199 ס"מ</option>
      <option value="200">200 ס"מ</option>
            </select>

            <label for="religiousLevel" class="required">השקפה</label>
            <select id="religiousLevel" name="religiousLevel" required>
              <option value="דתי/ה">דתי/ה</option>
              <option value="מסורתי/ת">מסורתי/ת</option>
              <option value="חילוני/ה">חילוני/ה</option>
              <option value="בעל/ת תתשובה">בעל/ת תשובה</option>
            </select>

            <label for="aboutMe" class="required">קצת עליי</label>
            <textarea id="aboutMe" name="aboutMe" rows="4" required></textarea>

            <label for="lookingFor">מה אני מחפש/ת בבן/ת הזוג</label>
            <textarea id="lookingFor" name="lookingFor" rows="4"></textarea>

            <h3 class="section-title">פרטי התקשרות</h3>
            <p class="contact-note">פרטי ההתקשרות יוצגו רק למשתמשים עם התאמה הדדית (לייק משני הצדדים)</p>

            <label for="phone" class="required">טלפון (יוצג רק אם יש התאמה)</label>
            <input type="tel" id="phone" name="phone" required>

            <label for="facebook">פייסבוק (יוצג רק אם יש התאמה) - אופציונלי</label>
            <input type="text" id="facebook" name="facebook">

            <label for="instagram">אינסטגרם (יוצג רק אם יש התאמה) - אופציונלי</label>
            <input type="text" id="instagram" name="instagram">

            <label for="email" class="required">אימייל</label>
            <input type="email" id="email" name="email" required onblur="checkEmail(this)">
            <div id="emailError" style="color: var(--primary-color); font-size: 0.9em; margin-top: -10px; margin-bottom: 10px; display: none;">
              האימייל כבר קיים במערכת
            </div>

            <script>
              async function checkEmail(input) {
                const emailError = document.getElementById('emailError');
                const submitButton = document.querySelector('button[type="submit"]');

                if (!input.value) {
                  emailError.style.display = 'none';
                  submitButton.disabled = false;
                  return;
                }

                try {
                  const response = await fetch('/check-email', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ email: input.value })
                  });

                  const data = await response.json();

                  if (data.exists) {
                    emailError.style.display = 'block';
                    submitButton.disabled = true;
                  } else {
                    emailError.style.display = 'none';
                    submitButton.disabled = false;
                  }
                } catch (error) {
                  console.error('Error checking email:', error);
                }
              }
            </script>

            <label for="password" class="required">סיסמה</label>
            <input type="password" id="password" name="password" required>

<div class="terms-wrapper" style="margin-top: 20px; margin-bottom: 20px;">
  <input type="checkbox" id="terms" name="terms" required>
  <label for="terms">
    אני מסכים/ה ל
    <a href="/terms" target="_blank" style="color: var(--primary-color); text-decoration: underline;">
      תנאי השימוש
    </a>
    *
  </label>
</div>

            <button type="submit">❤ הרשמה ומציאת האהבה</button>
          </form>

          <div class="footer">
            <p>כבר יש לך חשבון? <a href="/login">התחבר כאן</a></p>
            <p>&copy; 2025 הכר/י את החצי השני שלך</p>
          </div>
        </div>
      </body>
      </html>
        `);
      });

      app.post("/signup-event/:eventId", upload.single("profileImage"), async (req, res) => {
        try {
          const eventId = req.params.eventId;
          const event = events.find(e => e.id === eventId);

          if (!event) {
            return res.status(404).send("האירוע לא נמצא");
          }

          // יצירת משתמש חדש עם אותה לוגיקה כמו בהרשמה רגילה
          const newUser = {
            id: Date.now().toString(),
            firstName: req.body.firstName,
            lastName: req.body.lastName,
            email: req.body.email,
            password: hashPassword(req.body.password),
            gender: req.body.gender,
            relationshipStatus: req.body.relationshipStatus,
            hasChildren: req.body.hasChildren,
            dob: req.body.dob,
            height: Number(req.body.height),
            aboutMe: req.body.aboutMe,
            lookingFor: req.body.lookingFor,
            religiousLevel: req.body.religiousLevel,
            city: req.body.city,
            phone: req.body.phone,
            facebook: req.body.facebook || "",
            instagram: req.body.instagram || "",
            profileImage: req.file ? `/uploads/${req.file.filename}` : null,
            createdAt: new Date(),
            hasSubscription: false,
            isApproved: true
          };

          // שמירת המשתמש במסד הנתונים
          const client = await pool.connect();
          try {
            await client.query('BEGIN');

            // הכנסת המשתמש לטבלת users
            await client.query(`
              INSERT INTO users (
                id, first_name, last_name, email, password, gender,
                relationship_status, has_children, dob, height,
                about_me, looking_for, religious_level, city,
                phone, facebook, instagram, profile_image,
                has_subscription, is_approved, created_at
              ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21)
            `, [
              newUser.id, newUser.firstName, newUser.lastName, newUser.email,
              newUser.password, newUser.gender, newUser.relationshipStatus,
              newUser.hasChildren, newUser.dob, newUser.height, newUser.aboutMe,
              newUser.lookingFor, newUser.religiousLevel, newUser.city,
              newUser.phone, newUser.facebook, newUser.instagram, newUser.profileImage,
              newUser.hasSubscription, newUser.isApproved, newUser.createdAt
            ]);

            // רישום אוטומטי לאירוע בדאטאבייס
            await client.query(`
              INSERT INTO event_participants (event_id, user_id, status)
              VALUES ($1, $2, 'approved')
              ON CONFLICT (event_id, user_id) DO NOTHING
            `, ["1743962846251", newUser.id]);

            // רישום אוטומטי לאירוע
            const event = events.find((e) => e.id === "1743962846251");
            if (event && !event.participants.includes(newUser.id)) {
              event.participants.push(newUser.id);
              console.log(`משתמש ${newUser.id} נרשם אוטומטית לאירוע ${event.name}`);
            }

            // רישום לאירוע בדאטאבייס ובזיכרון
            await client.query(`
              INSERT INTO event_participants (event_id, user_id, status)
              VALUES ($1, $2, 'approved')
              ON CONFLICT (event_id, user_id) DO NOTHING
            `, ["1743962846251", newUser.id]);

            // עדכון בזיכרון
            const existingEvent = events.find(e => e.id === "1743962846251");
            if (existingEvent && !existingEvent.participants.includes(newUser.id)) {
              existingEvent.participants.push(newUser.id);
              console.log(`משתמש ${newUser.id} נרשם אוטומטית לאירוע ${existingEvent.name}`);
            }

            await client.query('COMMIT');

            // הוספה למערכים בזיכרון
            users.push(newUser);
            event.participants.push(newUser.id);

            // שמירת הנתונים בקובץ
            await saveUsersData();

            // הצגת הודעת הצלחה והפניה לדף הבית
            res.send(`
              <!DOCTYPE html>
              <html lang="he" dir="rtl">
              <head>
                <meta charset="UTF-8">
                <title>נרשמת בהצלחה</title>
                <style>${commonStyles}</style>
              </head>
              <body>
                <div class="success-container" style="text-align: center; max-width: 600px; margin: 100px auto; padding: 30px;">
                  <div style="font-size: 72px; margin-bottom: 20px;">✅</div>
                  <h1>נרשמת בהצלחה!</h1>
                  <p>נרשמת בהצלחה לאירוע ${event.name}</p>
                  <a href="/home?userId=${newUser.id}" class="button">המשך לדף הבית</a>
                </div>
                <script>
                  setTimeout(() => {
                    window.location.href = "/home?userId=${newUser.id}";
                  }, 3000);
                </script>
              </body>
              </html>
            `);

          } catch (error) {
            await client.query('ROLLBACK');
            throw error;
          } finally {
            client.release();
          }

        } catch (error) {
          console.error("שגיאה בהרשמה:", error);
          res.status(500).send("שגיאה בתהליך ההרשמה");
        }
      });

      // נתיב לדף תנאי שימוש
app.get("/terms", (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="he" dir="rtl">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>תנאי שימוש - הכר/י את החצי השני שלך</title>
      <style>${commonStyles}</style>
    </head>
    <body>
      <div class="navbar">
        <a href="/" class="navbar-brand">הכר/י את החצי השני שלך</a>
      </div>

      <div class="page-container">
        <h1>תנאי שימוש</h1>
        <div class="card" style="margin-bottom: 20px;">
        <p><strong>עודכן לאחרונה בתאריך:</strong> [16/04/2025]</p>
        </p>הגלישה באתר האינטרנט "הכר את החצי השני שלך", אשר פועל תחת הדומיין [Www.shiduhay.replit.app] (להלן: "הכר את החצי השני שלך"), והשימוש בו, כפופים למכלול תנאי השימוש המפורטים להלן (להלן: "תנאי השימוש"). שימושך באתר, לרבות כל פעולה שתבוצע באמצעותו, מהווה אישור והסכמה בלתי חוזרת ומפורשת מצידך כי קראת, הבנת והסכמת להיות כפוף לכל תנאי השימוש, על כלל סעיפיהם, הוראותיהם והגבלותיהם.</p>
        
        <div class="card" style="margin-bottom: 20px;">
  <h2>1. כללי</h2>
  <p>1.1 האתר מהווה פלטפורמה דיגיטלית שנועדה לאפשר למשתמשים בגירים, מעל גיל 18 בלבד, לפרסם פרופיל אישי לשם היכרות רומנטית עם משתמשים אחרים.</p>
  <p>1.2 האתר אינו מהווה יועץ זוגיות, ואינו אחראי להצלחתם או כשלונם של קשרים אשר ינבעו משימוש בשירותיו.</p>
  <p>1.3 השימוש באתר אסור על קטינים, אנשים אשר נפסלו משפטית, או מי שמנועים מלהשתמש באינטרנט בהתאם לדין החל במדינת מושבם.</p>
</div>

<div class="card" style="margin-bottom: 20px;">
  <h2>2. מהות השירות</h2>
  <p>2.1 כל משתמש אשר יירשם לאתר יתבקש להזין מידע אישי מסוים לרבות (אך לא רק): שם פרטי, גיל, מין, אזור מגורים, תמונה ו/או תמונות, ופרטי קשר לבחירתו, כגון מספר טלפון או קישורים לרשתות חברתיות.</p>
  <p>2.2 למשתמש תתאפשר האפשרות לצפות בפרופילים של משתמשים אחרים ולסמן אותם בלייק (כלומר, הבעת עניין). ככל ששני משתמשים מביעים לייק הדדי, תתאפשר גישה הדדית לפרטי הקשר, כפי שנמסרו על-ידי המשתמשים.</p>
  <p>2.3 האתר אינו כולל שירותי הודעות פנימיות (צ'אט), והמשתמשים נדרשים ליצור קשר ישיר מחוץ לפלטפורמה, על אחריותם הבלעדית.</p>
</div>

<div class="card" style="margin-bottom: 20px;">
  <h2>3. מנויים בתשלום</h2>
  <p>3.1 האתר מציע שירותים נוספים למשתמשים אשר ירכשו מנוי בתשלום, לרבות (אך לא מוגבל ל): צפייה ברשימת התאמות שהתקבלו, צפייה ברשימת פרופילים אשר צפו בפרופילך האישי, וגישה לפיצ'רים אחרים.</p>
  <p>3.2 תנאי התשלום, לרבות תקופת המנוי, עלותו, חידוש אוטומטי או ביטול – יפורטו בעמוד הרכישה ויהוו חלק בלתי נפרד מתנאים אלה.</p>
  <p>3.3 כל עסקת מנוי היא סופית, בכפוף להוראות חוק הגנת הצרכן, ככל שהן חלות.</p>
</div>

<div class="card" style="margin-bottom: 20px;">
  <h2>4. אחריות המשתמש והגבלות שימוש</h2>
  <p>4.1 המשתמש מצהיר כי כל פרטיו נכונים, מדויקים ואינם מהווים הטעיה. חל איסור מוחלט להתחזות, להשתמש בתמונות או זהות שאינן שלך, או לפרסם תכנים פוגעניים, אלימים, גזעניים, מיניים באופן לא הולם או פוגעים בפרטיות.</p>
  <p>4.2 האתר שומר לעצמו את הזכות להסיר כל תוכן ו/או לחסום כל משתמש לפי שיקול דעתו הבלעדי, וללא צורך בהודעה מוקדמת או בהנמקה.</p>
  <p>4.3 המשתמש מסכים בזאת כי כל קשר אשר ייווצר בינו לבין משתמשים אחרים לאחר חשיפת פרטי הקשר, נעשה באחריותו המלאה בלבד, ללא כל אחריות או חבות של מפעילי האתר.</p>
</div>

<div class="card" style="margin-bottom: 20px;">
  <h2>5. הגבלת אחריות</h2>
  <p>5.1 מובהר בזאת כי האתר, לרבות בעליו, מנהליו, עובדיו וכל גורם הפועל מטעמו, אינם אחראים לכל נזק, ישיר או עקיף, שייגרם כתוצאה מהשימוש באתר, לרבות נזקים אישיים, נפשיים, כספיים, או אחרים.</p>
  <p>5.2 השירות ניתן "כפי שהוא" (As Is) וללא כל אחריות מכל סוג שהוא, מפורשת או משתמעת, לרבות התאמה למטרה מסוימת.</p>
</div>

<div class="card" style="margin-bottom: 20px;">
  <h2>6. קניין רוחני</h2>
  <p>6.1 מלוא זכויות היוצרים, סימני המסחר, העיצובים, והקוד הגלום באתר – שייכים לבעל האתר בלבד.</p>
  <p>6.2 אין לעשות כל שימוש מסחרי או אחר בתכני האתר או בתמונות/פרופילים של משתמשים ללא אישור מראש ובכתב.</p>
</div>

<div class="card" style="margin-bottom: 20px;">
  <h2>7. שינויים</h2>
  <p>7.1 הנהלת האתר רשאית לעדכן ו/או לשנות את תנאי השימוש בכל עת, לפי שיקול דעתה הבלעדי. המשך שימושך באתר לאחר ביצוע שינוי כאמור מהווה הסכמה מחודשת לתנאים.</p>
</div>

<div class="card" style="margin-bottom: 20px;">
  <h2>מדיניות פרטיות – "הכר את החצי השני שלך"</h2>
  <p><strong>עודכן לאחרונה בתאריך:</strong> [16/04/2025]</p>
  <p>מדיניות פרטיות זו נועדה להסביר כיצד נאסף מידע אישי באתר "הכר את החצי השני שלך", כיצד הוא נשמר, משמש ומוגן. השימוש באתר מהווה אישור מצידך לכך שקראת, הבנת והסכמת למדיניות זו.</p>
  <h3>1. סוגי מידע הנאסף</h3>
  <p>1.1 בעת השימוש באתר אנו עשויים לאסוף ממך את המידע הבא:</p>
  <ul>
    <li>מידע אישי שאתה מזין בפרופיל: שם, גיל, מגדר, עיר מגורים, תחומי עניין, טלפון, קישורים לרשתות חברתיות.</li>
    <li>תמונות שתעלה לאתר.</li>
    <li>נתוני פעילות באתר: פרופילים שצפית בהם, לייקים, זמן חיבור, וכדומה.</li>
    <li>מידע טכני: כתובת IP, דפדפן, מכשיר, מיקום גיאוגרפי משוער.</li>
  </ul>
  <h3>2. אופן השימוש במידע</h3>
  <p>2.1 המידע נאסף לצורך:</p>
  <ul>
    <li>תפעול תקין של האתר.</li>
    <li>יצירת התאמות בין משתמשים.</li>
    <li>חשיפת פרטי קשר במקרים של התאמה הדדית בלבד.</li>
    <li>ניתוח סטטיסטי, שיפור השירות, מניעת הונאות ושמירה על אבטחה.</li>
  </ul>
  <p>2.2 מידע אישי לא יימסר לצד שלישי שאינו מספק שירות ישיר לאתר, אלא אם נידרש לכך על פי חוק או צו שיפוטי.</p>
  <h3>3. אבטחת מידע</h3>
  <p>3.1 הנהלת האתר עושה מאמצים סבירים לפי המקובל בתעשייה על מנת להגן על המידע האישי הנאסף באתר. עם זאת, אין באפשרותנו להבטיח הגנה מוחלטת מפני חדירה, פריצה, או גישה לא מורשית.</p>
  <h3>4. זכויות המשתמש</h3>
  <p>4.1 כל משתמש זכאי לעיין, לעדכן או למחוק את המידע האישי שלו באמצעות ממשק ניהול הפרופיל או על ידי פנייה אלינו.</p>
  <p>4.2 פנייה לצורך הסרת מידע או פרופיל תטופל תוך פרק זמן סביר.</p>
  <h3>5. Cookies וטכנולוגיות דומות</h3>
  <p>5.1 האתר עושה שימוש בקובצי Cookies וטכנולוגיות דומות לצורך זיהוי, שיפור חוויית המשתמש, ניתוח תעבורת גולשים, ושמירה על העדפות.</p>
  <p>5.2 באפשרותך לחסום קבצים אלה דרך הגדרות הדפדפן שלך, אולם ייתכן והדבר ישפיע על חוויית השימוש.</p>
  <h3>6. יצירת קשר</h3>
  <p>לשאלות או פניות בנושא מדיניות הפרטיות, ניתן לפנות אלינו בכתובת: [shiduhhay@gmail.com]</p>
</div>
<button onclick="history.back()" class="button" style="margin: 20px 0;">« חזור לדף הקודם</button>

      <div class="footer">
        <p>&copy; 2025 הכר/י את החצי השני שלך</p>
      </div>
    </body>
    </html>
  `);
});

app.get("/", (req, res) => {
        res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
        res.setHeader("Pragma", "no-cache");
        res.setHeader("Expires", "0");

        res.send(`
      <!DOCTYPE html>
      <html lang="he">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>הכר/י את החצי השני שלך - הרשמה</title>
        <style>
        ${commonStyles}

          <h1>הרשמה לאתר הכרויות</h1>

          <form action="/signup" method="POST">
          function toggleMenu() {
            const mobileNav = document.querySelector('.mobile-nav');
            const hamburgerMenu = document.querySelector('.hamburger-menu');
            mobileNav.classList.toggle('active');
            hamburgerMenu.classList.toggle('active');
          }

          document.addEventListener('click', (e) => {
            const mobileNav = document.querySelector('.mobile-nav');
            const hamburgerMenu = document.querySelector('.hamburger-menu');
            if (!mobileNav.contains(e.target) && !hamburgerMenu.contains(e.target)) {
              mobileNav.classList.remove('active');
              hamburgerMenu.classList.remove('active');
            }
          });
        </script>

        <h1>הרשמה לאתר הכרויות</h1>

        <form action="/signup" method="POST">
          ${commonStyles}

          .required-note {
            text-align: center;
            margin-bottom: 25px;
            font-size: 14px;
            color: #666;
            padding: 10px;
            background-color: var(--highlight-color);
            border-radius: 8px;
          }

          .required:after {
            content: " *";
            color: var(--heart-color);
            font-weight: bold;
          }

          .profile-image-title {
            text-align: center;
            font-weight: bold;
            margin-bottom: 12px;
            font-size: 18px;
            color: var(--primary-color);
          }

          .file-input-wrapper {
            position: relative;
            margin: 15px auto 30px;
            background-color: var(--highlight-color);
            padding: 25px;
            width: 200px;
            height: 200px;
            border-radius: 50%;
            border: 2px dashed var(--secondary-color);
            text-align: center;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
          }

          .file-input-wrapper:hover {
            border-color: var(--primary-color);
            background-color: var(--accent-color);
            transform: translateY(-2px);
          }

          .file-input-wrapper input {
            display: inline-block;
            width: auto;
          }

          .image-preview {
            margin-top: 15px;
            text-align: center;
            display: none;
          }

          .image-preview img {
            max-width: 100%;
            max-height: 250px;
            border-radius: 12px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
          }

          .contact-note {
            font-size: 14px;
            color: #888;
            margin-top: 8px;
            font-style: italic;
          }

          .section-title {
            margin-top: 35px;
            padding-top: 20px;
            border-top: 1px solid #f0e6d2;
            color: var(--primary-color);
            font-size: 20px;
          }

          .events-section {
            background: linear-gradient(120deg, var(--accent-color) 0%, var(--form-background) 100%);
            border-radius: 12px;
            padding: 25px;
            margin-top: 30px;
            text-align: center;
            border-left: 4px solid var(--primary-color);
            box-shadow: 0 5px 15px rgba(178, 34, 34, 0.1);
          }

          .events-title {
            color: var(--primary-color);
            margin-bottom: 15px;
            font-size: 20px;
          }

          .event-date {
            color: var(--secondary-color);
            font-weight: bold;
            margin: 10px 0;
            font-size: 18px;
          }

          .highlight {
            background-color: var(--highlight-color);
            padding: 8px 12px;
            border-radius: 8px;
            display: inline-block;
            font-weight: bold;
            box-shadow: 0 3px 6px rgba(178, 34, 34, 0.1);
          }

          form { 
            max-width: 600px; 
            margin: 0 auto;
            background-color: var(--form-background);
            padding: 35px;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(178, 34, 34, 0.15);
          }
        </style>

        <script>
          function previewImage(input) {
            const preview = document.getElementById('imagePreview');
            const previewContainer = document.getElementById('imagePreviewContainer');

            if (input.files && input.files[0]) {
              const reader = new FileReader();

              reader.onload = function(e) {
                preview.src = e.target.result;
                previewContainer.style.display = 'block';
              }

              reader.readAsDataURL(input.files[0]);
            } else {
              previewContainer.style.display = 'none';
            }
          }
      </script>
      </head>
      <body>
        <div class="page-container">
         <h1>הכר/י את החצי השני שלך</h1>
          <p class="site-description">
                  <span class="welcome">ברוכים הבאים!<br><span class="how-it-works" style="font-size: 1.2em; font-weight: bold; color: var(--primary-color);">זה לא עוד אתר הכרויות, בנינו עבורכם שירות הכרויות אונליין ללא צ'אט.
      </span> </span>
            <span class="how-it-works" style="font-size: 1.2em; font-weight: bold; color: var(--primary-color);">איך זה עובד?</span>
            <br>
            <br>
            ממלאים את השאלון, עושים הרשמה, ולאחר מכן תוכלו לצפות בכרטיסי הכרויות מותאמים עבורכם. 
            <br>
            כאשר יש התאמה הדדית (לייק של שני הצדדים) תקבלו את פרטי הקשר אחד של השני!
            <br>
            לא צריך לצ'וטט שעות, ואין אפליקציה להוריד. 

            <br><br>
            <span class="cta">מתחילים ❤</span>
          </p>

          <form action="/signup" method="POST" enctype="multipart/form-data">
            <div class="required-note">שדות המסומנים בכוכבית (*) הם שדות חובה</div>

                  <!-- שדה העלאת תמונה ממורכז -->
            <div class="profile-image-title required">תמונת פרופיל (בחר/י תמונה ברורה כדי שיזהו אותך)</div>
            <div class="file-input-wrapper" onclick="document.getElementById('hiddenFileInput').click();">
              <div style="font-size: 48px; cursor: pointer;">📸</div>
              <input type="file" id="hiddenFileInput" name="profileImage" accept="image/*" onchange="previewImage(this)" required style="display: none;">
            </div>

            <div id="imagePreviewContainer" class="image-preview">
              <img id="imagePreview" src="#" alt="תצוגה מקדימה">
            </div>

            <div id="imagePreviewContainer" class="image-preview">
              <img id="imagePreview" src="#" alt="תצוגה מקדימה">
            </div>

            <label for="firstName" class="required">שם פרטי</label>
            <input type="text" id="firstName" name="firstName" required>

            <label for="lastName" class="required">שם משפחה</label>
            <input type="text" id="lastName" name="lastName" required>

            <label for="gender" class="required">מגדר</label>
            <select id="gender" name="gender" required>
              <option value="male">זכר</option>
              <option value="female">נקבה</option>
            </select>

            <label for="relationshipStatus" class="required">מצב משפחתי</label>
            <select id="relationshipStatus" name="relationshipStatus" required>
              <option value="רווק">רווק/ה</option>
              <option value="גרוש">גרוש/ה</option>
              <option value="אלמן">אלמן/ה</option>
            </select>

        <label for="hasChildren" class="required">ילדים</label>
            <select id="hasChildren" name="hasChildren" required>
               <option value="אין">אין</option>
              <option value="יש">יש</option>
            </select>

            <label for="city" class="required">עיר מגורים</label>
      <select id="city" name="city" required>
        <option value="">בחר/י עיר</option>
        <optgroup label="צפון">
          <option value="אודם">אודם</option>
          <option value="אום אל פחם">אום אל פחם</option>
          <option value="איילת השחר">איילת השחר</option>
          <option value="אלוני הבשן">אלוני הבשן</option>
          <option value="בית שאן">בית שאן</option>
          <option value="בית שערים">בית שערים</option>
          <option value="גבעת אבני">גבעת אבני</option>
          <option value="חדרה">חדרה</option>
          <option value="חיפה">חיפה</option>
          <option value="טבריה">טבריה</option>
          <option value="טירת הכרמל">טירת הכרמל</option>
          <option value="יקנעם">יקנעם</option>
          <option value="יבנאל">יבנאל</option>
          <option value="כפר תבור">כפר תבור</option>
          <option value="כרמיאל">כרמיאל</option>
          <option value="מגדל העמק">מגדל העמק</option>
          <option value="מטולה">מטולה</option>
          <option value="נהריה">נהריה</option>
          <option value="עכו">עכו</option>
          <option value="עפולה">עפולה</option>
          <option value="צפת">צפת</option>
          <option value="קרית ביאליק">קרית ביאליק</option>
          <option value="קרית ים">קרית ים</option>
          <option value="קרית מוצקין">קרית מוצקין</option>
          <option value="קרית שמונה">קרית שמונה</option>
          <option value="קצרין">קצרין</option>
          <option value="ראש פינה">ראש פינה</option>
          <option value="רמת ישי">רמת ישי</option>
          <option value="זכרון יעקב">זכרון יעקב</option>
        </optgroup>

        <optgroup label="מרכז">
          <option value="אור יהודה">אור יהודה</option>
          <option value="אורנית">אורנית</option>
          <option value="אזור">אזור</option>
          <option value="אלעד">אלעד</option>
          <option value="אריאל">אריאל</option>
          <option value="גבעת שמואל">גבעת שמואל</option>
          <option value="גני תקווה">גני תקווה</option>
          <option value="הוד השרון">הוד השרון</option>
          <option value="הרצליה">הרצליה</option>
          <option value="יהוד">יהוד</option>
          <option value="ירושלים">ירושלים</option>
          <option value="כוכב יאיר">כוכב יאיר</option>
          <option value="כפר יונה">כפר יונה</option>
          <option value="כפר סבא">כפר סבא</option>
          <option value="לוד">לוד</option>
          <option value="מודיעין">מודיעין</option>
          <option value="ראש העין">ראש העין</option>
          <option value="רמת גן">רמת גן</option>
          <option value="רמת השרון">רמת השרון</option>
          <option value="רעננה">רעננה</option>
          <option value="שוהם">שוהם</option>
          <option value="תל אביב">תל אביב</option>
        </optgroup>

        <optgroup label="שפלה">
          <option value="אביחיל">אביחיל</option>
          <option value="אבן ספיר">אבן ספיר</option>
          <option value="אחיטוב">אחיטוב</option>
          <option value="אחיסמך">אחיסמך</option>
          <option value="באר יעקב">באר יעקב</option>
          <option value="בארות יצחק">בארות יצחק</option>
          <option value="בית דגן">בית דגן</option>
          <option value="בית שמש">בית שמש</option>
          <option value="בני ברק">בני ברק</option>
          <option value="בני דרור">בני דרור</option>
          <option value="בני ציון">בני ציון</option>
          <option value="בני עטרות">בני עטרות</option>
          <option value="בני עי&quot;ש">בני עי"ש</option>
          <option value="בני ראם">בני ראם</option>
          <option value="בת ים">בת ים</option>
          <option value="בת חפר">בת חפר</option>
          <option value="גאליה">גאליה</option>
          <option value="גבעתיים">גבעתיים</option>
          <option value="גדרה">גדרה</option>
          <option value="גן יבנה">גן יבנה</option>
          <option value="גן שורק">גן שורק</option>
          <option value="יבנה">יבנה</option>
          <option value="נס ציונה">נס ציונה</option>
          <option value="ניר צבי">ניר צבי</option>
          <option value="מזכרת בתיה">מזכרת בתיה</option>
          <option value="רחובות">רחובות</option>
          <option value="ראשון לציון">ראשון לציון</option>
          <option value="רמלה">רמלה</option>
          <option value="קרית מלאכי">קרית מלאכי</option>
          <option value="קרית עקרון">קרית עקרון</option>
        </optgroup>

        <optgroup label="דרום">
          <option value="אופקים">אופקים</option>
          <option value="אשדוד">אשדוד</option>
          <option value="אשקלון">אשקלון</option>
          <option value="אילת">אילת</option>
          <option value="באר שבע">באר שבע</option>
          <option value="דימונה">דימונה</option>
          <option value="ירוחם">ירוחם</option>
          <option value="מצפה רמון">מצפה רמון</option>
          <option value="נתיבות">נתיבות</option>
          <option value="ערד">ערד</option>
          <option value="רהט">רהט</option>
          <option value="שדרות">שדרות</option>
          <option value="קרית גת">קרית גת</option>
        </optgroup>
      </select>





            <label for="dob" class="required">תאריך לידה</label>
            <input type="date" id="dob" name="dob" required>

                  <label for="height" class="required">גובה (סנטימטרים)</label>
            <select id="height" name="height" required>
      <option value="140">140 ס"מ</option>
      <option value="141">141 ס"מ</option>
      <option value="142">142 ס"מ</option>
      <option value="143">143 ס"מ</option>
      <option value="144">144 ס"מ</option>
      <option value="145">145 ס"מ</option>
      <option value="146">146 ס"מ</option>
      <option value="147">147 ס"מ</option>
      <option value="148">148 ס"מ</option>
      <option value="149">149 ס"מ</option>
      <option value="150">150 ס"מ</option>
      <option value="151">151 ס"מ</option>
      <option value="152">152 ס"מ</option>
      <option value="153">153 ס"מ</option>
      <option value="154">154 ס"מ</option>
      <option value="155">155 ס"מ</option>
      <option value="156">156 ס"מ</option>
      <option value="157">157 ס"מ</option>
      <option value="158">158 ס"מ</option>
      <option value="159">159 ס"מ</option>
      <option value="160">160 ס"מ</option>
      <option value="161">161 ס"מ</option>
      <option value="162">162 ס"מ</option>
      <option value="163">163 ס"מ</option>
      <option value="164">164 ס"מ</option>
      <option value="165">165 ס"מ</option>
      <option value="166">166 ס"מ</option>
      <option value="167">167 ס"מ</option>
      <option value="168">168 ס"מ</option>
      <option value="169">169 ס"מ</option>
      <option value="170">170 ס"מ</option>
      <option value="171">171 ס"מ</option>
      <option value="172">172 ס"מ</option>
      <option value="173">173 ס"מ</option>
      <option value="174">174 ס"מ</option>
      <option value="175">175 ס"מ</option>
      <option value="176">176 ס"מ</option>
      <option value="177">177 ס"מ</option>
      <option value="178">178 ס"מ</option>
      <option value="179">179 ס"מ</option>
      <option value="180">180 ס"מ</option>
      <option value="181">181 ס"מ</option>
      <option value="182">182 ס"מ</option>
      <option value="183">183 ס"מ</option>
      <option value="184">184 ס"מ</option>
      <option value="185">185 ס"מ</option>
      <option value="186">186 ס"מ</option>
      <option value="187">187 ס"מ</option>
      <option value="188">188 ס"מ</option>
      <option value="189">189 ס"מ</option>
      <option value="190">190 ס"מ</option>
      <option value="191">191 ס"מ</option>
      <option value="192">192 ס"מ</option>
      <option value="193">193 ס"מ</option>
      <option value="194">194 ס"מ</option>
      <option value="195">195 ס"מ</option>
      <option value="196">196 ס"מ</option>
      <option value="197">197 ס"מ</option>
      <option value="198">198 ס"מ</option>
      <option value="199">199 ס"מ</option>
      <option value="200">200 ס"מ</option>
            </select>

            <label for="religiousLevel" class="required">השקפה</label>
            <select id="religiousLevel" name="religiousLevel" required>
              <option value="דתי/ה">דתי/ה</option>
              <option value="מסורתי/ת">מסורתי/ת</option>
              <option value="חילוני/ה">חילוני/ה</option>
              <option value="בעל/ת תתשובה">בעל/ת תשובה</option>
            </select>

            <label for="aboutMe" class="required">קצת עליי</label>
            <textarea id="aboutMe" name="aboutMe" rows="4" required></textarea>

            <label for="lookingFor">מה אני מחפש/ת בבן/ת הזוג</label>
            <textarea id="lookingFor" name="lookingFor" rows="4"></textarea>

            <h3 class="section-title">פרטי התקשרות</h3>
            <p class="contact-note">פרטי ההתקשרות יוצגו רק למשתמשים עם התאמה הדדית (לייק משני הצדדים)</p>

            <label for="phone" class="required">טלפון (יוצג רק אם יש התאמה)</label>
            <input type="tel" id="phone" name="phone" required>

            <label for="facebook">פייסבוק (יוצג רק אם יש התאמה) - אופציונלי</label>
            <input type="text" id="facebook" name="facebook">

            <label for="instagram">אינסטגרם (יוצג רק אם יש התאמה) - אופציונלי</label>
            <input type="text" id="instagram" name="instagram">

            <label for="email" class="required">אימייל</label>
            <input type="email" id="email" name="email" required onblur="checkEmail(this)">
            <div id="emailError" style="color: var(--primary-color); font-size: 0.9em; margin-top: -10px; margin-bottom: 10px; display: none;">
              האימייל כבר קיים במערכת
            </div>

            <script>
              async function checkEmail(input) {
                const emailError = document.getElementById('emailError');
                const submitButton = document.querySelector('button[type="submit"]');

                if (!input.value) {
                  emailError.style.display = 'none';
                  submitButton.disabled = false;
                  return;
                }

                try {
                  const response = await fetch('/check-email', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ email: input.value })
                  });

                  const data = await response.json();

                  if (data.exists) {
                    emailError.style.display = 'block';
                    submitButton.disabled = true;
                  } else {
                    emailError.style.display = 'none';
                    submitButton.disabled = false;
                  }
                } catch (error) {
                  console.error('Error checking email:', error);
                }
              }
            </script>

            <label for="password" class="required">סיסמה</label>
<input type="password" id="password" name="password" required>

  <div class="terms-wrapper" style="margin-top: 20px; margin-bottom: 20px; display: flex; justify-content: flex-end; align-items: center;">
    <input type="checkbox" id="terms" name="terms" required style="margin-right: 5px;">
    <label for="terms" style="margin: 0;">
      קראתי ואני מסכים/ה ל
      <a href="/terms" target="_blank" style="color: var(--primary-color); text-decoration: underline;">
        תנאי השימוש
      </a>
    </label>
  </div>

  <button type="submit">❤ הרשמה ומציאת האהבה</button>
</form>

<script>
  document.getElementById('signup-form').addEventListener('submit', function(event) {
    const termsCheckbox = document.getElementById('terms');
    if (!termsCheckbox.checked) {
      event.preventDefault(); // מונע את שליחת הטופס
      alert('יש לאשר את תנאי השימוש כדי להמשיך');
    }
  });
</script>





          <div class="footer">
            <p>כבר יש לך חשבון? <a href="/login">התחבר כאן</a></p>
            <p>&copy; 2025 הכר/י את החצי השני שלך</p>
          </div>
           <p>
        </div>
      </body>
      </html>
        `);
      });
      // דף התחברות עם עיצוב אדמדם
      // פונקציה להוספת הודעת מערכת
      async function addSystemNotification(userId, type, title, content) {
        const client = await pool.connect();
        try {
          const notificationId = Date.now().toString();
          const date = new Date();

          // Save notification to database
          await client.query(`
            INSERT INTO notifications (id, user_id, type, title, content, created_at, is_read)
            VALUES ($1, $2, $3, $4, $5, $6, $7)
          `, [notificationId, userId, type, title, content, date, false]);

          // Save to memory array for immediate access
          const notification = {
            id: notificationId,
            userId,
            type,
            title,
            content,
            date,
            isRead: false
          };

          systemNotifications.push(notification);
          await client.query('COMMIT');

          return notification;
        } catch (error) {
          await client.query('ROLLBACK');
          console.error('שגיאה בשמירת התראה:', error);
          throw error;
        } finally {
          client.release();
        }
      }

      // Load notifications from database on startup
      async function loadNotificationsFromDB() {
        const client = await pool.connect();
        try {
          const result = await client.query(`
            SELECT * FROM notifications 
            ORDER BY created_at DESC
          `);

          systemNotifications.length = 0; // Clear existing notifications
          systemNotifications.push(...result.rows.map(row => ({
            id: row.id,
            userId: row.user_id,
            type: row.type,
            title: row.title,
            content: row.content,
            date: row.created_at,
            isRead: row.is_read
          })));

          console.log(`✅ Loaded ${systemNotifications.length} notifications from database`);
        } catch (error) {
          console.error('שגיאה בטעינת התראות:', error);
        } finally {
          client.release();
        }
      }

      // Call this after database initialization
      loadNotificationsFromDB();

      // פונקציה להוספת התראה על התאמה חדשה
      function addMatchNotification(userId, matchedUserId) {
        const matchedUser = users.find((u) => u.id === matchedUserId);
        if (matchedUser) {
          addSystemNotification(
            userId,
            "match",
            "התאמה חדשה! ❤️",
            `יש לך התאמה חדשה עם ${matchedUser.firstName} ${matchedUser.lastName.charAt(0)}.`,
          );
        }
      }

      // פונקציה להוספת התראה על אירוע חדש
      function addEventNotification(userId, eventId) {
        const event = events.find((e) => e.id === eventId);
        if (event) {
          addSystemNotification(
            userId,
            "event",
            "אירוע חדש! 🎉",
            `נוסף אירוע חדש: ${event.name}`,
          );
        }
      }

      // דף הודעות מערכת
      // נתיב למחיקת כל הצפיות
      app.post("/delete-all-views", async (req, res) => {
        const client = await pool.connect();
        try {
          await client.query('BEGIN');

          // Delete all views from database
          const result = await client.query('DELETE FROM views');

          // Clear views array in memory
          views.length = 0;

          await client.query('COMMIT');
          console.log(`✅ נמחקו ${result.rowCount} צפיות מהדאטאבייס`);

          // Save the updated state
          await saveUsersData();

          res.json({ 
            success: true, 
            message: `${result.rowCount} צפיות נמחקו בהצלחה`,
            deletedCount: result.rowCount 
          });

        } catch (error) {
          await client.query('ROLLBACK');
          console.error("❌ שגיאה במחיקת צפיות:", error);
          res.status(500).json({ 
            success: false, 
            message: "שגיאה במחיקת הצפיות: " + error.message 
          });
        } finally {
          client.release();
        }
      });

      app.get("/notifications", async (req, res) => {
        const userId = req.query.userId;
        if (!userId) {
          return res.redirect("/login");
        }

        // סימון כל ההתראות כנקראו בדאטאבייס ובזיכרון
        const client = await pool.connect();
        try {
          await client.query('BEGIN');

          // עדכון בדאטאבייס
          await client.query(`
            UPDATE notifications 
            SET is_read = true 
            WHERE user_id = $1 AND is_read = false
          `, [userId]);

          // עדכון במערך בזיכרון
          systemNotifications.forEach((notification) => {
            if (notification.userId === userId) {
              notification.isRead = true;
            }
          });

          await client.query('COMMIT');
          await saveUsersData();
        } catch (error) {
          await client.query('ROLLBACK');
          console.error('שגיאה בעדכון התראות:', error);
        } finally {
          client.release();
        }

        const currentUser = users.find((u) => u.id === userId);
        if (!currentUser) {
          return res.redirect("/login");
        }

        // קבל את כל ההודעות של המשתמש
        const userNotifications = systemNotifications
          .filter((n) => n.userId === userId)
          .sort((a, b) => b.date - a.date);

        res.send(`
            <!DOCTYPE html>
            <html lang="he" dir="rtl">
            <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>הודעות מערכת - הכר/י את החצי השני שלך</title>
              <style>
                ${commonStyles}

                .notification-card {
                  background-color: var(--form-background);
                  padding: 20px;
                  border-radius: 12px;
                  margin-bottom: 20px;
                  box-shadow: 0 5px 15px rgba(178, 34, 34, 0.1);
                  border-right: 4px solid var(--primary-color);
                }

                .notification-title {
                  font-size: 1.2em;
                  font-weight: bold;
                  margin-bottom: 10px;
                  color: var(--primary-color);
                }

                .notification-date {
                  color: var(--gray-color);
                  font-size: 0.9em;
                  margin-bottom: 10px;
                }

                .notification-content {
                  line-height: 1.6;
                }

                .notification-type {
                  display: inline-block;
                  padding: 5px 10px;
                  border-radius: 15px;
                  font-size: 0.9em;
                  margin-bottom: 10px;
                  font-weight: bold;
                }

                .type-match {
                  background-color: var(--heart-color);
                  color: white;
                }

                .type-event {
                  background-color: var(--primary-color);
                  color: white;
                }

                .type-system {
                  background-color: var(--gray-color);
                  color: white;
                }
              </style>
            </head>
            <body>
              <div class="hamburger-menu">
                <div class="hamburger-icon">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
                <a href="/home?userId=${userId}" class="navbar-brand">הכר/י את החצי השני שלך</a>
                <div class="navbar-nav">
                  <a href="/home?userId=${userId}" class="nav-link">דף הבית</a>
                  <a href="/notifications?userId=${userId}" class="nav-link" style="position: relative;">
                  התראות
                    ${(() => {
                      const unreadCount = systemNotifications.filter(
                        (n) => n.userId === userId && !n.isRead,
                      ).length;
                      return unreadCount > 0
                        ? `<span style="position: absolute; top: -8px; right: -8px; background-color: red; color: white; 
                        border-radius: 50%; padding: 2px 6px; font-size: 12px; min-width: 20px; text-align: center;">
                          ${unreadCount}
                        </span>`
                        : "";
                    })()}
                  <a href="/users?userId=${userId}" class="nav-link">כרטיסי שידוך</a>
                 <a href="/matches?userId=${userId}" 
         class="nav-link ${req.path.includes('/matches') ? 'active' : ''} ${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 'blinking' : ''}" 
         style="${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 
           'background: linear-gradient(45deg, #FFD700, #FFA500); color: #8B4513; box-shadow: 0 2px 5px rgba(255, 215, 0, 0.3);' 
           : ''}">
         המאצ'ים שלי
      </a>


                  <a href="/events?userId=${userId}" class="nav-link">אירועים</a>
                  <a href="/profile?userId=${userId}" class="nav-link">הפרופיל שלי</a>
                  <a href="/login" class="nav-link">התנתק</a>
                </div>
              </div>

              <div class="page-container">
                <h1>הודעות מערכת</h1>

                ${
                  userNotifications.length > 0
                    ? userNotifications
                        .map(
                          (notification) => `
                  <div class="notification-card">
                    <span class="notification-type type-${notification.type}">${
                      notification.type === "match"
                        ? "התאמה חדשה"
                        : notification.type === "event"
                          ? "אירוע חדש"
                          : "עדכון מערכת"
                    }</span>
                    <div class="notification-title">${notification.title}</div>
                    <div class="notification-content">${notification.content}</div>
                    ${
                      notification.type === "match"
                        ? `
                      <div style="background: linear-gradient(135deg, #ffe8e8 0%, #fff6f6 100%); padding: 20px; border-radius: 12px; margin: 15px 0; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
                        ${(() => {
                          const matchId = notification.content
                            .split("עם ")[1]
                            .split(" ")[0];
                          const matchUser = users.find(
                            (u) => u.firstName === matchId,
                          );
                          if (!matchUser) return "";

                          const hasMatch =
                            likes.some(
                              (l) =>
                                l.fromUserId === userId &&
                                l.toUserId === matchUser.id,
                            ) &&
                            likes.some(
                              (l) =>
                                l.fromUserId === matchUser.id &&
                                l.toUserId === userId,
                            );

                          const currentUser = users.find((u) => u.id === userId);
                          const canViewContact =
                            hasMatch &&
                            currentUser &&
                            (currentUser.gender === "female" ||
                              currentUser.hasSubscription);

                          return `
                            <div style="text-align: center; margin-bottom: 15px;">
                              <div style="font-size: 48px; margin-bottom: 10px;">❤️</div>
                              <h3 style="color: var(--heart-color); margin: 0;">יש לך התאמה חדשה!</h3>
                            </div>

                            <div style="background: linear-gradient(135deg, #ffe8e8 0%, #fff6f6 100%); padding: 15px; border-radius: 12px; margin-bottom: 15px;">
                              <div style="display: flex; gap: 15px; align-items: center;">
                                <div style="flex-shrink: 0;">
                                  ${
                                    matchUser.profileImage
                                      ? `<img src="${matchUser.profileImage}" alt="תמונת פרופיל" style="width: 70px; height: 70px; border-radius: 50%; object-fit: cover; border: 3px solid #FFD700;">`
                                      : `<div style="width: 70px; height: 70px; border-radius: 50%; background: #f0f0f0; display: flex; align-items: center; justify-content: center; font-size: 24px;">👤</div>`
                                  }
                                </div>
                                <div style="flex-grow: 1;">
                                  <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 8px;">
                                <h3 style="margin: 0; color: var(--primary-color); font-size: 1.1em;">${matchUser.firstName} ${matchUser.lastName.charAt(0)}.</h3>
                                ${matchUser.hasSubscription ? '<span style="background: linear-gradient(45deg, #FFD700, #FFA500); color: #8B4513; padding: 5px 10px; font-weight: bold; border-radius: 12px; box-shadow: 0 2px 5px rgba(255, 215, 0, 0.3);">✨ VIP</span>' : ""}
                              </div>
                                  <div style="font-size: 0.9em; color: #666;">
                                    ${matchUser.city ? `<div>📍 ${matchUser.city}</div>` : ""}
                                    ${matchUser.dob ? `<div>👤 ${calculateAge(matchUser.dob)} </div>` : ""}
                                    ${matchUser.relationshipStatus ? `<div>💍 ${matchUser.relationshipStatus}</div>` : ""}
                                  </div>
                                </div>
                              </div>

                              ${
                                canViewContact
                                  ? `
                                <div style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px; border-right: 4px solid var(--heart-color);">
                                  <h4 style="margin: 0 0 10px 0;">פרטי התקשרות:</h4>
                                  <div>📱 ${matchUser.phone || "לא צוין"}</div>
                                  <div>📧 ${matchUser.email || "לא צוין"}</div>
                                  ${matchUser.facebook ? `<div>Facebook: ${matchUser.facebook}</div>` : ""}
                                  ${matchUser.instagram ? `<div>Instagram: ${matchUser.instagram}</div>` : ""}
                                </div>
                                                     `
                                  : `
                                <div style="margin-top: 20px; text-align: center;">
                                  <button onclick="window.location.href='/subscribe?userId=${userId}'"
                                          style="width: 100%; padding: 15px; border-radius: 8px; border: none; background: linear-gradient(45deg, #FFD700, #FFA500); color: white; cursor: pointer; font-weight: bold; box-shadow: 0 4px 10px rgba(255, 215, 0, 0.3);">
                                    🔓 פתח את פרטי ההתקשרות
                                  </button>
                                </div>
                              `
                              }

                              <div style="margin-top: 15px; text-align: center;">
                                <button onclick="window.location.href='/view-profile?viewId=${matchUser.id}&userId=${userId}'" 
                                        style="width: 100%; padding: 12px; border-radius: 8px; border: none; background: var(--primary-color); color: white; cursor: pointer;">
                                  👀 צפה בפרופיל המלא
                                </button>
                              </div>
                            </div>
                          `;
                        })()}
                      </div>
                    `
                        : ""
                    }
                  </div>
                `,
                        )
                        .join("")
                    : `
                  <div class="empty-state">
                    <div class="empty-state-icon">📬</div>
                    <h3>אין הודעות חדשות</h3>
                    <p>כאן יופיעו הודעות מערכת, התאמות חדשות ועדכונים על אירועים</p>
                  </div>
                `
                }
              </div>

              <div class="footer">
                <p>&copy; 2025 הכר/י את החצי השני שלך</p>
              <p>
                  <a href="/terms" target="_blank" style="color: var(--primary-color); text-decoration: underline;">
                    תנאי השימוש
                  </a>
                </p>
              </div>
            </body>
            </html>
              `);
      });

      // דף שכחתי סיסמה
      // נתיב לטיפול בשליחת סיסמה חדשה
      const nodemailer = require("nodemailer");

      // הגדרת שירות המייל כחלק ממערכת הגיבוי
      const transporter = nodemailer.createTransport({
        service: "gmail",
        auth: {
          user: process.env.EMAIL_USER || "zagizagi321@gmail.com",
          pass: process.env.EMAIL_PASS || "default-password",
        },
      });

      // וידוא שתיקיית הגיבויים קיימת
      if (!fs.existsSync('backups')) {
        fs.mkdirSync('backups');
      }

      // וידוא שתיקיית ההעלאות קיימת
      if (!fs.existsSync('uploads')) {
        fs.mkdirSync('uploads');
      }

      // וידוא שקובץ הנתונים הראשי קיים
      if (!fs.existsSync('users_data.json')) {
        const initialData = {
          users: [],
          likes: [],
          events: [],
          lastUpdate: new Date().toISOString()
        };
        fs.writeFileSync('users_data.json', JSON.stringify(initialData, null, 2));
      }

      app.post("/reset-password", express.json(), async (req, res) => {
        const { email } = req.body;

        try {
          // מצא את המשתמש לפי האימייל
          const user = users.find((u) => u.email === email);

          if (!user) {
            return res.send(`
              <!DOCTYPE html>
              <html lang="he" dir="rtl">
              <head>
                <meta charset="UTF-8">
                <title>שגיאה - איפוס סיסמה</title>
                <style>${commonStyles}</style>
              </head>
              <body>
                <div class="navbar">
                  <a href="/" class="navbar-brand">הכר/י את החצי השני שלך</a>
                </div>
                <div class="page-container">
                  <h1>שגיאה</h1>
                  <p>האימייל שהזנת אינו רשום במערכת</p>
                  <a href="/forgot-password" class="button">נסה שוב</a>
                </div>
              </body>
              </html>
            `);
          }

          // יצירת סיסמה זמנית
          const tempPassword = Math.random().toString(36).slice(-8);

          // הצפנת הסיסמה הזמנית
          user.password = hashPassword(tempPassword);

          // שליחת מייל עם הסיסמה הזמנית
          const mailOptions = {
            from: process.env.EMAIL_USER || "your-email@gmail.com",
            to: email,
            subject: "איפוס סיסמה - הכר/י את החצי השני שלך",
            html: `
              <div dir="rtl">
                <h2>איפוס סיסמה</h2>
                <p>שלום ${user.firstName},</p>
                <p>הסיסמה הזמנית שלך היא: <strong>${tempPassword}</strong></p>
                <p>אנא התחבר/י עם סיסמה זו ושנה אותה בהקדם.</p>
              </div>
            `,
          };

          await transporter.sendMail(mailOptions);

          res.send(`
            <!DOCTYPE html>
            <html lang="he" dir="rtl">
            <head>
              <meta charset="UTF-8">
              <title>איפוס סיסמה - הצלחה</title>
              <style>${commonStyles}</style>
            </head>
            <body>
              <div class="navbar">
                <a href="/" class="navbar-brand">הכר/י את החצי השני שלך</a>
              </div>
              <div class="page-container">
                <h1>הוראות לאיפוס סיסמה נשלחו</h1>
                <p>שלחנו לך מייל עם הוראות לאיפוס הסיסמה. אנא בדוק את תיבת הדואר שלך.</p>
                <a href="/login" class="button">חזרה להתחברות</a>
              </div>
            </body>
            </html>
          `);
        } catch (error) {
          console.error("שגיאה באיפוס סיסמה:", error);
          res.status(500).send("שגיאה באיפוס הסיסמה");
        }
      });

      app.get("/forgot-password", (req, res) => {
        res.send(`
          <!DOCTYPE html>
          <html lang="he" dir="rtl">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>שחזור סיסמה - הכר/י את החצי השני שלך</title>
            <style>${commonStyles}</style>
          </head>
          <body>
            <div class="navbar">
              <a href="/" class="navbar-brand">הכר/י את החצי השני שלך</a>
            </div>

            <div class="page-container">
              <form class="login-form" action="/reset-password" method="POST">
                <h1>שחזור סיסמה</h1>
                <p>הזן את כתובת האימייל שלך ונשלח לך קישור לאיפוס הסיסמה.</p>

                <label for="email">אימייל:</label>
                <input type="email" id="email" name="email" required>

                <button type="submit">שלח קישור לאיפוס</button>

                <p style="margin-top: 20px; text-align: center;">
                  <a href="/login" style="color: var(--primary-color);">חזרה להתחברות</a>
                </p>
              </form>
            </div>

            <div class="footer">
              <p>&copy; 2025 הכר/י את החצי השני שלך</p>
              <p>
                  <a href="/terms" target="_blank" style="color: var(--primary-color); text-decoration: underline;">
                    תנאי השימוש
                  </a>
                </p>
            </div>
          </body>
          </html>
        `);
      });

      app.get("/login", (req, res) => {
        res.send(`
          <!DOCTYPE html>
          <html lang="he">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>הכר/י את החצי השני שלך - התחברות</title>
            <style>
              ${commonStyles}

              .login-form {
                max-width: 400px; 
                margin: 0 auto;
                background-color: var(--form-background);
                padding: 35px;
                border-radius: 15px;
                box-shadow: 0 8px 25px rgba(178, 34, 34, 0.15);
              }

              .login-icon {
                text-align: center;
                margin-bottom: 20px;
                font-size: 60px;
                color: var(--heart-color);
              }
            </style>
          </head>
          <body>
            <div class="page-container">
              <h1>הכר/י את החצי השני שלך</h1>
              <p class="site-description">
                <span class="welcome">ברוכים הבאים לאתר שידוכים אונליין!</span>
                התחבר לחשבון שלך כדי לצפות במשתתפים באירועים קרובים, לתת לייקים ולמצוא את החצי השני שלך!
              </p>

              <form class="login-form" action="/login" method="POST">
                <div class="login-icon">❤</div>

                <label for="email">אימייל:</label>
                <input type="email" id="email" name="email" required>

                <label for="password">סיסמה:</label>
                <div style="position: relative;">
                  <input type="password" id="password" name="password" required style="width: 100%;">
                  <button type="button" onclick="togglePassword()" style="position: absolute; left: 10px; top: 50%; transform: translateY(-50%); background: none; border: none; cursor: pointer; padding: 0;">
                    <svg class="password-toggle-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" style="display: block;">
                      <path class="eye-open" d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z" style="display: none;"/>
                      <path class="eye-open" d="M12 12m-3 0a3 3 0 1 0 6 0a3 3 0 1 0-6 0" style="display: none;"/>
                      <path class="eye-closed" d="M2 2l20 20M5.6 5.6C3.6 7.2 2.2 9.3 1 12c2.4 5.2 7 8 11 8 1.9 0 3.7-.4 5.3-1.2" stroke-width="2"/>
                      <path class="eye-closed" d="M8.8 8.8c-.8 1-1.3 2.2-1.3 3.5 0 3 2.5 5.5 5.5 5.5.6 0 1.2-.1 1.8-.3" stroke-width="2"/>
                    </svg>
                  </button>
                  <style>
                    .password-toggle-icon {
                      color: #666;
                      transition: color 0.3s;
                    }
                    .password-toggle-icon:hover {
                      color: var(--primary-color);
                    }
                  </style>
                </div>

                <button type="submit">התחברות</button>

                <script>
                  function togglePassword() {
                    const passwordInput = document.getElementById('password');
                    const eyeOpen = document.querySelectorAll('.eye-open');
                    const eyeClosed = document.querySelectorAll('.eye-closed');

                    if (passwordInput.type === 'password') {
                      passwordInput.type = 'text';
                      eyeOpen.forEach(path => path.style.display = 'block');
                      eyeClosed.forEach(path => path.style.display = 'none');
                    } else {
                      passwordInput.type = 'password';
                      eyeOpen.forEach(path => path.style.display = 'none');
                      eyeClosed.forEach(path => path.style.display = 'block');
                    }
                  }
                </script>
                <a href="/forgot-password" style="display: block; margin-top: 15px; text-align: center; color: var(--primary-color);">שכחתי סיסמה</a>
              </form>

              <div class="footer">
                <p>עדיין אין לך חשבון? <a href="/">הירשם כאן</a></p>
                <p>&copy; 2025 הכר/י את החצי השני שלך</p>
               <p>
                  <a href="/terms" target="_blank" style="color: var(--primary-color); text-decoration: underline;">
                    תנאי השימוש
                  </a>
                </p>
            </div>
          </body>
          </html>
            `);
      });

      // דף הבית לאחר התחברות
      app.get("/home", (req, res) => {
        const userId = req.query.userId;
        if (!userId) {
          return res.redirect("/login");
        }

        const currentUser = users.find((u) => u.id === userId);
        if (!currentUser) {
          return res.redirect("/login");
        }

        res.send(`
          <!DOCTYPE html>
          <html lang="he" dir="rtl">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>דף הבית - הכר/י את החצי השני שלך</title>
            <style>
              ${commonStyles}

              .dashboard-stats {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 20px;
                margin-bottom: 30px;
              }

              .stat-card {
                background-color: var(--form-background);
                padding: 20px;
                border-radius: 12px;
                text-align: center;
                box-shadow: 0 5px 15px rgba(178, 34, 34, 0.1);
                transition: all 0.3s;
              }

              .stat-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 8px 25px rgba(178, 34, 34, 0.2);
              }

              .stat-value {
                font-size: 2.5em;
                font-weight: bold;
                color: var(--primary-color);
                margin: 10px 0;
              }

              .stat-label {
                color: var(--dark-color);
                font-size: 1.1em;
              }

              .welcome-message {
                background: linear-gradient(120deg, var(--accent-color) 0%, var(--form-background) 100%);
                border-radius: 12px;
                padding: 25px;
                margin-bottom: 30px;
                border-right: 4px solid var(--primary-color);
                box-shadow: 0 5px 15px rgba(178, 34, 34, 0.1);
              }

              .next-event {
                display: flex;
                background-color: var(--form-background);
                border-radius: 12px;
                overflow: hidden;
                margin-top: 30px;
                box-shadow: 0 5px 15px rgba(178, 34, 34, 0.1);
              }

              .next-event-img {
                width: 200px;
                height: 150px;
                object-fit: cover;
              }

              .next-event-info {
                padding: 20px;
                flex: 1;
              }

              .featured-profiles {
                margin-top: 30px;
              }

              .section-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 20px;
              }

              .see-all {
                color: var(--primary-color);
                text-decoration: none;
                font-weight: bold;
              }

              @media (max-width: 768px) {
                .next-event {
                  flex-direction: column;
                }

                .next-event-img {
                  width: 100%;
                  height: 200px;
                }
              } 
            </style>
          </head>
          <body>
            <div class="navbar">
              <a href="/home?userId=${userId}" class="navbar-brand">הכר/י את החצי השני שלך</a>
              <div class="navbar-nav">
                <a href="/home?userId=${userId}" class="nav-link active">דף הבית</a>
                <a href="/notifications?userId=${userId}" class="nav-link" style="position: relative;">
                  התראות
                  ${(() => {
                    const unreadCount = systemNotifications.filter(
                      (n) => n.userId === userId && !n.isRead,
                    ).length;
                    return unreadCount > 0
                      ? `<span style="position: absolute; top: -8px; right: -8px; background-color: red; color: white; 
                      border-radius: 50%; padding: 2px 6px; font-size: 12px; min-width: 20px; text-align: center;">
                        ${unreadCount}
                      </span>`
                      : "";
                  })()}
                  <a href="/users?userId=${userId}" class="nav-link">כרטיסי שידוך</a>
                <a href="/matches?userId=${userId}" 
         class="nav-link ${req.path.includes('/matches') ? 'active' : ''} ${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 'blinking' : ''}" 
         style="${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 
           'background: linear-gradient(45deg, #FFD700, #FFA500); color: #8B4513; box-shadow: 0 2px 5px rgba(255, 215, 0, 0.3);' 
           : ''}">
         המאצ'ים שלי
      </a>


                <a href="/events?userId=${userId}" class="nav-link">אירועים</a>
                <a href="/profile?userId=${userId}" class="nav-link">הפרופיל שלי</a>
                <a href="/login" class="nav-link">התנתק</a>
              </div>
            </div>
          <div class="page-container">
            <div class="welcome-message">
              <h2>${currentUser.gender === "male" ? "ברוך הבא" : "ברוכה הבאה"}, ${currentUser.firstName}!</h2>
              ${
                currentUser.hasSubscription
                  ? `
                <div style="background: linear-gradient(45deg, #FFD700, #FFA500); 
                            padding: 15px; 
                            border-radius: 10px; 
                            margin: 15px 0;
                            box-shadow: 0 3px 10px rgba(255, 215, 0, 0.3);
                            border: 2px solid #FFD700;">
                  <h3 style="color: #8B4513; margin: 0 0 10px 0; font-size: 24px;">✨ אתה משתמש VIP ✨</h3>
                  <p style="color: #8B4513; margin: 0; font-weight: bold;">מעכשיו כל פרטי הקשר של ההתאמות פתוחות בפניך!</p>
                </div>
              `
                  : ""
              }
              <p>אנו שמחים לראות אותך באתר שלנו. כאן תוכל/י למצוא את החצי השני שלך דרך אירועי ההיכרויות שלנו.</p>
              ${
                !currentUser.aboutMe ||
                !currentUser.lookingFor ||
                !currentUser.smoking ||
                !currentUser.hobbies ||
                !currentUser.education ||
                !currentUser.occupation ||
                !currentUser.ethnicity
                  ? `<div style="margin-top: 15px; padding: 15px; background-color: var(--accent-color); border-radius: 8px; border-right: 4px solid var(--primary-color);">
                  <strong>⚠️ השלמת פרופיל:</strong> יש פרטים שעדיין לא מילאת בפרופיל שלך. 
                  <a href="/profile?userId=${userId}" style="color: var(--primary-color); text-decoration: underline;">לחץ כאן להשלמת הפרופיל</a>
                </div>`
                  : ""
              }
            </div>

              <div class="dashboard-stats">
              <div class="stat-card">
                <div class="stat-value">${events.length}</div>
                <div class="stat-label">אירועים פעילים</div>
              </div>
              <div class="stat-card">
                <div class="stat-value">${users.length + 74}</div>
                <div class="stat-label">משתתפים רשומים</div>
              </div>
              <div class="stat-card">
                <div class="stat-value">${
                  likes.filter(
                    (l) =>
                      l.fromUserId === userId &&
                      likes.some(
                        (m) => m.fromUserId === l.toUserId && m.toUserId === userId
                      )
                  ).length
                }</div>
                <div class="stat-label">ההתאמות שלי</div>
              </div>
              <div class="stat-card">
                <div class="stat-value">${likes.filter((l) => l.fromUserId === userId).length}</div>
                <div class="stat-label">פרופילים שאהבתי</div>
              </div>
            </div>

            <div class="next-event">
              <div class="next-event-img" style="background-color: var(--accent-color); display: flex; justify-content: center; align-items: center;">
                <div style="font-size: 32px;">🎉</div>
              </div>
              <div class="next-event-info">
                ${(() => {
                  // Find events user is registered for
                  const userEvents = events.filter(event => 
                    event.participants && Array.isArray(event.participants) && 
                    event.participants.includes(userId)
                  );

                  if (userEvents.length > 0) {
                    // Show the next upcoming event details
                    const nextEvent = userEvents[0];
                    return `
                      <h3>האירוע שאתה רשום אליו: ${nextEvent.name}</h3>
                      <p><strong>תאריך:</strong> ${formatDateInHebrew(nextEvent.date)}</p>
                      <p><strong>מיקום:</strong> ${nextEvent.location}</p>
                      <p>${nextEvent.description}</p>
                    `;
                  } else {
                    // Show welcome message for users not registered to any event
                    return `
                      <h3>שידוכים אונליין - מצא את החצי השני שלך</h3>
                      <p>אם יש לייק הדדי מצדך ומצד הבחורה, תוכלו לראות את פרטי הקשר, להמשיך לדבר ולהכיר מחוץ לאתר.</p>
                      <p>בהצלחה במציאת האהבה לכל המשתתפים❤️</p>
                    `;
                  }
                })()}
                <a href="/users?userId=${userId}" class="button" style="display: block; width: fit-content; margin: 20px auto;">${currentUser.gender === 'male' ? 'צפה בכל המשתתפות' : 'צפי בכל המשתתפים'}</a>
              </div>
            </div>

             <div class="featured-profiles">
              <div class="section-header">
                <h2 class="new-members-title">${currentUser.gender === 'male' ? '✨ משתתפות חדשות באתר' : '✨ משתתפים חדשים באתר'}</h2>
      <style>
      .new-members-title {
        font-size: 2.2em;
        background: linear-gradient(120deg, var(--primary-color) 0%, var(--secondary-color) 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        padding: 10px 0;
        margin-bottom: 25px;
        position: relative;
        display: inline-block;
        animation: fadeInUp 0.6s ease-out;
      }

      .new-members-title::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 2px;
        background: linear-gradient(90deg, transparent, var(--primary-color), transparent);
      }

      @keyframes fadeInUp {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      </style>
                <a href="/users?userId=${userId}" class="see-all" style="
        font-size: 0.95em;
        padding: 5px 12px;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        border-radius: 15px;
        box-shadow: 0 2px 8px rgba(178, 34, 34, 0.15);
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
        transform: translateY(0);
        font-weight: 500;
        border: 1px solid rgba(178, 34, 34, 0.1);
        @media (max-width: 768px) {
          font-size: 0.8em;
          padding: 4px 8px;
        }
        &:hover {
          transform: translateY(-2px);
          box-shadow: 0 6px 20px rgba(178, 34, 34, 0.3);
        }">${currentUser.gender === 'male' ? '» גלה עוד' : '» גלי עוד'}</a>
              </div>


              <div class="grid">
                ${(() => {
                // מצא את האירועים שהמשתמש הנוכחי רשום אליהם
                const userEvents = events.filter(event => 
                  event.participants && Array.isArray(event.participants) && 
                  event.participants.includes(userId)
                );

                // סנן משתמשים בהתאם
                return users
                  .filter(u => {
                    // לא להציג את המשתמש עצמו
                    if (u.id === userId) return false;

                    // להציג רק משתמשים מהמגדר הנגדי
                    if (u.gender === currentUser.gender) return false;

                    // בדוק אם יש אירועים משותפים
                    const hasSharedEvent = userEvents.some(event => 
                      event.participants && Array.isArray(event.participants) && 
                      event.participants.includes(u.id)
                    );

                    // אם המשתמש הנוכחי לא רשום לאף אירוע, הצג רק משתמשים שגם הם לא רשומים
                    if (userEvents.length === 0) {
                      const otherUserHasEvent = events.some(event => 
                        event.participants && Array.isArray(event.participants) && 
                        event.participants.includes(u.id)
                      );
                      return !otherUserHasEvent;
                    }

                    // הצג רק משתמשים שרשומים לאירועים משותפים
                    return hasSharedEvent;
                  })
                  .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
                  .slice(0, 4);
              })()
                  .map(
                    (user) => `
                  <div class="profile-card">
                    <div class="profile-img-container">
                      ${
                        user.profileImage
                          ? `<img src="${user.profileImage}" class="profile-img" alt="תמונת פרופיל">`
                          : `<div class="profile-img" style="background-color: var(--accent-color); display: flex; justify-content: center; align-items: center;">
                          <div style="font-size: 48px;">👤</div>
                        </div>`
                      }
                    </div>
                    <div class="profile-info">
                      <div style="display: flex; align-items: center; gap: 10px;">
                        <h3>${user.firstName} ${user.lastName.charAt(0)}.</h3>
                        ${user.hasSubscription ? '<span style="background: linear-gradient(45deg, #FFD700, #FFA500); color: #8B4513; padding: 5px 10px; font-weight: bold; border-radius: 12px; box-shadow: 0 2px 5px rgba(255, 215, 0, 0.3);">✨ VIP</span>' : ""}
                      </div>
                      <div class="profile-details">
                        ${user.dob ? `<span class="profile-detail">גיל: ${calculateAge(user.dob)} </span>` : ""}
                        ${user.city ? `<span class="profile-detail">עיר: ${user.city}</span>` : ""}
                        ${user.relationshipStatus ? `<span class="profile-detail">מצב משפחתי: ${user.relationshipStatus}</span>` : ""}
                      </div>
                      <div class="action-buttons">
                        <button class="profile-btn" onclick="window.location.href='/view-profile?viewId=${user.id}&userId=${userId}'">
                          צפה בפרופיל
                        </button>
                      </div>
                    </div>
                  </div>
                `,
                  )
                  .join("")}
              </div>
            </div>
          </div>

          <div class="footer">
                <p>&copy; 2025 הכר/י את החצי השני שלך</p>
              <p>
                  <a href="/terms" target="_blank" style="color: var(--primary-color); text-decoration: underline;">
                    תנאי השימוש
                  </a>
                </p>
          </div>

          <script>
            // שומר את מזהה המשתמש הנוכחי
            const currentUserId = "${userId}";
          </script>
          </body>
          </html>
          `);
      });

      // נתיב לעדכון תמונת פרופיל
      app.post("/update-profile-image", upload.single("profileImage"), async (req, res) => {
        try {
          const userId = req.body.userId;
          const user = users.find((u) => u.id === userId);

          if (!user) {
            return res.status(404).json({ success: false, message: "משתמש לא נמצא" });
          }

          if (!req.file) {
            return res
              .status(400)
              .json({ success: false, message: "לא נבחרה תמונה חדשה" });
          }

          // שמור את התמונה בדאטאבייס
          const imageId = await saveImageToDB(req.file.buffer, req.file.mimetype);

          // עדכן את נתיב התמונה
          user.profileImage = `/image/${imageId}`;

          // עדכן את המשתמש בדאטאבייס
          const client = await pool.connect();
          try {
            await client.query('BEGIN');
            await client.query(
              'UPDATE users SET profile_image = $1 WHERE id = $2',
              [user.profileImage, userId]
            );
            await client.query('COMMIT');
          } finally {
            client.release();
          }

          // שמור את השינויים בקובץ
          await saveUsersData();

          res.json({ success: true, message: "תמונת הפרופיל עודכנה בהצלחה" });
        } catch (error) {
          console.error("שגיאה בעדכון תמונת פרופיל:", error);
          res
            .status(500)
            .json({ success: false, message: "שגיאה בעדכון תמונת הפרופיל" });
        }
      });

      // דף עריכת פרופיל
      app.get("/edit-profile", (req, res) => {
        const userId = req.query.userId;
        if (!userId) {
          return res.redirect("/login");
        }

        const currentUser = users.find((u) => u.id === userId);
        if (!currentUser) {
          return res.redirect("/login");
        }

        res.send(`
          <!DOCTYPE html>
          <html lang="he" dir="rtl">
          <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>עריכת פרופיל - הכר/י את החצי השני שלך</title>
          <style>
            ${commonStyles}

            .profile-header {
              margin-bottom: 30px;
              text-align: center;
            }

            .profile-avatar-container {
              width: 150px;
              height: 150px;
              margin: 0 auto 20px;
              position: relative;
            }

            .profile-avatar {
              width: 100%;
              height: 100%;
              border-radius: 50%;
              object-fit: cover;
              border: 5px solid var(--primary-color);
            }

            .profile-name {
              font-size: 24px;
              margin: 5px 0;
            }

            .readonly-field {
              background-color: var(--accent-color);
              opacity: 0.8;
              cursor: not-allowed;
            }

            .editable-field {
              background-color: var(--input-background);
            }

            .form-hint {
              font-size: 14px;
              color: var(--gray-color);
              margin-top: -10px;
              margin-bottom: 15px;
              font-style: italic;
            }

            .avatar-placeholder {
              width: 150px;
              height: 150px;
              border-radius: 50%;
              background-color: var(--accent-color);
              display: flex;
              align-items: center;
              justify-content: center;
              font-size: 60px;
              color: var(--primary-color);
              border: 5px solid var(--primary-color);
            }
          </style>
          </head>
          <body>
          <div class="navbar">
            <a href="/home?userId=${userId}" class="navbar-brand">הכר/י את החצי השני שלך</a>
            <div class="navbar-nav">
              <a href="/home?userId=${userId}" class="nav-link">דף הבית</a>
               <a href="/notifications?userId=${userId}" class="nav-link" style="position: relative;">
              התראות
              ${(() => {
                const unreadCount = systemNotifications.filter(
                  (n) => n.userId === userId && !n.isRead,
                ).length;
                return unreadCount > 0
                  ? `<span style="position: absolute; top: -8px; right: -8px; background-color: red; color: white; 
                  border-radius: 50%; padding: 2px 6px; font-size: 12px; min-width: 20px; text-align: center;">
                    ${unreadCount}
                  </span>`
                  : "";
              })()}
              <a href="/users?userId=${userId}" class="nav-link">כרטיסי שידוך</a>
             <a href="/matches?userId=${userId}" 
         class="nav-link ${req.path.includes('/matches') ? 'active' : ''} ${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 'blinking' : ''}" 
         style="${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 
           'background: linear-gradient(45deg, #FFD700, #FFA500); color: #8B4513; box-shadow: 0 2px 5px rgba(255, 215, 0, 0.3);' 
           : ''}">
         המאצ'ים שלי
      </a>


              <a href="/events?userId=${userId}" class="nav-link">אירועים</a>
              <a href="/profile?userId=${userId}" class="nav-link active">הפרופיל שלי</a>
              <a href="/login" class="nav-link">התנתק</a>
            </div>
          </div>

          <div class="page-container">
            <h1>עריכת פרופיל</h1>

            <div class="profile-header">
              <div class="profile-avatar-container">
                ${
                  currentUser.profileImage
                    ? `<img src="${currentUser.profileImage}" class="profile-avatar" alt="תמונת פרופיל">`
                    : `<div class="avatar-placeholder">👤</div>`
                }
                <input type="file" id="profileImageInput" accept="image/*" style="display: none;">
                <button onclick="document.getElementById('profileImageInput').click()" class="button" style="margin-top: 10px;">החלף תמונה</button>
              </div>

              <script>
                document.getElementById('profileImageInput').addEventListener('change', async (e) => {
                  const file = e.target.files[0];
                  if (!file) return;

                  const formData = new FormData();
                  formData.append('profileImage', file);
                  formData.append('userId', currentUserId);

                  try {
                    const response = await fetch('/update-profile-image', {
                      method: 'POST',
                      body: formData
                    });

                    const data = await response.json();
                    if (data.success) {
                      alert('תמונת הפרופיל עודכנה בהצלחה!');
                      location.reload();
                    } else {
                      alert(data.message || 'שגיאה בעדכון התמונה');
                    }
                  } catch (error) {
                    console.error('שגיאה:', error);
                    alert('שגיאה בעדכון התמונה');
                  }
                });
              </script>
              <h2 class="profile-name">${currentUser.firstName} ${currentUser.lastName}</h2>
              <p>שים לב: ניתן לערוך רק את השדות המסומנים</p>
            </div>

            <div class="card">
              <form id="editProfileForm">
                <h3>פרטים אישיים</h3>
                <label for="firstName">שם פרטי:</label>
                <input type="text" id="firstName" name="firstName" value="${currentUser.firstName}" class="readonly-field" readonly>

                <label for="lastName">שם משפחה:</label>
                <input type="text" id="lastName" name="lastName" value="${currentUser.lastName}" class="readonly-field" readonly>

                <label for="email">אימייל:</label>
                <input type="email" id="email" name="email" value="${currentUser.email}" class="readonly-field" readonly>

                <label for="phone">טלפון:</label>
                <input type="tel" id="phone" name="phone" value="${currentUser.phone}" class="readonly-field" readonly>

                <label for="gender">מגדר:</label>
                <select id="gender" name="gender" class="readonly-field" disabled>
                  <option value="male" ${currentUser.gender === "male" ? "selected" : ""}>זכר</option>
                  <option value="female" ${currentUser.gender === "female" ? "selected" : ""}>נקבה</option>
                </select>

                <label for="city">עיר:</label>
                <input type="text" id="city" name="city" value="${currentUser.city || ""}" class="readonly-field" readonly>

                <label for="dob">תאריך לידה:</label>
                <input type="date" id="dob" name="dob" value="${currentUser.dob}" class="readonly-field" readonly>

                <label for="height">גובה:</label>
                <input type="text" id="height" name="height" value="${currentUser.height} ס\\"מ" class="readonly-field" readonly>

                <label for="religiousLevel">השקפה:</label>
                <input type="text" id="religiousLevel" name="religiousLevel" value="${currentUser.religiousLevel}" class="readonly-field" readonly>

                <h3>פרטים ניתנים לעריכה</h3>
                <div class="form-hint">השדות הבאים ניתנים לעריכה</div>

                <label for="aboutMe">קצת עליי:</label>
                <textarea id="aboutMe" name="aboutMe" rows="4" class="editable-field">${currentUser.aboutMe || ""}</textarea>

                <label for="lookingFor">מה אני מחפש/ת:</label>
                <textarea id="lookingFor" name="lookingFor" rows="4" class="editable-field">${currentUser.lookingFor || ""}</textarea>

                <label for="facebook">פייסבוק:</label>
                <input type="text" id="facebook" name="facebook" value="${currentUser.facebook || ""}" class="editable-field">

                <label for="instagram">אינסטגרם:</label>
                <input type="text" id="instagram" name="instagram" value="${currentUser.instagram || ""}" class="editable-field">

                <label for="smoking">הרגלי עישון:</label>
                <select id="smoking" name="smoking" class="editable-field">
                  <option value="" ${!currentUser.smoking ? "selected" : ""}>בחר/י...</option>
                  <option value="לא מעשן" ${currentUser.smoking === "לא מעשן" ? "selected" : ""}>לא מעשן/ת</option>
                  <option value="מעשן לעיתים רחוקות" ${currentUser.smoking === "מעשן לעיתים רחוקות" ? "selected" : ""}>מעשן/ת לעיתים רחוקות</option>
                  <option value="מנסה להפסיק לעשן" ${currentUser.smoking === "מנסה להפסיק לעשן" ? "selected" : ""}>מנסה להפסיק לעשן</option>
                  <option value="מעשן" ${currentUser.smoking === "מעשן" ? "selected" : ""}>מעשן/ת</option>
                </select>

                <label for="hobbies">תחביבים:</label>
                <textarea id="hobbies" name="hobbies" class="editable-field" rows="3">${currentUser.hobbies || ""}</textarea>

                <label for="education">השכלה:</label>
                <select id="education" name="education" class="editable-field">
                  <option value="" ${!currentUser.education ? "selected" : ""}>בחר/י...</option>
                  <option value="תיכונית" ${currentUser.education === "תיכונית" ? "selected" : ""}>תיכונית</option>
                  <option value="תעודה" ${currentUser.education === "תעודה" ? "selected" : ""}>תעודה</option>
                  <option value="מכינה" ${currentUser.education === "מכינה" ? "selected" : ""}>מכינה</option>
                  <option value="תואר ראשון" ${currentUser.education === "תואר ראשון" ? "selected" : ""}>תואר ראשון</option>
                  <option value="תואר שני" ${currentUser.education === "תואר שני" ? "selected" : ""}>תואר שני</option>
                  <option value="דוקטורט" ${currentUser.education === "דוקטורט" ? "selected" : ""}>דוקטורט</option>
                </select>

                <label for="occupation">עיסוק:</label>
                <input type="text" id="occupation" name="occupation" value="${currentUser.occupation || ""}" class="editable-field">

                <label for="ethnicity">מוצא:</label>
                <input type="text" id="ethnicity" name="ethnicity" value="${currentUser.ethnicity || ""}" class="editable-field">

                <div style="display: flex; gap: 10px; margin-top: 20px;">
                  <button type="button" class="button" style="flex: 1; background-color: var(--light-color); color: var(--dark-color); border: 1px solid var(--primary-color);" 
                    onclick="window.location.href='/profile?userId=${userId}'">ביטול</button>
                  <button type="button" id="saveButton" class="button" style="flex: 1;">שמור שינויים</button>
                </div>
              </form>
            </div>
          </div>

          <div class="footer">
                <p>&copy; 2025 הכר/י את החצי השני שלך</p>
              <p>
                  <a href="/terms" target="_blank" style="color: var(--primary-color); text-decoration: underline;">
                    תנאי השימוש
                  </a>
                </p>
          </div>

          <script>
            // שומר את מזהה המשתמש הנוכחי
            const currentUserId = "${userId}";

            // שמירת הפרופיל
            document.getElementById('saveButton').addEventListener('click', async () => {
              const aboutMe = document.getElementById('aboutMe').value;
              const lookingFor = document.getElementById('lookingFor').value;
              const facebook = document.getElementById('facebook').value;
              const instagram = document.getElementById('instagram').value;
              const smoking = document.getElementById('smoking').value;
              const hobbies = document.getElementById('hobbies').value;
              const education = document.getElementById('education').value;
              const occupation = document.getElementById('occupation').value;
              const ethnicity = document.getElementById('ethnicity').value;

              try {
                const response = await fetch('/update-profile', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    userId: currentUserId,
                    aboutMe,
                    lookingFor,
                    facebook,
                    instagram,
                    smoking,
                    hobbies,
                    education,
                    occupation,
                    ethnicity
                  })
                });

                const data = await response.json();

                if (data.success) {
                  alert('הפרופיל עודכן בהצלחה!');
                  setTimeout(() => {
                    window.location.href = '/profile?userId=' + currentUserId;
                  }, 500);
                } else {
                  alert('אירעה שגיאה בעת שמירת הפרופיל: ' + (data.message || 'נא לנסות שוב מאוחר יותר'));
                }
              } catch (error) {
                console.error('שגיאה:', error);
                alert('אירעה שגיאה בעת שמירת הפרופיל');
              }
            });
          </script>
          </body>
          </html>
          `);
      });

      // דף פרופיל
      // דף ממשק ניהול
      app.get("/admin", (req, res) => {
        const userId = req.query.userId;

        // בדיקת הרשאות מנהל
        if (userId !== "test123") {
          return res.redirect("/login");
        }

        const pendingUsers = users.filter((u) => !u.isApproved);
        const approvedUsers = users.filter((u) => u.isApproved);
        const totalUsers = users.length;
        const totalMatches =
          likes.filter((l) =>
            likes.some(
              (m) => m.fromUserId === l.toUserId && m.toUserId === l.fromUserId,
            ),
          ).length / 2;

        res.send(`
          <!DOCTYPE html>
          <html lang="he" dir="rtl">
          <head>
            <meta charset="UTF-8">
            <title>ממשק ניהול - הכר/י את החצי השני שלך</title>
            <style>${commonStyles}</style>
          </head>
          <body>
            <div class="navbar">
              <a href="/home?userId=${userId}" class="navbar-brand">ממשק ניהול</a>
            </div>

            <div class="page-container">
              <h1>ממשק ניהול מערכת</h1>

              <div class="dashboard-stats" style="margin-bottom: 30px;">
                <div class="stat-card">
                  <div class="stat-value">${totalUsers}</div>
                  <div class="stat-label">סה"כ משתמשים</div>
                </div>
                <div class="stat-card">
                  <div class="stat-value">${pendingUsers.length}</div>
                  <div class="stat-label">ממתינים לאישור</div>
                </div>
                <div class="stat-card">
                  <div class="stat-value">${totalMatches}</div>
                  <div class="stat-label">התאמות פעילות</div>
                </div>
              </div>

              <div class="card" style="margin-bottom: 30px;">
                <h2>משתמשים ממתינים לאישור</h2>
                ${
                  pendingUsers
                    .map(
                      (user) => `
                  <div style="padding: 15px; margin: 10px 0; background: var(--accent-color); border-radius: 8px; display: flex; justify-content: space-between; align-items: center;">
                    <div>
                      <strong>${user.firstName} ${user.lastName}</strong>
                      <div>אימייל: ${user.email}</div>
                      <div>טלפון: ${user.phone}</div>
                    </div>
                    <div>
                      <button onclick="approveUser('${user.id}')" class="button" style="margin-left: 10px;">אשר משתמש</button>
                      <button onclick="deleteUser('${user.id}')" class="button" style="background: #dc3545;">מחק משתמש</button>
                    </div>
                  </div>
                `,
                    )
                    .join("") || "<p>אין משתמשים ממתינים לאישור</p>"
                }
              </div>

              <div class="card">
                <h2>משתמשים מאושרים</h2>
                <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 20px;">
                  ${approvedUsers
                    .map(
                      (user) => `
                    <div style="padding: 15px; background: var(--form-background); border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                        <strong>${user.firstName} ${user.lastName}</strong>
                        <div>
                          ${
                            user.hasSubscription
                              ? '<span style="background: #28a745; color: white; padding: 3px 8px; border-radius: 12px;">מנוי פעיל</span>'
                              : '<span style="background: #dc3545; color: white; padding: 3px 8px; border-radius: 12px;">ללא מנוי</span>'
                          }
                        </div>
                      </div>
                      <div>אימייל: ${user.email}</div>
                      <div>טלפון: ${user.phone}</div>
                      <div style="margin-top: 10px; display: flex; gap: 10px; flex-direction: column;">
                        <button onclick="toggleSubscription('${user.id}')" class="button" style="width: 100%; background: ${user.hasSubscription ? "#dc3545" : "#28a745"}">
                          ${user.hasSubscription ? "בטל מנוי" : "הפעל מנוי"}
                        </button>
                        ${
                          user.id !== 'test123' ? 
                          `<button onclick="deleteRegisteredUser('${user.id}')" class="button" style="width: 100%; background: #dc3545;">
                            מחק משתמש
                          </button>` : ''
                        }
                      </div>
                    </div>
                  `,
                    )
                    .join("")}
                </div>
              </div>

              <script>
                async function deleteRegisteredUser(userId) {
                  if (!confirm('האם אתה בטוח שברצונך למחוק משתמש זה? פעולה זו בלתי הפיכה!')) {
                    return;
                  }

                  try {
                    const response = await fetch('/admin/delete-registered-user', {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                        adminId: '${userId}',
                        userId: userId
                      })
                    });

                    const data = await response.json();
                    if (data.success) {
                      alert('המשתמש נמחק בהצלחה');
                      location.reload();
                    } else {
                      alert('שגיאה במחיקת המשתמש: ' + data.message);
                    }
                  } catch (error) {
                    alert('שגיאה במחיקת המשתמש');
                  }
                }
              </script>
            </div>

            <script>
              async function approveUser(userId) {
                try {
                  const response = await fetch('/admin/approve-user', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      adminId: '${userId}',
                      userId: userId
                    })
                  });

                  const data = await response.json();
                  if (data.success) {
                    alert('המשתמש אושר בהצלחה');
                    location.reload();
                  } else {
                    alert('שגיאה באישור המשתמש: ' + data.message);
                  }
                } catch (error) {
                  alert('שגיאה באישור המשתמש');
                }
              }

              async function deleteUser(userId) {
                if (!confirm('האם אתה בטוח שברצונך למחוק משתמש זה?')) return;

                try {
                  const response = await fetch('/admin/delete-user', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      adminId: '${userId}',
                      userId: userId
                    })
                  });

                  const data = await response.json();
                  if (data.success) {
                    alert('המשתמש נמחק בהצלחה');
                    location.reload();
                  } else {
                    alert('שגיאה במחיקת המשתמש: ' + data.message);
                  }
                } catch (error) {
                  alert('שגיאה במחיקת המשתמש');
                }
              }

              async function toggleSubscription(userId) {
                try {
                  const response = await fetch('/admin/approve-subscription', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      adminId: '${userId}',
                      userId: userId
                    })
                  });

                  const data = await response.json();
                  if (data.success) {
                    alert('סטטוס המנוי עודכן בהצלחה');
                    location.reload();
                  } else {
                    alert('שגיאה בעדכון המנוי: ' + data.message);
                  }
                } catch (error) {
                  alert('שגיאה בעדכון המנוי');
                }
              }
            </script>
          </body>
          </html>
        `);
      });

      app.get("/subscribe", (req, res) => {
        const userId = req.query.userId;
        if (!userId) {
          return res.redirect("/login");
        }

        const currentUser = users.find((u) => u.id === userId);
        if (!currentUser) {
          return res.redirect("/login");
        }

        // Redirect to the appropriate payment page based on gender
        if (currentUser.gender === "male") {
          res.redirect(`/subscribe-men?userId=${userId}`);
        } else {
          res.redirect(`/subscribe-women?userId=${userId}`);
        }
      });

      // Payment page for men
      app.get("/subscribe-men", (req, res) => {
        const userId = req.query.userId;
        if (!userId) {
          return res.redirect("/login");
        }

        const currentUser = users.find((u) => u.id === userId);
        if (!currentUser || currentUser.gender !== "male") {
          return res.redirect("/login");
        }

        res.send(`
          <!DOCTYPE html>
          <html lang="he" dir="rtl">
          <head>
            <meta charset="UTF-8">
            <title>תשלום פתיחת התאמות - הכר/י את החצי השני שלך</title>
            <style>
              ${commonStyles}
              .payment-container {
                max-width: 600px;
                margin: 40px auto;
                background: white;
                border-radius: 20px;
                box-shadow: 0 10px 30px rgba(178, 34, 34, 0.15);
                overflow: hidden;
                position: relative;
              }

              .payment-header {
                background: linear-gradient(135deg, #FF6B6B 0%, #FFE66D 100%);
                padding: 30px;
                text-align: center;
                color: white;
                position: relative;
                overflow: hidden;
              }

              .payment-header::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: linear-gradient(45deg, rgba(255,255,255,0.2) 25%, transparent 25%,
                                                  transparent 50%, rgba(255,255,255,0.2) 50%,
                                                  rgba(255,255,255,0.2) 75%, transparent 75%);
                background-size: 20px 20px;
                animation: move 15s linear infinite;
                opacity: 0.3;
              }

              @keyframes move {
                0% { background-position: 0 0; }
                100% { background-position: 50px 50px; }
              }

              .price-tag {
                font-size: 48px;
                font-weight: bold;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
                margin: 20px 0;
                animation: pulse 2s infinite;
              }

              @keyframes pulse {
                0% { transform: scale(1); }
                50% { transform: scale(1.05); }
                100% { transform: scale(1); }
              }

              .payment-content {
                padding: 30px;
              }

              .bit-number {
                background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
                padding: 20px;
                border-radius: 15px;
                text-align: center;
                border: 2px dashed #FFD700;
                margin: 20px 0;
                transition: all 0.3s ease;
              }

              .bit-number:hover {
                transform: translateY(-5px);
                box-shadow: 0 5px 15px rgba(255, 215, 0, 0.3);
              }

              .back-button {
                position: absolute;
                top: 20px;
                right: 20px;
                background: rgba(255,255,255,0.2);
                border: none;
                padding: 10px 20px;
                border-radius: 20px;
                color: white;
                cursor: pointer;
                backdrop-filter: blur(5px);
                transition: all 0.3s ease;
              }

              .back-button:hover {
                background: rgba(255,255,255,0.3);
                transform: translateY(-2px);
              }
            </style>
          </head>
          <body>
            <div class="payment-container">
              <div class="payment-header">
                <button onclick="history.back()" class="back-button">« חזור</button>
                <h1 style="margin: 0; color: white; font-size: 2.5em;">תשלום פתיחת התאמות</h1>
                <div class="price-tag">39₪</div>
                <p style="font-size: 1.2em; margin: 0;">תשלום חד פעמי לגישה מלאה</p>
              </div>

              <div class="payment-content">
                <div class="bit-number">
                  <h3 style="color: var(--primary-color); margin: 0 0 10px 0;">לתשלום בביט:</h3>
                  <p style="font-size: 32px; font-weight: bold; margin: 5px 0; color: #333;">050-754-4567</p>
                </div>

                <div style="background-color: var(--accent-color); padding: 25px; border-radius: 12px; margin-bottom: 20px;">
                  <h3 style="color: var(--primary-color); margin-bottom: 15px;">מה תקבל?</h3>
                  <ul style="list-style: none; padding: 0; margin: 0;">
                    <li style="margin-bottom: 12px; font-size: 18px;">🔓 תדע מי צפה בך</li>
                    <li style="margin-bottom: 12px; font-size: 18px;">🔓 תוכל לראות מי עשה לך לייק</li>
                    <li style="margin-bottom: 12px; font-size: 18px;">🔓 תוכל לראות את פרטי הקשר של ההתאמות שלך</li>
                    <li style="margin-bottom: 12px; font-size: 18px;">🔓 גישה לכל המשתתפות באירוע</li>
                  </ul>
                </div>

                <div style="text-align: center; margin: 30px 0;">
                  <img src="/uploads/bit-qr.jpg.png" alt="ברקוד תשלום ביט" style="max-width: 250px; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
                </div>

                <div style="background: linear-gradient(135deg, #f8d7da 0%, #fff3cd 100%); padding: 20px; border-radius: 12px; margin-top: 20px;">
                  <h3 style="color: var(--primary-color); margin-bottom: 15px;">📱 להפעלת המנוי:</h3>
                  <p style="font-size: 18px; margin-bottom: 10px;">שלח צילום מסך של אישור התשלום בוואטסאפ:</p>
                  <a href="https://wa.me/972507544567" target="_blank" 
                     style="display: inline-block; background: #25D366; color: white; padding: 12px 24px; border-radius: 8px; text-decoration: none; font-weight: bold; margin-top: 10px;">
                    לשליחת אישור בוואטסאפ 📱
                  </a>
                  <p style="margin-top: 15px; font-size: 16px;">✅ המנוי יופעל מיד לאחר קבלת האישור</p>
                </div>
              </div>
            </div>
          </body>
          </html>
        `);
      });

      // Payment page for women
      app.get("/subscribe-women", (req, res) => {
        const userId = req.query.userId;
        if (!userId) {
          return res.redirect("/login");
        }

        const currentUser = users.find((u) => u.id === userId);
        if (!currentUser || currentUser.gender !== "female") {
          return res.redirect("/login");
        }

        res.send(`
          <!DOCTYPE html>
          <html lang="he" dir="rtl">
          <head>
            <meta charset="UTF-8">
            <title>תשלום דמי השתתפות - הכר/י את החצי השני שלך</title>
            <style>
              ${commonStyles}
              .payment-container {
                max-width: 600px;
                margin: 40px auto;
                background: white;
                border-radius: 20px;
                box-shadow: 0 10px 30px rgba(178, 34, 34, 0.15);
                overflow: hidden;
                position: relative;
              }

              .payment-header {
                background: linear-gradient(135deg, #FF69B4 0%, #FFB6C1 100%);
                padding: 30px;
                text-align: center;
                color: white;
                position: relative;
                overflow: hidden;
              }

              .payment-header::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: linear-gradient(45deg, rgba(255,255,255,0.2) 25%, transparent 25%,
                                                  transparent 50%, rgba(255,255,255,0.2) 50%,
                                                  rgba(255,255,255,0.2) 75%, transparent 75%);
                background-size: 20px 20px;
                animation: move 15s linear infinite;
                opacity: 0.3;
              }

              @keyframes move {
                0% { background-position: 0 0; }
                100% { background-position: 50px 50px; }
              }

              .price-tag {
                font-size: 48px;
                font-weight: bold;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
                margin: 20px 0;
                animation: pulse 2s infinite;
              }

              @keyframes pulse {
                0% { transform: scale(1); }
                50% { transform: scale(1.05); }
                100% { transform: scale(1); }
              }

              .payment-content {
                padding: 30px;
              }

              .bit-number {
                background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
                padding: 20px;
                border-radius: 15px;
                text-align: center;
                border: 2px dashed #FF69B4;
                margin: 20px 0;
                transition: all 0.3s ease;
              }

              .bit-number:hover {
                transform: translateY(-5px);
                box-shadow: 0 5px 15px rgba(255, 105, 180, 0.3);
              }

              .back-button {
                position: absolute;
                top: 20px;
                right: 20px;
                background: rgba(255,255,255,0.2);
                border: none;
                padding: 10px 20px;
                border-radius: 20px;
                color: white;
                cursor: pointer;
                backdrop-filter: blur(5px);
                transition: all 0.3s ease;
              }

              .back-button:hover {
                background: rgba(255,255,255,0.3);
                transform: translateY(-2px);
              }
            </style>
          </head>
          <body>
            <div class="payment-container">
              <div class="payment-header">
                <button onclick="history.back()" class="back-button">« חזור</button>
                <h1 style="margin: 0; color: white; font-size: 2.5em;">תשלום דמי השתתפות</h1>
                <div class="price-tag">18₪</div>
                <p style="font-size: 1.2em; margin: 0;">תשלום חד פעמי להשתתפות באירוע</p>
              </div>

              <div class="payment-content">
                <div class="bit-number">
                  <h3 style="color: var(--primary-color); margin: 0 0 10px 0;">לתשלום בביט:</h3>
                  <p style="font-size: 32px; font-weight: bold; margin: 5px 0; color: #333;">050-754-4567</p>
                </div>

                <div style="background-color: var(--accent-color); padding: 25px; border-radius: 12px; margin-bottom: 20px;">
                  <h3 style="color: var(--primary-color); margin-bottom: 15px;">מה תקבלי?</h3>
                  <ul style="list-style: none; padding: 0; margin: 0;">
                    <li style="margin-bottom: 12px; font-size: 18px;">🔓 תדעי מי צפה בך</li>
                    <li style="margin-bottom: 12px; font-size: 18px;">🔓 תוכלי לראות מי עשה לך לייק</li>
                    <li style="margin-bottom: 12px; font-size: 18px;">🔓 תוכלי לראות את פרטי הקשר של ההתאמות שלך</li>
                    <li style="margin-bottom: 12px; font-size: 18px;">🔓 גישה לכל המשתתפים באירוע</li>
                    <li style="margin-bottom: 12px; font-size: 18px; color: var(--primary-color);">✨ תשלום חד פעמי!</li>
                  </ul>
                </div>

                <div style="text-align: center; margin: 30px 0;">
                  <img src="/uploads/bit-qr.jpg.png" alt="ברקוד תשלום ביט" style="max-width: 250px; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
                </div>

                <div style="background: linear-gradient(135deg, #f8d7da 0%, #fff3cd 100%); padding: 20px; border-radius: 12px; margin-top: 20px;">
                  <h3 style="color: var(--primary-color); margin-bottom: 15px;">📱 להפעלת ההשתתפות:</h3>
                  <p style="font-size: 18px; margin-bottom: 10px;">שלחי צילום מסך של אישור התשלום בוואטסאפ:</p>
                  <a href="https://wa.me/972507544567" target="_blank" 
                     style="display: inline-block; background: #25D366; color: white; padding: 12px 24px; border-radius: 8px; text-decoration: none; font-weight: bold; margin-top: 10px;">
                    לשליחת אישור בוואטסאפ 📱
                  </a>
                  <p style="margin-top: 15px; font-size: 16px;">✅ ההשתתפות תופעל מיד לאחר קבלת האישור</p>
                </div>
              </div>
            </div>
          </body>
          </html>
        `);
      });

      app.get("/profile", (req, res) => {
        const userId = req.query.userId;
        if (!userId) {
          return res.redirect("/login");
        }

        const currentUser = users.find((u) => u.id === userId);
        if (!currentUser) {
          return res.redirect("/login");
        }

        // חישוב גיל
        const age = currentUser.dob ? calculateAge(currentUser.dob) : "";

        res.send(`
          <!DOCTYPE html>
          <html lang="he" dir="rtl">
          <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>הפרופיל שלי - הכר/י את החצי השני שלך</title>
          <style>
            ${commonStyles}

            .profile-header {
              margin-bottom: 30px;
              text-align: center;
            }

            .profile-avatar-container {
              width: 150px;
              height: 150px;
              margin: 0 auto 20px;
              position: relative;
            }

            .profile-avatar {
              width: 100%;
              height: 100%;
              border-radius: 50%;
              object-fit: cover;
              border: 5px solid var(--primary-color);
            }

            .edit-avatar {
              position: absolute;
              bottom: 5px;
              right: 5px;
              background-color: var(--primary-color);
              color: white;
              width: 30px;
              height: 30px;
              border-radius: 50%;
              display: flex;
              align-items: center;
              justify-content: center;
              cursor: pointer;
              box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            }

            .profile-name {
              font-size: 24px;
              margin: 5px 0;
            }

            .profile-meta {
              color: var(--gray-color);
              display: flex;
              justify-content: center;
              gap: 15px;
              margin-top: 10px;
            }

            .avatar-placeholder {
              width: 150px;
              height: 150px;
              border-radius: 50%;
              background-color: var(--accent-color);
              display: flex;
              align-items: center;
              justify-content: center;
              font-size: 60px;
              color: var(--primary-color);
              border: 5px solid var(--primary-color);
            }
          </style>
          </head>
          <body>
          <div class="navbar">
            <a href="/home?userId=${userId}" class="navbar-brand">הכר/י את החצי השני שלך</a>
            <div class="navbar-nav">
              <a href="/home?userId=${userId}" class="nav-link">דף הבית</a>
               <a href="/notifications?userId=${userId}" class="nav-link" style="position: relative;">
              התראות
              ${(() => {
                const unreadCount = systemNotifications.filter(
                  (n) => n.userId === userId && !n.isRead,
                ).length;
                return unreadCount > 0
                  ? `<span style="position: absolute; top: -8px; right: -8px; background-color: red; color: white; 
                  border-radius: 50%; padding: 2px 6px; font-size: 12px; min-width: 20px; text-align: center;">
                    ${unreadCount}
                  </span>`
                  : "";
              })()}
              <a href="/users?userId=${userId}" class="nav-link">כרטיסי שידוך</a>
             <a href="/matches?userId=${userId}" 
         class="nav-link ${req.path.includes('/matches') ? 'active' : ''} ${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 'blinking' : ''}" 
         style="${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 
           'background: linear-gradient(45deg, #FFD700, #FFA500); color: #8B4513; box-shadow: 0 2px 5px rgba(255, 215, 0, 0.3);' 
           : ''}">
         המאצ'ים שלי
      </a>


              <a href="/events?userId=${userId}" class="nav-link">אירועים</a>
              <a href="/profile?userId=${userId}" class="nav-link active">הפרופיל שלי</a>
              <a href="/login" class="nav-link">התנתק</a>
            </div>
          </div>

          <div class="page-container">
            <h1>הפרופיל שלי</h1>

            <div class="profile-header">
              <div class="profile-avatar-container">
                ${
                  currentUser.profileImage
                    ? `<img src="${currentUser.profileImage}" class="profile-avatar" alt="תמונת פרופיל">`
                    : `<div class="avatar-placeholder">👤</div>`
                }
                <input type="file" id="profileImageInput" accept="image/*" style="display: none;">
                <div class="edit-avatar" title="שנה תמונה" onclick="document.getElementById('profileImageInput').click()">✏️</div>
          </div>

          <script>
            function previewImage(input) {
              const preview = document.getElementById('imagePreview');
              const previewContainer = document.getElementById('imagePreviewContainer');

              if (input.files && input.files[0]) {
                const reader = new FileReader();

                reader.onload = function(e) {
                  preview.src = e.target.result;
                  previewContainer.style.display = 'block';
                }

                reader.readAsDataURL(input.files[0]);
              } else {
                previewContainer.style.display = 'none';
              }
            }

            document.getElementById('profileImageInput').addEventListener('change', async (e) => {
              const file = e.target.files[0];
              if (!file) return;

              const formData = new FormData();
              formData.append('profileImage', file);
              formData.append('userId', currentUserId);

              try {
                const response = await fetch('/update-profile-image', {
                  method: 'POST',
                  body: formData
                });

                const data = await response.json();
                if (data.success) {
                  alert('תמונת הפרופיל עודכנה בהצלחה!');
                  location.reload();
                } else {
                  alert(data.message || 'שגיאה בעדכון התמונה');
                }
              } catch (error) {
                console.error('שגיאה:', error);
                alert('שגיאה בעדכון התמונה');
              }
            });
          </script>
              <h2 class="profile-name">${currentUser.firstName} ${currentUser.lastName}</h2>
            </div>

                 <div class="tab-content" style="margin: 30px 0;">
                  <div class="action-card events-card" onclick="toggleMyEvents()" style="cursor: pointer;">
                    <div class="card-icon">🎉</div>
                    <div class="card-title">אירועים שאני רשום אליהם</div>
                    <div class="card-description">צפה באירועים שנרשמת אליהם</div>
                  </div>

                  <div id="myEventsList" style="display: none; margin-top: 20px;">
                    ${events
                        .filter((event) => event.participants.includes(currentUser.id))
                        .map(
                          (event) => `
                      <div class="event-card" style="margin-bottom: 15px;">
                        <div class="event-img" style="background-color: var(--accent-color); display: flex; justify-content: center; align-items: center;">
                          <div style="font-size: 32px;">🎉</div>
                        </div>
                        <div class="event-info">
                          <h3>${event.name}</h3>
                          <p><strong>תאריך:</strong> ${formatDateInHebrew(event.date)}</p>
                          <p><strong>מיקום:</strong> ${event.location}</p>
                          <p>${event.description}</p>
                          <div class="event-participants">
                            משתתפים: ${event.participants.length + 74}
                          </div>
                        </div>
                      </div>
                    `,
                        )
                        .join("") || "<p>לא נרשמת לאף אירוע עדיין</p>"}
                  </div>
                </div>

                <div class="tab-content" style="margin: 30px 0;">
                  <div class="action-card settings-card" onclick="window.location.href='/edit-profile?userId=${userId}'" style="cursor: pointer;">
                    <div class="card-icon">⚙️</div>
                    <div class="card-title">הגדרות</div>
                    <div class="card-description">ערוך את פרטי החשבון</div>
                  </div>
                </div>

              <style>
                .action-card {
                  background: linear-gradient(135deg, #fff6f6 0%, #fff 100%);
                  padding: 25px;
                  border-radius: 15px;
                  margin-bottom: 20px;
                  box-shadow: 0 5px 15px rgba(178, 34, 34, 0.1);
                  transition: all 0.3s ease;
                  border: 1px solid rgba(178, 34, 34, 0.1);
                }

                .action-card:hover {
                  transform: translateY(-5px);
                  box-shadow: 0 8px 25px rgba(178, 34, 34, 0.2);
                }

                .card-icon {
                  font-size: 36px;
                  margin-bottom: 15px;
                  animation: pulse 2s infinite;
                }

                .card-title {
                  font-size: 1.5em;
                  font-weight: bold;
                  color: var(--primary-color);
                  margin-bottom: 10px;
                }

                .card-description {
                  color: var(--gray-color);
                  font-size: 1.1em;
                }

                @keyframes pulse {
                  0% { transform: scale(1); }
                  50% { transform: scale(1.1); }
                  100% { transform: scale(1); }
                }
              </style>

                  <div class="card" style="background: linear-gradient(135deg, #fff 0%, #f8f9fa 100%); border: none; box-shadow: 0 8px 30px rgba(178, 34, 34, 0.15);">
                    <h3 style="color: var(--primary-color); font-size: 1.8em; margin-bottom: 25px; border-bottom: 2px solid var(--accent-color); padding-bottom: 10px;">פרטים אישיים</h3>

                    <div class="profile-details-grid">
                      <div class="profile-detail-item">
                        <div class="detail-icon">👤</div>
                        <div class="detail-content">
                          <div class="detail-label">גיל</div>
                          <div class="detail-value">${age || "לא הוזן"}</div>
                        </div>
                      </div>

                      <div class="profile-detail-item">
                        <div class="detail-icon">⚤</div>
                        <div class="detail-content">
                          <div class="detail-label">מגדר</div>
                          <div class="detail-value">${currentUser.gender === "male" ? "זכר" : "נקבה"}</div>
                        </div>
                      </div>

                      <div class="profile-detail-item">
                        <div class="detail-icon">💑</div>
                        <div class="detail-content">
                          <div class="detail-label">מצב משפחתי</div>
                          <div class="detail-value">${currentUser.relationshipStatus || "לא הוזן"}</div>
                        </div>
                      </div>
                    <div class="profile-detail-item"><strong>ילדים:</strong> ${currentUser.hasChildren || "לא הוזן"}</div>
                    <div class="profile-detail-item"><strong>עיר:</strong> ${currentUser.city || "לא הוזן"}</div>
                    <div class="profile-detail-item"><strong>גובה:</strong> ${currentUser.height ? currentUser.height + ' ס"מ' : "לא הוזן"}</div>
                    <div class="profile-detail-item"><strong>השקפה:</strong> ${currentUser.religiousLevel || "לא הוזן"}</div>
                    <div class="profile-detail-item"><strong>הרגלי עישון:</strong> ${currentUser.smoking || "לא הוזן"}</div>
                    <div class="profile-detail-item"><strong>תחביבים:</strong> ${currentUser.hobbies || "לא הוזן"}</div>
                    <div class="profile-detail-item"><strong>השכלה:</strong> ${currentUser.education || "לא הוזן"}</div>
                    <div class="profile-detail-item"><strong>עיסוק:</strong> ${currentUser.occupation || "לא הוזן"}</div>
                    <div class="profile-detail-item"><strong>מוצא:</strong> ${currentUser.ethnicity || "לא הוזן"}</div>

                    <h3>קצת עליי</h3>
                    <p>${currentUser.aboutMe || "לא הוזן מידע"}</p>

                    <h3>מה אני מחפש/ת</h3>
                    <p>${currentUser.lookingFor || "לא הוזן מידע"}</p>

                    <h3>פרטי קשר</h3>
                    <p>פרטי הקשר שלך יוצגו רק למשתמשים עם התאמה הדדית</p>
                    <div class="profile-detail-item"><strong>טלפון:</strong> ${currentUser.phone || "לא הוזן"}</div>
                    <div class="profile-detail-item"><strong>אימייל:</strong> ${currentUser.email || "לא הוזן"}</div>
                    <div class="profile-detail-item"><strong>פייסבוק:</strong> ${currentUser.facebook || "לא הוזן"}</div>
                    <div class="profile-detail-item"><strong>אינסטגרם:</strong> ${currentUser.instagram || "לא הוזן"}</div>

                    </div>
                </div>

                <div class="tab-content" style="margin: 30px 0;">
                  <div class="action-card settings-card" onclick="showSettingsModal()" style="cursor: pointer;">
                    <div class="card-icon">⚙️</div>
                    <div class="card-title">הגדרות</div>
                    <div class="card-description">שינוי סיסמה ומחיקת חשבון</div>
                  </div>
                </div>

                <div id="settingsModal" class="modal">
                  <div class="modal-content" style="background: white; padding: 25px; border-radius: 12px; max-width: 400px; width: 90%;">
                    <h2 style="color: var(--primary-color); margin-bottom: 20px;">הגדרות חשבון</h2>

                    <div style="margin-bottom: 30px;">
                      <h3>שינוי סיסמה</h3>
                      <input type="password" id="currentPassword" placeholder="סיסמה נוכחית" style="margin-bottom: 10px;">
                      <input type="password" id="newPassword" placeholder="סיסמה חדשה" style="margin-bottom: 10px;">
                      <input type="password" id="confirmPassword" placeholder="אימות סיסמה חדשה">
                      <button onclick="changePassword()" class="button" style="width: 100%; margin-top: 10px;">שנה סיסמה</button>
                    </div>

                    <div style="border-top: 1px solid #eee; padding-top: 20px;">
                      <h3 style="color: #dc3545;">מחיקת חשבון</h3>
                      <p style="margin-bottom: 15px;">פעולה זו תמחק לצמיתות את החשבון שלך ואת כל הנתונים הקשורים אליו.</p>
                      <button onclick="deleteAccount()" class="button" style="width: 100%; background: #dc3545;">מחק את החשבון שלי</button>
                    </div>

                    <button onclick="closeSettingsModal()" class="button" style="width: 100%; margin-top: 20px; background: var(--gray-color);">סגור</button>
                  </div>
                </div>

                <script>
                  function showSettingsModal() {
                    document.getElementById('settingsModal').style.display = 'flex';
                  }

                  function closeSettingsModal() {
                    document.getElementById('settingsModal').style.display = 'none';
                  }

                  async function changePassword() {
                    const currentPassword = document.getElementById('currentPassword').value;
                    const newPassword = document.getElementById('newPassword').value;
                    const confirmPassword = document.getElementById('confirmPassword').value;

                    if (!currentPassword || !newPassword || !confirmPassword) {
                      alert('נא למלא את כל השדות');
                      return;
                    }

                    if (newPassword !== confirmPassword) {
                      alert('הסיסמאות החדשות אינן תואמות');
                      return;
                    }

                    try {
                      const response = await fetch('/change-password', {
                        method: 'POST',
                        headers: {
                          'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                          userId: currentUserId,
                          currentPassword,
                          newPassword
                        })
                      });

                      const data = await response.json();
                      if (data.success) {
                        alert('הסיסמה עודכנה בהצלחה');
                        closeSettingsModal();
                      } else {
                        alert(data.message || 'שגיאה בעדכון הסיסמה');
                      }
                    } catch (error) {
                      alert('שגיאה בעדכון הסיסמה');
                    }
                  }

                  async function deleteAccount() {
                    if (!confirm('האם אתה בטוח שברצונך למחוק את החשבון שלך? פעולה זו בלתי הפיכה!')) {
                      return;
                    }

                    try {
                      const response = await fetch('/delete-account', {
                        method: 'POST',
                        headers: {
                          'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                          userId: currentUserId
                        })
                      });

                      const data = await response.json();
                      if (data.success) {
                        alert('החשבון נמחק בהצלחה');
                        window.location.href = '/login';
                      } else {
                        alert(data.message || 'שגיאה במחיקת החשבון');
                      }
                    } catch (error) {
                      alert('שגיאה במחיקת החשבון');
                    }
                  }
                </script>



                <script>
                  function toggleMyEvents() {
                    const eventsList = document.getElementById('myEventsList');
                    if (eventsList.style.display === 'none') {
                      eventsList.style.display = 'block';
                    } else {
                      eventsList.style.display = 'none';
                    }
                  }
                </script>

                <div class="tab-pane" id="settings-tab">
                  <div class="card">
                    <h3>הגדרות חשבון</h3>
                    <form>
                      <label for="newEmail">אימייל חדש:</label>
                      <input type="email" id="newEmail" value="${currentUser.email}">

                      <label for="newPassword">סיסמה חדשה:</label>
                      <input type="password" id="newPassword">

                      <label for="confirmPassword">אימות סיסמה:</label>
                      <input type="password" id="confirmPassword">

                      <button type="button" class="button">שמור שינויים</button>
                    </form>

                    <div style="margin-top: 30px; border-top: 1px solid #f0e6d2; padding-top: 20px;">
                      <h3>מחיקת חשבון</h3>
                      <p>פעולה זו תמחק לצמיתות את החשבון שלך ואת כל הנתונים הקשורים אליו.</p>
                      <button class="button" style="background: linear-gradient(135deg, #c43e3e 0%, #e74c3c 100%);">מחק את החשבון שלי</button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="footer">
                <p>&copy; 2025 הכר/י את החצי השני שלך</p>
              <p>
                  <a href="/terms" target="_blank" style="color: var(--primary-color); text-decoration: underline;">
                    תנאי השימוש
                  </a>
                </p>
          </div>

          <script>
            // שומר את מזהה המשתמש הנוכחי
            const currentUserId = "${userId}";

            // טיפול בתפריט הכרטיסיות
            document.querySelectorAll('.tab').forEach(tab => {
              tab.addEventListener('click', () => {
                // הסר את המחלקה הפעילה מכל הכרטיסיות
                document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                document.querySelectorAll('.tab-pane').forEach(p => p.classList.remove('active'));

                // הוסף את המחלקה הפעילה לכרטיסייה הנוכחית
                tab.classList.add('active');

                // הצג את תוכן הכרטיסייה
                const tabId = tab.getAttribute('data-tab');
                document.getElementById(tabId + '-tab').classList.add('active');
              });
            });
          </script>
          </body>
          </html>
          `);
      });

      // דף המאצ'ים שלי
      // דף המאצ'ים הראשי - התאמות הדדיות
      app.get("/matches", (req, res) => {
        const userId = req.query.userId;
        if (!userId) {
          return res.redirect("/login");
        }

        const currentUser = users.find((u) => u.id === userId);
        if (!currentUser) {
          return res.redirect("/login");
        }

        // ✅ סימון כל הצפיות כנקראו
        views.forEach((v) => {
          if (v.toUserId === userId && !v.isRead) {
            v.isRead = true;
          }
        });

        // קבל את כל ההתאמות ההדדיות
        const myMatches = [];
        users.forEach((user) => {
          if (user.id === userId) return;

          const iLikedThem = likes.find(
            (l) => l.fromUserId === userId && l.toUserId === user.id,
          );
          const theyLikedMe = likes.find(
            (l) => l.fromUserId === user.id && l.toUserId === userId,
          );

          if (iLikedThem && theyLikedMe) {
            myMatches.push({
              ...sanitizeUser(user, true), // עם פרטי קשר
              matchDate: new Date(
                Math.max(
                  new Date(iLikedThem.timestamp).getTime(),
                  new Date(theyLikedMe.timestamp).getTime(),
                ),
              ),
              age: user.dob ? calculateAge(user.dob) : null,
            });
          }
        });

        // מיון לפי תאריך ההתאמה, מהחדש לישן
        myMatches.sort((a, b) => b.matchDate.getTime() - a.matchDate.getTime());

        res.send(`
          <!DOCTYPE html>
          <html lang="he" dir="rtl">
          <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>המאצ'ים שלי - הכר/י את החצי השני שלך</title>
          <style>
            ${commonStyles}
          </style>
          </head>
          <body>
          <div class="navbar">
            <a href="/home?userId=${userId}" class="navbar-brand">הכר/י את החצי השני שלך</a>
            <div class="navbar-nav">
              <a href="/home?userId=${userId}" class="nav-link">דף הבית</a>
              <a href="/notifications?userId=${userId}" class="nav-link" style="position: relative;">
                התראות
                ${(() => {
                  const unreadCount = systemNotifications.filter(
                    (n) => n.userId === userId && !n.isRead,
                  ).length;
                  return unreadCount > 0
                    ? `<span style="position: absolute; top: -8px; right: -8px; background-color: red; color: white; 
                    border-radius: 50%; padding: 2px 6px; font-size: 12px; min-width: 20px; text-align: center;">
                      ${unreadCount}
                    </span>`
                    : "";
                })()}
              </a>
              <a href="/users?userId=${userId}" class="nav-link">כרטיסי שידוך</a>
             <a href="/matches?userId=${userId}" 
         class="nav-link ${req.path.includes('/matches') ? 'active' : ''} ${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 'blinking' : ''}" 
         style="${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 
           'background: linear-gradient(45deg, #FFD700, #FFA500); color: #8B4513; box-shadow: 0 2px 5px rgba(255, 215, 0, 0.3);' 
           : ''}">
         המאצ'ים שלי
      </a>


              <a href="/events?userId=${userId}" class="nav-link">אירועים</a>
              <a href="/profile?userId=${userId}" class="nav-link">הפרופיל שלי</a>
              <a href="/login" class="nav-link">התנתק</a>
            </div>
          </div>

          <div class="page-container">
            <h1 style="font-size: 2.8em; background: linear-gradient(120deg, var(--primary-color) 0%, var(--secondary-color) 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; text-align: center; margin-bottom: 25px;">המאצ'ים שלי ❤️</h1>

            <div style="display: flex; gap: 15px; margin-bottom: 30px; justify-content: center;">
              <button onclick="window.location.href='/matches/views?userId=${userId}'" 
                      style="flex: 1; padding: 15px; border-radius: 12px; background: ${req.path === '/matches/views' ? 'var(--primary-color)' : 'linear-gradient(135deg, var(--accent-color) 0%, var(--form-background) 100%)'}; border: 2px solid var(--primary-color); color: ${req.path === '/matches/views' ? 'white' : 'var(--dark-color)'}; font-weight: bold; cursor: pointer; max-width: 200px;">
                👀 מי צפה בי
              </button>
              <button onclick="window.location.href='/matches/likes?userId=${userId}'"
                      style="flex: 1; padding: 15px; border-radius: 12px; background: ${req.path === '/matches/likes' ? 'var(--primary-color)' : 'linear-gradient(135deg, var(--accent-color) 0%, var(--form-background) 100%)'}; border: 2px solid var(--primary-color); color: ${req.path === '/matches/likes' ? 'white' : 'var(--dark-color)'}; font-weight: bold; cursor: pointer; max-width: 200px;">
                ❤️ כרטיסים שאהבתי
              </button>
              <button onclick="window.location.href='/matches?userId=${userId}'"
                      style="flex: 1; padding: 15px; border-radius: 12px; background: ${req.path === '/matches' ? 'var(--primary-color)' : 'linear-gradient(135deg, var(--accent-color) 0%, var(--form-background) 100%)'}; border: 2px solid var(--primary-color); color: ${req.path === '/matches' ? 'white' : 'var(--dark-color)'}; font-weight: bold; cursor: pointer; max-width: 200px;">
                💕 המאצ'ים שלי
              </button>
            </div>

            <div style="text-align: center; max-width: 600px; margin: 0 auto 40px; background: linear-gradient(135deg, var(--accent-color) 0%, var(--form-background) 100%); padding: 25px; border-radius: 15px; box-shadow: 0 8px 20px rgba(178, 34, 34, 0.12);">
              <p style="font-size: 1.2em; line-height: 1.6; margin: 0; color: var(--dark-color);">
                <span style="display: block; font-size: 1.4em; color: var(--primary-color); margin-bottom: 10px;">✨ התאמות הדדיות ✨</span>
                כאן תוכל/י לראות את כל המשתמשים שיש ביניכם התאמה הדדית
              </p>
            </div>

            ${
              myMatches.length > 0
                ? myMatches
                    .map(
                      (match) => `
              <div class="match-card">
                <img src="${match.profileImage || "/path/to/default-avatar.jpg"}" class="match-img" alt="תמונת פרופיל">
                <div class="match-info">
                  <div class="match-title" style="display: flex; align-items: center; gap: 10px;">
                    <span class="match-icon">❤️</span>${match.firstName} ${match.lastName.charAt(0)}.
                    ${match.hasSubscription ? '<span style="background: linear-gradient(45deg, #FFD700, #FFA500); color: #8B4513; padding: 5px 10px; font-weight: bold; border-radius: 12px; box-shadow: 0 2px 5px rgba(255, 215, 0, 0.3);">✨ VIP</span>' : ""}
                  </div>
                  <div class="profile-details">
                    ${match.age ? `<span class="profile-detail">גיל: ${match.age} </span>` : ""}
                    ${match.city ? `<span class="profile-detail">עיר: ${match.city}</span>` : ""}
                    ${match.height ? `<span class="profile-detail">גובה: ${match.height} ס"מ</span>` : ""}
                    ${match.religiousLevel ? `<span class="profile-detail">השקפה: ${match.religiousLevel}</span>` : ""}
                  </div>
                  <p>${match.aboutMe ? (match.aboutMe.length > 100 ? match.aboutMe.substring(0, 100) + "..." : match.aboutMe) : ""}</p>

                  ${
                    currentUser.gender === "female" || currentUser.hasSubscription
                      ? `
                    <div style="text-align: center; padding: 20px; background: linear-gradient(135deg, #ffe8e8 0%, #fff6f6 100%); border-radius: 15px; margin: 20px 0; box-shadow: 0 8px 20px rgba(178, 34, 34, 0.15); border: 2px solid #ffcdd2;">
                      <div style="font-size: 48px; margin-bottom: 15px; animation: pulse 1.5s infinite;">❤️</div>
                      <h3 style="color: var(--heart-color); font-size: 24px; margin-bottom: 15px;">יש לכם התאמה הדדית! 🎉</h3>
                      <div class="contact-info" style="background: white; padding: 20px; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
                        <h4 style="color: var(--primary-color); margin-bottom: 15px;">פרטי התקשרות:</h4>

      <button class="button" onclick="window.location.href='/view-profile?viewId=${match.id}&userId=${userId}'" style="background: linear-gradient(135deg, #28a745 0%, #34ce57 100%); color: white; padding: 10px 20px; border-radius: 10px; border: none;">צפה בפרופיל המלא</button>
      </div>
      </div>` : ""}
      </div>
      </div>
      `).join("") 
                : "<p style='text-align: center; font-size: 1.4em;'>אין התאמות הדדיות כרגע.</p>"
            }
          </div>
        </body>
        </html>
        `);
      });

      // דף האירועים
      app.get("/events", (req, res) => {
        const userId = req.query.userId;
        if (!userId) {
          return res.redirect("/login");
        }

        const currentUser = users.find((u) => u.id === userId);
        if (!currentUser) {
          return res.redirect("/login");
        }

        res.send(`
          <!DOCTYPE html>
          <html lang="he" dir="rtl">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>אירועים - הכר/י את החצי השני שלך</title>
            <style>
              ${commonStyles}
            </style>
          </head>
          <body>
            <div class="navbar">
              <a href="/home?userId=${userId}" class="navbar-brand">הכר/י את החצי השני שלך</a>
              <div class="navbar-nav">
                <a href="/home?userId=${userId}" class="nav-link">דף הבית</a>
                ${
                  userId === "test123"
                    ? `
            <a href="/admin?userId=${userId}" class="nav-link admin-link" style="background: linear-gradient(45deg, #FFD700, #FFA500); color: #8B4513; font-weight: bold; margin: 0 5px; padding: 8px 15px; border-radius: 20px; box-shadow: 0 2px 5px rgba(255, 215, 0, 0.3);">👑 ממשק ניהול</a>
            <a href="/admin/events?userId=${userId}" class="nav-link admin-link" style="background: linear-gradient(45deg, #FFD700, #FFA500); color: #8B4513; font-weight: bold; margin: 0 5px; padding: 8px 15px; border-radius: 20px; box-shadow: 0 2px 5px rgba(255, 215, 0, 0.3);">🎉 ניהול אירועים</a>
          `
                    : ""
                }
                <a href="/notifications?userId=${userId}" class="nav-link" style="position: relative;">
                  התראות
                  ${(() => {
                    const unreadCount = systemNotifications.filter(
                      (n) => n.userId === userId && !n.isRead,
                    ).length;
                    return unreadCount > 0
                      ? `<span style="position: absolute; top: -8px; right: -8px; background-color: red; color: white; 
                      border-radius: 50%; padding: 2px 6px; font-size: 12px; min-width: 20px; text-align: center;">
                        ${unreadCount}
                      </span>`
                      : "";
                  })()}
                </a>
                <a href="/users?userId=${userId}" class="nav-link">כרטיסי שידוך</a>
               <a href="/matches?userId=${userId}" 
         class="nav-link ${req.path.includes('/matches') ? 'active' : ''} ${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 'blinking' : ''}" 
         style="${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 
           'background: linear-gradient(45deg, #FFD700, #FFA500); color: #8B4513; box-shadow: 0 2px 5px rgba(255, 215, 0, 0.3);' 
           : ''}">
         המאצ'ים שלי
      </a>


                <a href="/events?userId=${userId}" class="nav-link active">אירועים</a>
                <a href="/profile?userId=${userId}" class="nav-link">הפרופיל שלי</a>
                <a href="/login" class="nav-link">התנתק</a>
              </div>
            </div>

            <div class="page-container">
              <div style="text-align: center; margin: 40px 0;">
                <h1 style="font-size: 2.8em; color: var(--primary-color); text-shadow: 2px 2px 4px rgba(178, 34, 34, 0.2); margin-bottom: 15px;">
                  ✨ אירועי היכרויות קרובים ✨
                </h1>
                <p style="font-size: 1.2em; color: var(--dark-color); max-width: 600px; margin: 0 auto; line-height: 1.6; background: linear-gradient(135deg, var(--accent-color) 0%, var(--form-background) 100%); padding: 20px; border-radius: 12px; box-shadow: 0 4px 15px rgba(178, 34, 34, 0.1);">
                  גלה את האירועים הקרובים שיש ופגוש אנשים חדשים באווירה נעימה ומהנה! 
                  <br>
                  <span style="display: inline-block; margin-top: 10px; font-weight: bold; color: var(--primary-color);">
                    הצטרף עכשיו והתחל להכיר ❤️
                  </span>
                </p>
              </div>

              ${events
                .map(
                  (event) => `
                <div class="event-card">
                  <div class="event-img">
                    ${
                      event.image
                        ? `<img src="${event.image}" alt="${event.name}" style="width: 100%; height: 100%; object-fit: cover;">`
                        : `<div style="width: 100%; height: 100%; background-color: var(--accent-color); display: flex; justify-content: center; align-items: center;">
                        <div style="font-size: 32px;">🎉</div>
                      </div>`
                    }
                  </div>
                  <div class="event-info">
                    <h3>${event.name}</h3>
                    <p><strong>תאריך:</strong> ${formatDateInHebrew(event.date)}</p>
                    <p><strong>מיקום:</strong> ${event.location}</p>
                    <p>${event.description}</p>
                    <div class="event-participants">
                      <strong>משתתפים:</strong> ${event.participants.length + 74}
                      <a href="/event-participants?eventId=${event.id}&userId=${userId}" style="margin-right: 10px; color: var(--primary-color);">צפה במשתתפים</a>
                    </div>
                  </div>
                  <div class="event-actions">
                    ${
                      event.participants.includes(userId)
                        ? `<button class="button" style="background-color: var(--success-color);" disabled>רשום לאירוע ✓</button>
                       <button class="button unregister-btn" style="margin-top: 10px; background-color: var(--light-color); color: var(--dark-color); border: 1px solid var(--primary-color);" data-event-id="${event.id}">בטל רישום</button>`
                        : event.pendingParticipants.includes(userId)
                          ? `<button class="button" style="background-color: var(--accent-color); color: var(--dark-color);" disabled>ממתין לאישור...</button>`
                          : `<button class="button register-btn" data-event-id="${event.id}">הירשם לאירוע</button>`
                    }
                    ${
                      userId === "test123" && event.pendingParticipants.length > 0
                        ? `<div style="margin-top: 20px;">
                        <h4>בקשות הרשמה ממתינות:</h4>
                        ${event.pendingParticipants
                          .map((pendingId) => {
                            const pendingUser = users.find((u) => u.id === pendingId);
                            return pendingUser
                              ? `
                            <div style="margin: 10px 0; padding: 10px; background: var(--accent-color); border-radius: 8px;">
                              <p>${pendingUser.firstName} ${pendingUser.lastName.charAt(0)}.</p>
                              <button onclick="approveRegistration('${pendingId}', '${event.id}', true)" class="button" style="margin-left: 10px;">אשר</button>
                              <button onclick="approveRegistration('${pendingId}', '${event.id}', false)" class="button" style="background-color: var(--light-color); color: var(--dark-color);">דחה</button>
                            </div>
                          `
                              : "";
                          })
                          .join("")}
                      </div>`
                        : ""
                    }
          </div>
          </div>

            <script>
                      // טיפול בהרשמה לאירוע
                      document.querySelectorAll('.register-btn').forEach(btn => {
                        btn.addEventListener('click', async () => {
                          const eventId = btn.getAttribute('data-event-id');
                          btn.disabled = true;

                          try {
                            const response = await fetch('/register-event', {
                              method: 'POST',
                              headers: {
                                'Content-Type': 'application/json'
                              },
                              body: JSON.stringify({
                                userId: "${userId}",
                                eventId: eventId
                              })
                            });

                            if (response.ok) {
                              location.reload();
                            }
                          } catch (error) {
                            console.error('שגיאה:', error);
                          } finally {
                            btn.disabled = false;
                          }
                        });
                      });

                      // טיפול בביטול הרשמה לאירוע
                      document.querySelectorAll('.unregister-btn').forEach(btn => {
                        btn.addEventListener('click', async () => {
                          const eventId = btn.getAttribute('data-event-id');
                          btn.disabled = true;

                          try {
                            const response = await fetch('/unregister-event', {
                              method: 'POST',
                              headers: {
                                'Content-Type': 'application/json'
                              },
                              body: JSON.stringify({
                                userId: "${userId}",
                                eventId: eventId
                              })
                            });

                            if (response.ok) {
                              location.reload();
                            }
                          } catch (error) {
                            console.error('שגיאה:', error);
                          } finally {
                            btn.disabled = false;
                          }
                        });
                      });
                      // פונקציה לאישור או דחיית בקשת הרשמה
                      async function approveRegistration(userId, eventId, approve) {
                        try {
                          const response = await fetch('/approve-registration', {
                            method: 'POST',
                            headers: {
                              'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                              adminId: "${userId}",
                              userId: userId,
                              eventId: eventId,
                              approve: approve
                            })
                          });

                          if (response.ok) {
                            // רענון הדף לאחר אישור/דחייה
                            location.reload();
                          } else {
                            alert('שגיאה באישור ההרשמה');
                          }
                        } catch (error) {
                          console.error('שגיאה:', error);
                          alert('שגיאה באישור ההרשמה');
                        }
                      }
                      </script>
                      `,
                )
                .join("")}
            </div>

            <div class="footer">
                <p>&copy; 2025 הכר/י את החצי השני שלך</p>
              <p>
                  <a href="/terms" target="_blank" style="color: var(--primary-color); text-decoration: underline;">
                    תנאי השימוש
                  </a>
                </p>
            </div>
            </body>
            </html>
            `);
      });
      // נתיב משתתפי האירוע - סופי עם העיצוב הנכון
      app.get("/event-participants", (req, res) => {
        try {
          const userId = req.query.userId;
          const eventId = req.query.eventId;

          console.log(
            `ניסיון גישה לדף משתתפי האירוע. userId: ${userId}, eventId: ${eventId}`,
          );

          if (!userId || !eventId) {
            return res.redirect("/login");
          }

          // מצא את האירוע
          let event = events.find((e) => e.id === eventId);
          if (!event) {
            return res.send(`
                          <html dir="rtl">
                          <head>
                            <meta charset="UTF-8">
                            <title>שגיאה</title>
                            <style>${commonStyles}</style>
                          </head>
                          <body>
                            <div class="navbar">
                              <a href="/home?userId=${userId}" class="navbar-brand">הכר/י את החצי השני שלך</a>
                            </div>
                            <div class="page-container">
                              <h1>שגיאה</h1>
                              <p>האירוע המבוקש לא נמצא</p>
                              <a href="/events?userId=${userId}" class="button">חזרה לאירועים</a>
                            </div>
                          </body>
                          </html>
                        `);
          }

          // בדוק אם המשתמש משתתף באירוע
          if (!event.participants.includes(userId)) {
            return res.send(`
                          <html dir="rtl">
                          <head>
                            <meta charset="UTF-8">
                            <title>גישה חסומה</title>
                            <style>${commonStyles}</style>
                          </head>
                          <body>
                            <div class="navbar">
                              <a href="/home?userId=${userId}" class="navbar-brand">הכר/י את החצי השני שלך</a>
                            </div>
                            <div class="page-container">
                              <h1>גישה חסומה</h1>
                              <p>רק משתתפי האירוע יכולים לצפות ברשימת המשתתפים</p>
                              <a href="/events?userId=${userId}" class="button">חזרה לאירועים</a>
                            </div>
                          </body>
                          </html>
                        `);
          }

          let participantsCount = event.participants.length + 74;

          // נסה למצוא את האירוע רק אם events קיים
          if (typeof events !== "undefined" && Array.isArray(events)) {
            event = events.find((e) => e.id === eventId);
            // אם מצאנו אירוע, עדכן את מספר המשתתפים
            if (event && event.participants && Array.isArray(event.participants)) {
              participantsCount = event.participants.length + 74;
            }
          }

          res.send(`
                      <!DOCTYPE html>
                      <html lang="he" dir="rtl">
                      <head>
                      <meta charset="UTF-8">
                      <meta name="viewport" content="width=device-width, initial-scale=1.0">
                      <title>משתתפי האירוע</title>
                      <style>
                      ${commonStyles}
                      </style>
                      </head>
                      <body>
                      <div class="navbar">
                      <a href="/home?userId=${userId}" class="navbar-brand">הכר/י את החצי השני שלך</a>
                      <div class="navbar-nav">
                      <a href="/home?userId=${userId}" class="nav-link">דף הבית</a>
                       <a href="/notifications?userId=${userId}" class="nav-link" style="position: relative;">
              התראות
              ${(() => {
                const unreadCount = systemNotifications.filter(
                  (n) => n.userId === userId && !n.isRead,
                ).length;
                return unreadCount > 0
                  ? `<span style="position: absolute; top: -8px; right: -8px; background-color: red; color: white; 
                  border-radius: 50%; padding: 2px 6px; font-size: 12px; min-width: 20px; text-align: center;">
                    ${unreadCount}
                  </span>`
                  : "";
              })()}
                      <a href="/users?userId=${userId}" class="nav-link">כרטיסי שידוך</a>
                    <a href="/matches?userId=${userId}" 
         class="nav-link ${req.path.includes('/matches') ? 'active' : ''} ${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 'blinking' : ''}" 
         style="${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 
           'background: linear-gradient(45deg, #FFD700, #FFA500); color: #8B4513; box-shadow: 0 2px 5px rgba(255, 215, 0, 0.3);' 
           : ''}">
         המאצ'ים שלי
      </a>


                      <a href="/events?userId=${userId}" class="nav-link active">אירועים</a>
                      <a href="/profile?userId=${userId}" class="nav-link">הפרופיל שלי</a>
                      <a href="/login" class="nav-link">התנתק</a>
                      </div>
                      </div>

                      <div class="page-container">
                      <h1>כרטיסי שידוך${event ? ": " + event.name : ""}</h1>

                      <div style="background-color: var(--form-background); padding: 20px; border-radius: 10px; margin-bottom: 20px;">
                      <h2 style="margin-top: 0;">פרטי האירוע</h2>
                      ${
                        event
                          ? `
                      <p><strong>תאריך:</strong> ${event.date ? formatDateInHebrew(event.date) : "לא צוין"}</p>
                      <p><strong>מיקום:</strong> ${event.location || "לא צוין"}</p>
                      <p><strong>תיאור:</strong> ${event.description || "אין תיאור"}</p>
                      `
                          : `
                      <p><strong>מזהה אירוע:</strong> ${eventId}</p>
                      `
                      }
                      <p><strong>משתתפים:</strong> ${participantsCount}</p>
                      </div>

                      <h2>רשימת משתתפים</h2>
                      <div class="grid">
                      ${users
                        .filter((user) => {
                          // מצא את המשתמש הנוכחי
                          const currentUser = users.find((u) => u.id === userId);
                          // סנן משתמשים שרשומים לאירוע ושהם מהמגדר הנגדי
                          return (
                            event &&
                            event.participants.includes(user.id) &&
                            ((currentUser.gender === "male" &&
                              user.gender === "female") ||
                              (currentUser.gender === "female" &&
                                user.gender === "male"))
                          );
                        })
                        .sort(() => Math.random() - 0.5)
                        .map(
                          (participant) => `
                        <div class="profile-card">
                          <div class="profile-img-container">
                            ${
                              participant.profileImage
                                ? `<img src="${participant.profileImage}" class="profile-img" alt="תמונת פרופיל">`
                                : `<div class="profile-img" style="background-color: var(--accent-color); display: flex; justify-content: center; align-items: center;">
                                <div style="font-size: 48px;">👤</div>
                              </div>`
                            }
                          </div>
                          <div class="profile-info">
                            <div style="display: flex; align-items: center; gap: 10px;">
                              <h3>${participant.firstName} ${participant.lastName.charAt(0)}.</h3>
                              ${participant.hasSubscription ? '<span style="background: linear-gradient(45deg, #FFD700, #FFA500); color: #8B4513; padding: 5px 10px; font-weight: bold; border-radius: 12px; box-shadow: 0 2px 5px rgba(255, 215, 0, 0.3);">✨ VIP</span>' : ""}
                            </div>
                            <div class="profile-details" style="margin-bottom: 5px;">
                              ${participant.dob ? `<span class="profile-detail">גיל: ${calculateAge(participant.dob)} </span>` : ""}
                              ${participant.city ? `<span class="profile-detail">עיר: ${participant.city}</span>` : ""}
                              ${participant.height ? `<span class="profile-detail">גובה: ${participant.height} ס"מ</span>` : ""}
                              ${participant.relationshipStatus ? `<span class="profile-detail">מצב משפחתי: ${participant.relationshipStatus}</span>` : ""}
                            </div>
                            <p style="margin: 0 0 5px 0;">${participant.aboutMe ? (participant.aboutMe.length > 100 ? participant.aboutMe.substring(0, 100) + "..." : participant.aboutMe) : ""}</p>
                            <div class="action-buttons">
                              <button class="profile-btn" onclick="window.location.href='/view-profile?viewId=${participant.id}&userId=${userId}'">
                                צפה בפרופיל
                              </button>
                            </div>
                          </div>
                        </div>
                      `,
                        )
                        .join("")}
                      </div>

                      <a href="/events?userId=${userId}" class="button" style="margin-top: 20px;">חזרה לאירועים</a>
                      </div>

                      <div class="footer">
                <p>&copy; 2025 הכר/י את החצי השני שלך</p>
              <p>
                  <a href="/terms" target="_blank" style="color: var(--primary-color); text-decoration: underline;">
                    תנאי השימוש
                  </a>
                </p>
                      </div>
                      </body>
                      </html>
                      `);
        } catch (error) {
          console.error("שגיאה בדף משתתפי האירוע:", error);
          res.send(`
                      <html dir="rtl">
                      <head>
                      <meta charset="UTF-8">
                      <title>שגיאה</title>
                      <style>${commonStyles}</style>
                      </head>
                      <body>
                      <div class="navbar">
                        <a href="/home" class="navbar-brand">הכר/י את החצי השני שלך</a>
                      </div>
                      <div class="page-container">
                        <h1>שגיאה טכנית</h1>
                        <p>פרטי השגיאה: ${error.message}</p>
                        <a href="/events?userId=${req.query.userId}" class="button">חזור לדף האירועים</a>
                      </div>
                      </body>
                      </html>
                      `);
        }
      });
      // דף המשתמשים
      app.get("/users", (req, res) => {
        const userId = req.query.userId;
        if (!userId) {
          return res.redirect("/login");
        }

        const currentUser = users.find((u) => u.id === userId);
        if (!currentUser) {
          return res.redirect("/login");
        }

        // מצא את האירועים שהמשתמש הנוכחי רשום אליהם
        const userEvents = events.filter((event) =>
          event.participants && Array.isArray(event.participants) && event.participants.includes(userId)
        );

        // קבל משתמשים בהתאם להרשאות צפייה ומיון אקראי
        const otherUsers = users
          .sort(() => Math.random() - 0.5) // מיון אקראי
          .filter((u) => {
            if (u.id === userId) return false;

            // למנהל מציג את כל המשתמשים
            if (userId === "test123") return true;

            // התאמת מגדר
            const isGenderMatch = currentUser.gender === "male" ? u.gender === "female" : u.gender === "male";

            // בדוק אם המשתמש הנוכחי רשום לאירוע כלשהו
            const currentUserHasEvent = userEvents.length > 0;

            // בדוק אם המשתמש האחר רשום לאירוע כלשהו
            const otherUserHasEvent = events.some(event => 
              event.participants && Array.isArray(event.participants) && event.participants.includes(u.id)
            );

            // אם שניהם לא רשומים לאירועים או שניהם רשומים לאותם אירועים
            if (!currentUserHasEvent && !otherUserHasEvent) {
              return isGenderMatch;
            } else if (currentUserHasEvent) {
              return isGenderMatch && userEvents.some(event => 
                event.participants && Array.isArray(event.participants) && event.participants.includes(u.id)
              );
            }

            return false;
          })
          .map((user) => {
            return {
              ...sanitizeUser(user),
              // בדוק אם המשתמש הנוכחי כבר נתן לייק למשתמש זה
              liked: !!likes.find(
                (l) => l.fromUserId === userId && l.toUserId === user.id,
              ),
              // בדוק אם יש התאמה הדדית
              hasMatch:
                !!likes.find(
                  (l) => l.fromUserId === userId && l.toUserId === user.id,
                ) &&
                !!likes.find(
                  (l) => l.fromUserId === user.id && l.toUserId === userId,
                ),
              // חשב את הגיל
              age: user.dob ? calculateAge(user.dob) : null,
            };
          });

        res.send(`
                      <!DOCTYPE html>
                      <html lang="he" dir="rtl">
                      <head>
                      <meta charset="UTF-8">
                      <meta name="viewport" content="width=device-width, initial-scale=1.0">
                      <title>כרטיסי שידוך - הכר/י את החצי השני שלך</title>
                      <style>
                      ${commonStyles}

                      .filters {
                      background-color: var(--form-background);
                      padding: 20px;
                      border-radius: 12px;
                      margin-bottom: 30px;
                      box-shadow: 0 5px 15px rgba(178, 34, 34, 0.1);
                      }

                      .filter-row {
                      display: flex;
                      flex-wrap: wrap;
                      gap: 15px;
                      margin-bottom: 15px;
                      }

                      .filter-group {
                      flex: 1;
                      min-width: 200px;
                      }

                      .filter-buttons {
                      display: flex;
                      justify-content: flex-end;
                      gap: 10px;
                      margin-top: 20px;
                      }

                      .reset-filters {
                      background-color: var(--accent-color);
                      color: var(--dark-color);
                      border: 1px solid var(--primary-color);
                      }

                      .filter-label {
                      display: block;
                      margin-bottom: 5px;
                      font-weight: bold;
                      }

                      .badge {
                      display: inline-block;
                      padding: 5px 10px;
                      border-radius: 15px;
                      font-size: 14px;
                      font-weight: bold;
                      margin-right: 5px;
                      }

                      .badge-match {
                      background-color: var(--heart-color);
                      color: white;
                      }

                      .badge-liked {
                      background-color: var(--primary-color);
                      color: white;
                      }
                      </style>
                      </head>
                      <body>
                      <div class="navbar">
                      <a href="/home?userId=${userId}" class="navbar-brand">הכר/י את החצי השני שלך</a>
                      <div class="navbar-nav">
                      <a href="/home?userId=${userId}" class="nav-link">דף הבית</a>
                       <a href="/notifications?userId=${userId}" class="nav-link" style="position: relative;">
              התראות
              ${(() => {
                const unreadCount = systemNotifications.filter(
                  (n) => n.userId === userId && !n.isRead,
                ).length;
                return unreadCount > 0
                  ? `<span style="position: absolute; top: -8px; right: -8px; background-color: red; color: white; 
                  border-radius: 50%; padding: 2px 6px; font-size: 12px; min-width: 20px; text-align: center;">
                    ${unreadCount}
                  </span>`
                  : "";
              })()}
                      <a href="/users?userId=${userId}" class="nav-link active">כרטיסי שידוך</a>
                    <a href="/matches?userId=${userId}" 
         class="nav-link ${req.path.includes('/matches') ? 'active' : ''} ${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 'blinking' : ''}" 
         style="${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 
           'background: linear-gradient(45deg, #FFD700, #FFA500); color: #8B4513; box-shadow: 0 2px 5px rgba(255, 215, 0, 0.3);' 
           : ''}">
         המאצ'ים שלי
      </a>


                      <a href="/events?userId=${userId}" class="nav-link">אירועים</a>
                      <a href="/profile?userId=${userId}" class="nav-link">הפרופיל שלי</a>
                      <a href="/login" class="nav-link">התנתק</a>
                      </div>
                      </div>

                      <div class="page-container">
                      <h1>${currentUser.gender === "male" ? "כרטיסי משתתפות" : "כרטיסי משתתפים"}</h1>

                      <div class="filters">
                        <h3 style="margin-bottom: 20px;">סינון משתתפים</h3>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px;">
                          ${(() => {
                        // Check if user is registered to any events
                        const userEvents = events.filter(event => 
                          event.participants && Array.isArray(event.participants) && 
                          event.participants.includes(userId)
                        );

                        // Only show event filter if user is registered to events
                        return userEvents.length > 0 ? `
                          <div class="filter-group">
                            <label class="filter-label">אירוע</label>
                            <select>
                              <option value="">כל האירועים</option>
                              ${events
                                .filter(event => event.participants.includes(userId))
                                .map(event => `
                                  <option value="${event.id}">${event.name}</option>
                                `)
                                .join("")}
                            </select>
                          </div>
                        ` : '';
                      })()}

                          <div class="filter-group">
                            <label class="filter-label">מצב משפחתי</label>
                            <select name="relationshipStatus">
                              <option value="">הכל</option>
                              <option value="רווק">רווק/ה</option>
                              <option value="גרוש">גרוש/ה</option>
                              <option value="אלמן">אלמן/ה</option>
                            </select>
                          </div>

                          <div class="filter-group">
                            <label class="filter-label">גיל</label>
                            <div style="display: flex; gap: 10px;">
                              <input type="number" name="minAge" placeholder="מינימום" min="18" max="120" style="width: 50%;">
                              <input type="number" name="maxAge" placeholder="מקסימום" min="18" max="120" style="width: 50%;">
                            </div>
                          </div>

                          <div class="filter-group">
                            <label class="filter-label">אזור</label>
                            <select name="region">
                              <option value="">הכל</option>
                              <option value="צפון">צפון</option>
                              <option value="מרכז">מרכז</option>
                              <option value="שפלה">שפלה</option>
                              <option value="דרום">דרום</option>
                            </select>
                          </div>
                        </div>

                        <div style="display: flex; justify-content: flex-end; gap: 10px;">
                          <button class="reset-filters" style="padding: 8px 15px;" onclick="resetFilters()">נקה סינון</button>
                          <button id="filterButton" style="padding: 8px 15px;">סנן משתתפים</button>

      <script>
      document.getElementById('filterButton').addEventListener('click', () => {
        const relationshipFilter = document.querySelector('select[name="relationshipStatus"]')?.value;
        const religionFilter = document.querySelector('select[name="religiousLevel"]')?.value;
        const minAge = parseInt(document.querySelector('input[name="minAge"]')?.value) || 0;
        const maxAge = parseInt(document.querySelector('input[name="maxAge"]')?.value) || 120;

        const profileCards = document.querySelectorAll('.profile-card');

        profileCards.forEach(card => {
          let shouldShow = true;
          const details = Array.from(card.querySelectorAll('.profile-detail'));

          // Check relationship status
          if (relationshipFilter) {
            const status = details.find(d => d.textContent.includes('מצב משפחתי'));
            if (!status || !status.textContent.includes(relationshipFilter)) {
              shouldShow = false;
            }
          }

          // Check region based on city
          if (shouldShow) {
            const regionFilter = document.querySelector('select[name="region"]')?.value;
            if (regionFilter) {
              const cityDetail = details.find(d => d.textContent.includes('עיר:'));
              if (cityDetail) {
                const city = cityDetail.textContent.split(':')[1].trim();
                const northCities = ['חיפה', 'טבריה', 'צפת', 'נהריה', 'עכו', 'קרית שמונה', 'כרמיאל', 'עפולה'];
                const centerCities = ['תל אביב', 'רמת גן', 'גבעתיים', 'פתח תקווה', 'הרצליה', 'רעננה', 'כפר סבא'];
                const shfelaCities = ['ראשון לציון', 'רחובות', 'נס ציונה', 'יבנה', 'גדרה', 'אשדוד'];
                const southCities = ['באר שבע', 'אשקלון', 'אילת', 'דימונה', 'ערד', 'קרית גת'];

                if (regionFilter === 'צפון' && !northCities.includes(city)) shouldShow = false;
                if (regionFilter === 'מרכז' && !centerCities.includes(city)) shouldShow = false;
                if (regionFilter === 'שפלה' && !shfelaCities.includes(city)) shouldShow = false;
                if (regionFilter === 'דרום' && !southCities.includes(city)) shouldShow = false;
              } else {
                shouldShow = false;
              }
            }
          }

          // Check age range
          if (shouldShow && (minAge > 0 || maxAge < 120)) {
            const ageDetail = details.find(d => d.textContent.includes('גיל:'));
            if (ageDetail) {
              const ageText = ageDetail.textContent.split(':')[1].trim();
              const age = parseInt(ageText);
              if (isNaN(age) || age < minAge || age > maxAge) {
                shouldShow = false;
              }
            } else {
              shouldShow = false;
            }
          }

          card.style.display = shouldShow ? '' : 'none';
        });
      });

      // פונקציה לאיפוס כל הפילטרים
      function resetFilters() {
        // איפוס כל שדות הקלט
        document.querySelector('select[name="relationshipStatus"]').value = '';
        document.querySelector('select[name="religiousLevel"]').value = '';
        document.querySelector('input[name="minAge"]').value = '';
        document.querySelector('input[name="maxAge"]').value = '';

        // הצגת כל הכרטיסים
        document.querySelectorAll('.profile-card').forEach(card => {
          card.style.display = '';
        });
      }
      </script>
                        </div>
                      </div>

                      <div class="grid" id="profilesGrid">
                      ${
                        otherUsers.length > 0
                          ? otherUsers
                              .map(
                                (user) => `
                      <div class="profile-card" data-user-id="${user.id}">
                      <div class="profile-img-container">
                        ${
                          user.profileImage
                            ? `<img src="${user.profileImage}" class="profile-img" alt="תמונת פרופיל">`
                            : `<div class="profile-img" style="background-color: var(--accent-color); display: flex; justify-content: center; align-items: center;">
                            <div style="font-size: 48px;">👤</div>
                          </div>`
                        }
                        ${user.hasSubscription ? '<span class="badge" style="background: linear-gradient(45deg, #FFD700, #FFA500); color: #8B4513; padding: 5px 10px; font-weight: bold;">✨ VIP</span>' : ""}
                        ${user.hasMatch ? '<span class="badge badge-match">התאמה!</span>' : ""}
                        ${user.liked && !user.hasMatch ? '<span class="badge badge-liked">לייק</span>' : ""}
                      </div>
                      <div class="profile-info">
                        <div style="display: flex; align-items: center; gap: 10px;">
                          <h3>${user.firstName} ${user.lastName.charAt(0)}.</h3>
                          ${user.hasSubscription ? '<span style="background: linear-gradient(45deg, #FFD700, #FFA500); color: #8B4513; padding: 5px 10px; font-weight: bold; border-radius: 20px; box-shadow: 0 2px 5px rgba(255, 215, 0, 0.3);">✨ VIP</span>' : ""}
                        </div>
                        <div class="profile-details">
                          ${user.age ? `<span class="profile-detail">גיל: ${user.age} </span>` : ""}
                          ${user.city ? `<span class="profile-detail">עיר: ${user.city}</span>` : ""}
                          ${user.height ? `<span class="profile-detail">גובה: ${user.height} ס"מ</span>` : ""}
                          ${user.relationshipStatus ? `<span class="profile-detail">מצב משפחתי: ${user.relationshipStatus}</span>` : ""}
                        </div>
                        ${user.aboutMe ? `
        <div style="margin-top: 10px; margin-bottom: 30px;">
          <strong style="color: var(--primary-color); display: block; margin-bottom: 5px;">עליי:</strong>
          <p style="margin: 0; line-height: 1.4;">${user.aboutMe.length > 100 ? user.aboutMe.substring(0, 100) + "..." : user.aboutMe}</p>
        </div>
      ` : ""}
                        <div class="action-buttons">
                          <button class="like-btn ${user.liked ? "liked" : ""}" onclick="handleLike(event, '${user.id}', '${user.firstName} ${user.lastName.charAt(0)}.')" data-user-id="${user.id}">
                            ${user.liked ? "❤️ כבר אהבתי" : "🤍 תן לייק"}
                          </button>
                          <button class="profile-btn" onclick="window.location.href='/view-profile?viewId=${user.id}&userId=${userId}'">
                            צפה בפרופיל
                          <script>
                          async function toggleSubscription(targetUserId) {
                            try {
                            console.log('clicked');
                              const response = await fetch('/admin/approve-subscription', {
                                method: 'POST',
                                headers: {
                                  'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                  adminId: "${userId}",
                                  userId: targetUserId
                                })
                              });

                              const data = await response.json();
                              if (data.success) {
                                alert('סטטוס המנוי עודכן בהצלחה');
                                location.reload();
                              } else {
                                alert('שגיאה בעדכון המנוי: ' + data.message);
                              }
                            } catch (error) {
                              alert('שגיאה בעדכון המנוי');
                              console.error(error);
                            }
                          }



                          async function handleLike(event, targetUserId, userName) {
                            event.preventDefault();
                            const btn = event.target;
                            const isLiked = btn.classList.contains('liked');

                            try {
                              const response = await fetch(isLiked ? '/unlike' : '/like', {
                                method: 'POST',
                                headers: {
                                  'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                  fromUserId: "${userId}",
                                  toUserId: targetUserId
                                })
                              });

                              const data = await response.json();
                              if (data.success) {
                                if (isLiked) {
                                  btn.classList.remove('liked');
                                  btn.textContent = '🤍 תן לייק';
                                  location.reload();
                                } else {
                                  btn.classList.add('liked');
                                  btn.textContent = '❤️ כבר אהבתי';
                                  if (data.match) {
                                    showMatchNotification(userName);
                                  } else {
                                    location.reload();
                                  }
                                }
                              }
                            } catch (error) {
                              console.error('שגיאה:', error);
                              alert('אירעה שגיאה בעת ביצוע הפעולה');
                            }
                          }



        async function handleLike(event, targetUserId, userName) {
          event.preventDefault();
          const btn = event.target;
          const isLiked = btn.classList.contains('liked');

          try {
            const response = await fetch(isLiked ? '/unlike' : '/like', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                fromUserId: "${userId}",
                toUserId: targetUserId
              })
            });

            const data = await response.json();
            if (data.success) {
              if (isLiked) {
                btn.classList.remove('liked');
                btn.textContent = '🤍 תן לייק';
                location.reload();
              } else {
                btn.classList.add('liked');
                btn.textContent = '❤️ כבר אהבתי';
                if (data.match) {
                  document.getElementById('matchName').textContent = data.matchName;
                  document.getElementById('matchNotification').style.display = 'block';
                  document.getElementById('matchOverlay').style.display = 'block';
                } else {
                  location.reload();
                }
              }
            }
          } catch (error) {
            console.error('שגיאה:', error);
            alert('אירעה שגיאה בעת ביצוע הפעולה');
          }
        }

        </script>
        ${
          userId === "test123"
            ? `
        <button onclick="toggleSubscription('${user.id}')" class="button" style="background: ${user.hasSubscription ? "#dc3545" : "#28a745"}; width: 100%; margin-top: 10px;">
          ${user.hasSubscription ? "❌ בטל מנוי" : "✅ הפעל מנוי"}
        </button>
        `
            : ""
        }
      </div>

                        <script>
                          async function toggleSubscription(userId) {
                            try {
                              const response = await fetch('/admin/approve-subscription', {
                                method: 'POST',
                                headers: {
                                  'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                  adminId: '${userId}',
                                  userId: userId
                                })
                              });

                              const data = await response.json();
                              if (data.success) {
                                alert('סטטוס המנוי עודכן בהצלחה');
                                location.reload();
                              } else {
                                alert('שגיאה בעדכון המנוי: ' + data.message);
                              }
                            } catch (error) {
                              alert('שגיאה בעדכון המנוי');
                              console.error(error);
                            }
                          }
                        </script>
                      </div>
                      </div>
                      `,
                              )
                              .join("")
                          : `
                      <div class="empty-state" style="grid-column: 1 / -1;">
                      <div class="empty-state-icon">👋</div>
                      <h3>עוד אין משתתפים רשומים</h3>
                      <p>היה הראשון להזמין חברים להצטרף לאירוע ולהתחיל להכיר!</p>
                      </div>
                      `
                      }
                      </div>
                      </div>

                      <div class="footer">
                <p>&copy; 2025 הכר/י את החצי השני שלך</p>
              <p>
                  <a href="/terms" target="_blank" style="color: var(--primary-color); text-decoration: underline;">
                    תנאי השימוש
                  </a>
                </p>
                      </div>

          <!-- מודאל תמונה -->
      <div id="imageModal" class="modal" onclick="closeModal()">
        <img id="modalImage" class="modal-content">
      </div>

      <!-- הודעת התאמה -->
      <div id="matchNotification" class="match-notification" style="display: none;">
        <h2>מזל טוב! יש לך התאמה! 🎉</h2>
        <div class="match-emoji">❤️</div>
        <p>יש לך התאמה עם <span id="matchName"></span>!</p>
        <p>כעת תוכל/י לראות את פרטי הקשר ולהתחיל לדבר.</p>
        <br>
        <button class="button" onclick="hideMatchNotification()">אישור</button>
      </div>

      <!-- רקע חצי שקוף להתראה -->
      <div id="matchOverlay" class="match-notification-overlay" style="display: none;"></div>

      <!-- סקריפט לטיפול בהתראה -->
      <script>
        function hideMatchNotification() {
          document.getElementById('matchNotification').style.display = 'none';
          document.getElementById('matchOverlay').style.display = 'none';
          location.reload(); // רענון הדף אחרי לחיצה על אישור
        }

        // רענון אוטומטי אחרי 5 שניות אם ההתראה מוצגת
        window.addEventListener('DOMContentLoaded', () => {
          const matchBox = document.getElementById('matchNotification');
          if (matchBox && matchBox.style.display === 'block') {
            setTimeout(() => {
              location.reload();
            }, 5000); // רענון אחרי 5 שניות
          }
        });
      </script>




                      <script>
                      // שומר את מזהה המשתמש הנוכחי
                      const currentUserId = "${userId}";

                      function applyFilters() {
        const eventFilter = document.querySelector('select[name="event"]')?.value;
        const relationshipFilter = document.querySelector('select[name="relationshipStatus"]')?.value;
        const religionFilter = document.querySelector('select[name="religiousLevel"]')?.value;
        const minAge = parseInt(document.querySelector('input[name="minAge"]')?.value) || 0;
        const maxAge = parseInt(document.querySelector('input[name="maxAge"]')?.value) || 120;

        console.log('מחיל פילטרים:', { eventFilter, relationshipFilter, religionFilter, minAge, maxAge });

        const profileCards = document.querySelectorAll('.profile-card');
        console.log('נמצאו', profileCards.length, 'כרטיסים');

        profileCards.forEach(card => {
          let show = true;

          // סינון לפי מצב משפחתי
          if (relationshipFilter) {
            const details = card.querySelectorAll('.profile-detail');
            const status = Array.from(details).find(d => d.textContent.includes('מצב משפחתי'));
            if (!status || !status.textContent.includes(relationshipFilter)) {
              show = false;
            }
          }

          // סינון לפי רמת דתיות
          if (religionFilter) {
            const details = card.querySelectorAll('.profile-detail');
            const religion = Array.from(details).find(d => d.textContent.includes('השקפה'));
            if (!religion || !religion.textContent.includes(religionFilter)) {
              show = false;
            }
          }

          // סינון לפי טווח גילאים
          if (minAge > 0 || maxAge < 120) {
            const details = card.querySelectorAll('.profile-detail');
            const ageDetail = Array.from(details).find(d => d.textContent.includes('גיל:'));
            if (ageDetail) {
              const ageMatch = ageDetail.textContent.match(/\d+/);
              if (ageMatch) {
                const age = parseInt(ageMatch[0]);
                if (age < minAge || age > maxAge) {
                  show = false;
                }
              }
            }
          }

          card.style.display = show ? '' : 'none';
        });

        console.log('סינון הושלם');
      }

      // הוספת מאזין לחיצה לכפתור הסינון
      document.addEventListener('DOMContentLoaded', () => {
        const filterButton = document.querySelector('button[onclick="applyFilters()"]');
        if (filterButton) {
          filterButton.addEventListener('click', applyFilters);
        }
      });
                          const relationshipFilter = document.querySelector('select[name="relationshipStatus"]')?.value;
                          const religionFilter = document.querySelector('select[name="religiousLevel"]')?.value;
                          const minAge = document.querySelector('input[name="minAge"]')?.value;
                          const maxAge = document.querySelector('input[name="maxAge"]')?.value;

                          const profileCards = document.querySelectorAll('.profile-card');

                          profileCards.forEach(card => {
                              let show = true;

                              // סינון לפי מצב משפחתי
                              if (relationshipFilter) {
                                  const details = card.querySelectorAll('.profile-detail');
                                  const status = Array.from(details).find(d => d.textContent.includes('רווק') || 
                                                                             d.textContent.includes('גרוש') || 
                                                                             d.textContent.includes('אלמן'));
                                  if (!status || !status.textContent.includes(relationshipFilter)) {
                                      show = false;
                                  }
                              }

                              // סינון לפי השקפה
                              if (religionFilter) {
                                  const details = card.querySelectorAll('.profile-detail');
                                  const religion = Array.from(details).find(d => d.textContent.includes('השקפה:'));
                                  if (!religion || !religion.textContent.includes(religionFilter)) {
                                      show = false;
                                  }
                              }

                              // סינון לפי גיל
                              const details = card.querySelectorAll('.profile-detail');
                              const ageDetail = Array.from(details).find(d => d.textContent.includes('גיל:'));
                              if (ageDetail) {
                                  const age = parseInt(ageDetail.textContent.match(/\d+/)[0]);
                                  if (minAge && age < parseInt(minAge)) show = false;
                                  if (maxAge && age > parseInt(maxAge)) show = false;
                              }

                              // הצג או הסתר את הכרטיס
                              card.style.display = show ? '' : 'none';
                          });
                      }

                      function resetFilters() {
        document.querySelector('select[name="event"]').value = '';
        document.querySelector('select[name="relationshipStatus"]').value = '';
        document.querySelector('select[name="religiousLevel"]').value = '';
        document.querySelector('input[name="minAge"]').value = '';
        document.querySelector('input[name="maxAge"]').value = '';

        const profileCards = document.querySelectorAll('.profile-card');
        profileCards.forEach(card => {
          card.style.display = '';
        });
      }
                          // איפוס כל שדות הסינון
                          document.querySelectorAll('select, input[type="number"]').forEach(input => {
                              input.value = '';
                          });

                          // הצגת כל הכרטיסים
                          document.querySelectorAll('.profile-card').forEach(card => {
                              card.style.display = '';
                          });
                      }

                      // פונקציה להצגת התראת התאמה
                      function showMatchNotification(userName) {
                      document.getElementById('matchName').textContent = userName;
                      document.getElementById('matchNotification').style.display = 'block';
                      document.getElementById('matchOverlay').style.display = 'block';
                      }

                      // פונקציה להסתרת התראת התאמה
                      function hideMatchNotification() {
                      document.getElementById('matchNotification').style.display = 'none';
                      document.getElementById('matchOverlay').style.display = 'none';
                      }

                      // טיפול בלחיצה על כפתור לייק
                      document.querySelectorAll('.like-btn').forEach(btn => {
                      btn.addEventListener('click', async () => {
                      const targetUserId = btn.getAttribute('data-user-id');
                      const profileCard = btn.closest('.profile-card');
                      const userName = profileCard.querySelector('h3').textContent;
                      const isLiked = btn.classList.contains('liked');

                      try {
                      // שליחת בקשה לשרת
                      const response = await fetch(isLiked ? '/unlike' : '/like', {
                        method: 'POST',
                        headers: {
                          'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                          fromUserId: currentUserId,
                          toUserId: targetUserId
                        })
                      });

                      const data = await response.json();

                      if (data.success) {
                        if (isLiked) {
                          // ביטול לייק
                          btn.classList.remove('liked');
                          btn.textContent = '🤍 תן לייק';

                          // הסר את התג של הלייק
                          const likedBadge = profileCard.querySelector('.badge-liked');
                          if (likedBadge) likedBadge.remove();
                        } else {
                          // נתן לייק
                          btn.classList.add('liked');
                          btn.textContent = '❤️ כבר אהבתי';

                          // הוסף תג של לייק או התאמה
                          if (data.match) {
                            // במקרה של התאמה
                            const imgContainer = profileCard.querySelector('.profile-img-container');
                            const existingBadge = profileCard.querySelector('.badge-liked');
                            if (existingBadge) existingBadge.remove();

                            const matchBadge = document.createElement('span');
                            matchBadge.className = 'badge badge-match';
                            matchBadge.textContent = 'התאמה!';
                            imgContainer.appendChild(matchBadge);

                            // הצג התראת התאמה
                            showMatchNotification(userName);
                          } else {
                            // במקרה של לייק רגיל
                            const imgContainer = profileCard.querySelector('.profile-img-container');

                            const likedBadge = document.createElement('span');
                            likedBadge.className = 'badge badge-liked';
                            likedBadge.textContent = 'לייק';
                            imgContainer.appendChild(likedBadge);
                          }
                        }
                      }
                      } catch (error) {
                      console.error('שגיאה:', error);
                      alert('אירעה שגיאה בעת ביצוע הפעולה');
                      }
                      });
                      });
                      </script>
                      </body>
                      </html>
                      `);
      });
      // דף צפייה בפרופיל של משתמש
      app.get("/view-profile", async (req, res) => {
        try {
          const userId = req.query.userId; // המשתמש הצופה
          const viewId = req.query.viewId; // המשתמש שצופים בו

           // Add view tracking
            if (userId !== viewId) { // Don't track self-views
              const client = await pool.connect();
              try {
                await client.query('BEGIN');

                // בדיקה אם כבר קיימת צפייה באותו היום
                const existingView = await client.query(`
                  SELECT * FROM views 
                  WHERE from_user_id = $1 
                  AND to_user_id = $2 
                  AND DATE(timestamp) = CURRENT_DATE
                `, [userId, viewId]);

                if (existingView.rows.length === 0) {
                  // Save new view to database
                  await client.query(`
                    INSERT INTO views (from_user_id, to_user_id, timestamp, is_admin_view)
                    VALUES ($1, $2, NOW(), $3)
                  `, [userId, viewId, userId === "test123"]);

                  console.log(`✅ נשמרה צפייה חדשה: משתמש ${userId} צפה במשתמש ${viewId}`);
                }

                // Get all views from database without distinct constraint
                const result = await client.query(`
                  SELECT v.*, u.first_name, u.last_name, u.profile_image 
                  FROM views v
                  JOIN users u ON v.from_user_id = u.id
                  WHERE v.to_user_id = $1 
                  ORDER BY v.timestamp DESC
                `, [viewId]);

                // Update memory array with rich data
                const updatedViews = result.rows.map(row => ({
                  fromUserId: row.from_user_id,
                  toUserId: row.to_user_id,
                  timestamp: row.timestamp,
                  isAdminView: row.is_admin_view,
                  viewerName: `${row.first_name} ${row.last_name}`,
                  viewerImage: row.profile_image
                }));

                // Add new views to the existing array instead of clearing it
                const existingViewsForOthers = views.filter(v => v.toUserId !== viewId);
                views.length = 0;
                views.push(...existingViewsForOthers, ...updatedViews);

                await client.query('COMMIT');
              } catch (error) {
                await client.query('ROLLBACK');
                console.error("❌ שגיאה בשמירת/טעינת צפייה:", error);
              } finally {
                client.release();
              }
            }

          console.log(`ניסיון גישה לפרופיל. userId: ${userId}, viewId: ${viewId}`);

          if (!userId || !viewId) {
            console.log("שגיאה: חסרים פרמטרים בצפייה בפרופיל");
            return res.send(`
                      <html dir="rtl">
                      <body>
                        <h1>שגיאה: חסרים פרמטרים</h1>
                        <p>חזור <a href="/users?userId=${userId}">לדף המשתמשים</a></p>
                      </body>
                      </html>
                      `);
          }

          // בדיקה אם קיים מאצ' הדדי
          const currentUser = users.find((u) => u.id === userId);
          const viewUser = users.find((u) => u.id === viewId);

          const hasMatch =
            likes.some((l) => l.fromUserId === userId && l.toUserId === viewId) &&
            likes.some((l) => l.fromUserId === viewId && l.toUserId === userId);

          // בדיקה אם יש התאמה והרשאת צפייה לפי מגדר
          // נשים יכולות לראות פרטי קשר אם יש התאמה
          // גברים צריכים גם מנוי בנוסף להתאמה
          const canViewContact = hasMatch && (currentUser.gender === "female" || currentUser.hasSubscription);

          // נתת לייק?
          const hasLiked = likes.some(
            (l) => l.fromUserId === userId && l.toUserId === viewId,
          );
          if (!viewUser) {
            console.log(`משתמש לא נמצא. viewId: ${viewId}`);
            return res.send(`
                      <html dir="rtl">
                      <body>
                        <h1>שגיאה: משתמש לא נמצא</h1>
                        <p>חזור <a href="/users?userId=${userId}">לדף המשתמשים</a></p>
                      </body>
                      </html>
                      `);
          }

          console.log(`נמצא משתמש: ${viewUser.firstName} ${viewUser.lastName}`);

          // חישוב גיל
          const age = viewUser.dob ? calculateAge(viewUser.dob) : null;

          res.send(`
                      <!DOCTYPE html>
                      <html lang="he" dir="rtl">
                      <head>
                      <meta charset="UTF-8">
                      <meta name="viewport" content="width=device-width, initial-scale=1.0">
                      <title>הפרופיל של ${viewUser.firstName} - הכר/י את החצי השני שלך</title>
                      <style>
                      ${commonStyles}

                      .profile-header {
                      display: flex;
                      flex-direction: column;
                      align-items: center;
                      margin-bottom: 30px;
                      position: relative;
                      }

                      .profile-cover {
                      width: 100%;
                      height: 200px;
                      background-color: var(--accent-color);
                      border-radius: 12px;
                      margin-bottom: -75px;
                      display: flex;
                      justify-content: center;
                      align-items: center;
                      color: var(--primary-color);
                      opacity: 0.8;
                      }

                      .profile-photo-large {
                      width: 300px;
                      height: 300px;
                      border-radius: 8px;
                      border: 4px solid white;
                      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
                      object-fit: cover;
                      z-index: 2;
                      background-color: #f0f0f0;
                      display: flex;
                      justify-content: center;
                      align-items: center;
                      font-size: 72px;
                      margin-bottom: 20px;
                      cursor: pointer;
                      transition: transform 0.3s ease;
                      }

                      .profile-photo-large:hover {
                        transform: scale(1.02);
                      }

                      .modal {
                        display: none;
                        position: fixed;
                        top: 0;
                        left: 0;
                        right: 0;
                        bottom: 0;
                        background: rgba(0,0,0,0.8);
                        z-index: 1000;
                        justify-content: center;
                        align-items: center;
                        padding: 20px;
                      }

                      .modal-content {
                        max-width: 90%;
                        max-height: 90vh;
                        object-fit: contain;
                        border-radius: 8px;
                        cursor: pointer;
                      }

                      .profile-name-header {
                      margin-top: 10px;
                      text-align: center;
                      z-index: 2;
                      }

                      .profile-name-header h1 {
                      margin-bottom: 5px;
                      }

                      .profile-badges {
                      display: flex;
                      gap: 10px;
                      margin-top: 5px;
                      }

                      .profile-badge {
                      display: inline-block;
                      padding: 5px 12px;
                      border-radius: 20px;
                      font-size: 14px;
                      font-weight: bold;
                      }

                      .badge-match {
                      background-color: var(--heart-color);
                      color: white;
                      }

                      .badge-liked {
                      background-color: var(--primary-color);
                      color: white;
                      }

                      .profile-action-buttons {
                      display: flex;
                      gap: 15px;
                      margin-top: 15px;
                      }

                      .profile-section {
                      background-color: var(--form-background);
                      padding: 25px;
                      border-radius: 12px;
                      margin-bottom: 30px;
                      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
                      }

                      .profile-section h2 {
                      margin-top: 0;
                      border-bottom: 1px solid var(--accent-color);
                      padding-bottom: 10px;
                      margin-bottom: 20px;
                      color: var(--primary-color);
                      }

                      .profile-info-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
                      gap: 20px;
                      }

                      .profile-info-item {
                      margin-bottom: 15px;
                      }

                      .profile-info-label {
                      font-weight: bold;
                      display: block;
                      margin-bottom: 5px;
                      color: var(--dark-color);
                      }

                      .profile-info-value {
                      display: block;
                      font-size: 1.1em;
                      }

                      .photo-gallery {
                      display: grid;
                      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
                      gap: 15px;
                      margin-top: 20px;
                      }

                      .gallery-item {
                      border-radius: 10px;
                      overflow: hidden;
                      height: 150px;
                      }

                      .gallery-item img {
                      width: 100%;
                      height: 100%;
                      object-fit: cover;
                      transition: transform 0.3s ease;
                      }

                      .gallery-item:hover img {
                      transform: scale(1.05);
                      }

                      .contact-info {
                      font-size: 1.1em;
                      padding: 15px;
                      background-color: var(--accent-color);
                      border-radius: 8px;
                      border-left: 4px solid var(--primary-color);
                      margin-top: 15px;
                      }

                      @media (max-width: 768px) {
                      .profile-header {
                      margin-bottom: 20px;
                      }

                      .profile-cover {
                      height: 150px;
                      margin-bottom: -65px;
                      }

                      .profile-photo-large {
                      width: 130px;
                      height: 130px;
                      }
                      }
                      </style>
                      </head>
                      <body>
                      <div class="navbar">
                      <a href="/home?userId=${userId}" class="navbar-brand">הכר/י את החצי השני שלך</a>
                      <div class="navbar-nav">
                      <a href="/home?userId=${userId}" class="nav-link">דף הבית</a>
                       <a href="/notifications?userId=${userId}" class="nav-link" style="position: relative;">
              התראות
              ${(() => {
                const unreadCount = systemNotifications.filter(
                  (n) => n.userId === userId && !n.isRead,
                ).length;
                return unreadCount > 0
                  ? `<span style="position: absolute; top: -8px; right: -8px; background-color: red; color: white; 
                  border-radius: 50%; padding: 2px 6px; font-size: 12px; min-width: 20px; text-align: center;">
                    ${unreadCount}
                  </span>`
                  : "";
              })()}
                      <a href="/users?userId=${userId}" class="nav-link">כרטיסי שידוך</a>
                    <a href="/matches?userId=${userId}" 
         class="nav-link ${req.path.includes('/matches') ? 'active' : ''} ${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 'blinking' : ''}" 
         style="${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 
           'background: linear-gradient(45deg, #FFD700, #FFA500); color: #8B4513; box-shadow: 0 2px 5px rgba(255, 215, 0, 0.3);' 
           : ''}">
         המאצ'ים שלי
      </a>


                      <a href="/events?userId=${userId}" class="nav-link">אירועים</a>
                      <a href="/profile?userId=${userId}" class="nav-link">הפרופיל שלי</a>
                      <a href="/login" class="nav-link">התנתק</a>
                      </div>
                      </div>

                      <div class="page-container">
                      <div class="profile-header">
                      <div class="profile-cover">
                      </div>

                      ${
                        viewUser.profileImage
                          ? `<img src="${viewUser.profileImage}" class="profile-photo-large" alt="תמונת פרופיל">`
                          : `<div class="profile-photo-large">👤</div>`
                      }

                      <div class="profile-name-header">
                      <div style="display: flex; align-items: center; justify-content: center; gap: 10px;">
                        <h1>${viewUser.firstName} ${viewUser.lastName.charAt(0)}.</h1>
                        ${viewUser.hasSubscription ? '<span style="background: linear-gradient(45deg, #FFD700, #FFA500); color: #8B4513; padding: 5px 10px; font-weight: bold; border-radius: 20px; box-shadow: 0 2px 5px rgba(255, 215, 0, 0.3);">✨ VIP</span>' : ""}
                      </div>
                      <p>${age ? `${age}` : ""} ${viewUser.city ? ` | ${viewUser.city}` : ""}</p>

                      <div class="profile-badges">
                      ${hasMatch ? '<span class="profile-badge badge-match">יש התאמה! ❤️</span>' : ""}
                      ${hasLiked && !hasMatch ? '<span class="profile-badge badge-liked">נתת לייק 🤍</span>' : ""}
                      </div>

                      <div class="profile-action-buttons">
                      <button id="likeButton" class="button ${hasLiked ? "liked" : ""}" data-user-id="${viewId}">
                        ${hasLiked ? "❤️ כבר אהבתי" : "🤍 תן לייק"}
                      </button>
                      <button class="button" onclick="history.back()">חזרה</button>
                      </div>
                      </div>
                      </div>

            <div class="profile-section">
              <h2>📱 פרטי קשר</h2>
              ${
                !hasMatch
                  ? `
                <div style="text-align: center; padding: 30px; background: linear-gradient(135deg, #ffe8e8 0%, #fff6f6 100%); border-radius: 15px; margin: 20px 0; box-shadow: 0 8px 20px rgba(178, 34, 34, 0.15); border: 2px solid #ffcdd2;">
                  <div style="font-size: 48px; margin-bottom: 15px; animation: pulse 1.5s infinite;">🔒</div>
                  <h3 style="color: var(--heart-color); font-size: 24px; margin-bottom: 15px;"> פרטי הקשר</h3>
                  <p style="font-size: 18px; color: #666; line-height: 1.6;">
                    כדי לראות את פרטי הקשר, צריך שתהיה התאמה הדדית ❤️
                    <br>
                    <strong>תן לייק וחכה שגם הצד השני יתן לך לייק בחזרה!</strong>
                  </p>
                </div>
              `
                  : currentUser.gender === "female" || currentUser.hasSubscription
                    ? `
                <div style="text-align: center; padding: 30px; background: linear-gradient(135deg, #ffe8e8 0%, #fff6f6 100%); border-radius: 15px; margin: 20px 0; box-shadow: 0 8px 20px rgba(178, 34, 34, 0.15); border: 2px solid #ffcdd2;">
                  <div style="font-size: 48px; margin-bottom: 15px; animation: pulse 1.5s infinite;">❤️</div>
                  <h3 style="color: var(--heart-color); font-size: 24px; margin-bottom: 15px;">מזל טוב! יש לכם התאמה הדדית! 🎉</h3>
                  <p style="font-size: 18px; color: #666; margin-bottom: 20px;">הנה פרטי הקשר להתחיל להכיר:</p>
                  <div class="contact-info">
                      ${
                        viewUser.phone
                          ? `
                        <div class="profile-detail-item" style="margin-bottom: 10px;">
                          <strong>📱 טלפון:</strong> 
                          <a href="https://wa.me/972${viewUser.phone.toString().replace(/^0/, "")}" target="_blank" style="color: #25D366; text-decoration: none; font-weight: bold;">
                            ${viewUser.phone} - WhatsApp 💬
                          </a>
                        </div>
                      `
                          : '<div class="profile-detail-item"><strong>📱 טלפון:</strong> לא צוין</div>'
                      }
                      <div class="profile-detail-item"><strong>📧 אימייל:</strong> ${viewUser.email}</div>
                      <div class="profile-detail-item"><strong>👤 פייסבוק:</strong> ${viewUser.facebook}</div>
                      <div class="profile-detail-item"><strong>📸 אינסטגרם:</strong> ${viewUser.instagram}</div>
                    </div>
                </div>
              `
                    : `
                <div style="text-align: center; padding: 30px; background: linear-gradient(135deg, #ffe8e8 0%, #fff6f6 100%); border-radius: 15px; margin: 20px 0; box-shadow: 0 8px 20px rgba(178, 34, 34, 0.15); border: 2px solid #ffcdd2;">
                  <div style="font-size: 48px; margin-bottom: 15px; animation: pulse 1.5s infinite;">❤️</div>
                  <h3 style="color: var(--heart-color); font-size: 24px; margin-bottom: 15px;">מזל טוב! יש לכם התאמה הדדית! 🎉</h3>
                  <p style="font-size: 18px; color: #666; margin-bottom: 20px;">כדי לצפות בפרטי הקשר ולהתחיל להכיר:</p>
                  <button onclick="window.location.href='/subscribe?userId=${userId}'" 
                          style="padding: 12px 20px; border-radius: 8px; border: none; 
                          background: linear-gradient(45deg, #FFD700, #FFA500); color: white; 
                          cursor: pointer; font-weight: bold; box-shadow: 0 2px 5px rgba(255, 215, 0, 0.3);">
                    🔓 פתח את פרטי ההתקשרות
                  </button>
                </div>
              `
              }
            </div>

            <div class="profile-section about-section">
              <h2>✨ קצת עליי</h2>
              <div class="about-content">
                ${viewUser.aboutMe ? 
                  `<p class="about-text">${viewUser.aboutMe}</p>` : 
                  `<p class="no-info">טרם הוסיף/ה מידע על עצמו/ה</p>`
                }
              </div>
              ${
                userId === "test123"
                  ? `
              <div class="admin-controls">
                <p class="subscription-status">סטטוס מנוי: <strong>${viewUser.hasSubscription ? "✅ פעיל" : "❌ לא פעיל"}</strong></p>
                <button onclick="toggleSubscription('${viewId}')" class="button subscription-toggle" style="background: ${viewUser.hasSubscription ? "#dc3545" : "#28a745"}">
                  ${viewUser.hasSubscription ? "❌ בטל מנוי" : "✅ הפעל מנוי"}
                </button>
              </div>
              `
                  : ""
              }
            </div>

            <div class="profile-section details-section">
              <h2>💫 פרטים נוספים</h2>
              <div class="details-grid">
                <div class="detail-card">
                  <div class="detail-icon">👤</div>
                  <div class="detail-content">
                    <h3>פרטים בסיסיים</h3>
                    <div class="detail-item"><strong>גיל:</strong> ${age || "לא צוין"}</div>
                    <div class="detail-item"><strong>גובה:</strong> ${viewUser.height ? viewUser.height + ' ס"מ' : "לא צוין"}</div>
                    <div class="detail-item"><strong>עיר:</strong> ${viewUser.city || "לא צוין"}</div>
                  </div>
                </div>

                <div class="detail-card">
                  <div class="detail-icon">👨‍👩‍👦</div>
                  <div class="detail-content">
                    <h3>מצב אישי</h3>
                    <div class="detail-item"><strong>סטטוס:</strong> ${viewUser.relationshipStatus || "לא צוין"}</div>
                    <div class="detail-item"><strong>ילדים:</strong> ${viewUser.hasChildren || "לא צוין"}</div>
                    <div class="detail-item"><strong>השקפה:</strong> ${viewUser.religiousLevel || "לא צוין"}</div>
                  </div>
                </div>

                <div class="detail-card">
                  <div class="detail-icon">🎓</div>
                  <div class="detail-content">
                    <h3>השכלה ועיסוק</h3>
                    <div class="detail-item"><strong>השכלה:</strong> ${viewUser.education || "לא צוין"}</div>
                    <div class="detail-item"><strong>עיסוק:</strong> ${viewUser.occupation || "לא צוין"}</div>
                    <div class="detail-item"><strong>מוצא:</strong> ${viewUser.ethnicity || "לא צוין"}</div>
                  </div>
                </div>

                <div class="detail-card">
                  <div class="detail-icon">🎯</div>
                  <div class="detail-content">
                    <h3>העדפות והרגלים</h3>
                    <div class="detail-item"><strong>תחביבים:</strong> ${viewUser.hobbies || "לא צוין"}</div>
                    <div class="detail-item"><strong>עישון:</strong> ${viewUser.smoking || "לא צוין"}</div>
                  </div>
                </div>
              </div>
            </div>

            <style>
              .about-section {
                background: linear-gradient(135deg, #fff 0%, #f8f9fa 100%);
                border-radius: 20px;
                padding: 30px;
                margin-bottom: 30px;
              }

              .about-content {
                padding: 20px;
                background: rgba(255, 255, 255, 0.8);
                border-radius: 15px;
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
              }

              .about-text {
                font-size: 1.1em;
                line-height: 1.8;
                color: #333;
              }

              .no-info {
                text-align: center;
                color: #666;
                font-style: italic;
              }

              .details-section {
                background: linear-gradient(135deg, #fff 0%, #f8f9fa 100%);
                border-radius: 20px;
                padding: 30px;
              }

              .details-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
                margin-top: 20px;
              }

              .detail-card {
                background: white;
                border-radius: 15px;
                padding: 20px;
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
                transition: transform 0.3s ease;
              }

              .detail-card:hover {
                transform: translateY(-5px);
              }

              .detail-icon {
                font-size: 24px;
                margin-bottom: 15px;
                color: var(--primary-color);
              }

              .detail-content h3 {
                color: var(--primary-color);
                margin-bottom: 15px;
                font-size: 1.2em;
              }

              .detail-item {
                margin-bottom: 10px;
                padding: 8px;
                border-radius: 8px;
                background: rgba(248, 249, 250, 0.5);
              }

              .admin-controls {
                margin-top: 20px;
                padding: 20px;
                background: rgba(255, 255, 255, 0.9);
                border-radius: 12px;
                border: 1px dashed var(--primary-color);
              }

              .subscription-status {
                margin-bottom: 15px;
                font-size: 1.1em;
              }

              .subscription-toggle {
                width: 100%;
                padding: 12px;
                font-weight: bold;
                transition: all 0.3s ease;
              }
            </style>
          </div>

          <div class="footer">
                <p>&copy; 2025 הכר/י את החצי השני שלך</p>
              <p>
                  <a href="/terms" target="_blank" style="color: var(--primary-color); text-decoration: underline;">
                    תנאי השימוש
                  </a>
                </p>
          </div>

          <div id="imageModal" class="modal" onclick="closeModal()">
            <img id="modalImage" class="modal-content">
          </div>

          <div id="matchNotification" class="match-notification" style="display: none;">
            <h2>מזל טוב! יש לך התאמה! 🎉</h2>
            <div class="match-emoji">❤️</div>
            <p>יש לך התאמה עם <span id="matchName"></span>!</p>
            <p>כעת תוכל/י לראות את פרטי הקשר ולהתחיל לדבר.</p>
            <button class="button" onclick="hideMatchNotification()">אישור</button>
          </div>
          <div id="matchOverlay" class="match-notification-overlay" style="display: none;"></div>

          <script>
            // שומר את מזהה המשתמש הנוכחי
            const currentUserId = "${userId}";
            const viewUserId = "${viewId}";
            const viewUserName = "${viewUser.firstName} ${viewUser.lastName}";

            async function toggleSubscription(targetUserId) {
              try {
                const response = await fetch('/admin/approve-subscription', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    adminId: currentUserId,
                    userId: targetUserId
                  })
                });

                const data = await response.json();
                if (data.success) {
                  alert('סטטוס המנוי עודכן בהצלחה');
                  location.reload();
                } else {
                  alert('שגיאה בעדכון המנוי: ' + data.message);
                }
              } catch (error) {
                alert('שגיאה בעדכון המנוי');
                console.error(error);
              }
            }

      ${
        userId === "test123"
          ? `
            // תוספת תצוגת ניהול מנוי למנהל
            document.write(\`
              <div class="profile-section" style="background-color: #f8f9fa; border: 2px dashed #dc3545;">
                <h2>🔒 ניהול מנוי (גישת מנהל)</h2>
                <p>סטטוס מנוי נוכחי: <strong>${viewUser.hasSubscription ? "✅ פעיל" : "❌ לא פעיל"}</strong></p>
                <button onclick="toggleSubscription('${viewId}')" class="button" style="background: ${viewUser.hasSubscription ? "#dc3545" : "#28a745"}">
                  ${viewUser.hasSubscription ? "❌ בטל מנוי" : "✅ הפעל מנוי"}
                </button>
              </div>
            \`);
      `
          : ""
      }

            // פונקציה להצגת התראת התאמה
            function showMatchNotification(userName) {
              document.getElementById('matchName').textContent = userName;
              document.getElementById('matchNotification').style.display = 'block';
              document.getElementById('matchOverlay').style.display = 'block';
            }

            // פונקציה להסתרת התראת התאמה
            function hideMatchNotification() {
              document.getElementById('matchNotification').style.display = 'none';
              document.getElementById('matchOverlay').style.display = 'none';
              // רענן את הדף כדי לראות את פרטי הקשר
              location.reload();
            }

            // טיפול בלחיצה על כפתור לייק
            // טיפול בהגדלת תמונת פרופיל
          const profilePhoto = document.querySelector('.profile-photo-large');
          const modal = document.getElementById('imageModal');
          const modalImg = document.getElementById('modalImage');

          if (profilePhoto) {
            profilePhoto.addEventListener('click', () => {
              modal.style.display = "flex";
              if (profilePhoto.tagName === 'IMG') {
                modalImg.src = profilePhoto.src;
              }
            });
          }

          function closeModal() {
            modal.style.display = "none";
          }

          const likeButton = document.getElementById('likeButton');
            if (likeButton) {
              likeButton.addEventListener('click', async () => {
                const isLiked = likeButton.classList.contains('liked');

                try {
                  // שליחת בקשה לשרת
                  const response = await fetch(isLiked ? '/unlike' : '/like', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      fromUserId: currentUserId,
                      toUserId: viewUserId
                    })
                  });

                  const data = await response.json();

                  if (data.success) {
                    if (isLiked) {
                      // ביטול לייק
                      likeButton.classList.remove('liked');
                      likeButton.textContent = '🤍 תן לייק';

                      // מחליף את הדף כדי להסיר את התג
                      location.reload();
                    } else {
                      // נתן לייק
                      likeButton.classList.add('liked');
                      likeButton.textContent = '❤️ כבר אהבתי';

                      if (data.match) {
                        // במקרה של התאמה
                        showMatchNotification(viewUserName);
                      } else {
                        // במקרה של לייק רגיל, רק לרענן את הדף
                        location.reload();
                      }
                    }
                  }
                } catch (error) {
                  console.error('שגיאה:', error);
                  alert('אירעה שגיאה בעת ביצוע הפעולה');
                }
              });
            }
            async function toggleSubscription(targetUserId) {
              try {
              console.log('clicked');
                const response = await fetch('/admin/approve-subscription', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    adminId: "${userId}",
                    userId: targetUserId
                  })
                });

                const data = await response.json();
                if (data.success) {
                  alert('סטטוס המנוי עודכן בהצלחה');
                  location.reload();
                } else {
                  alert('שגיאה בעדכון המנוי: ' + data.message);
                }
              } catch (error) {
                alert('שגיאה בעדכון המנוי');
                console.error(error);
              }
            }
          </script>
          </body>
          </html>
          `);
        } catch (error) {
          console.error("שגיאה בדף צפייה בפרופיל:", error);
          res.send(`
              <html dir="rtl">
                <body>
                  <h1>שגיאה</h1>
                  <p>אירעה שגיאה בעיבוד הדף: ${error.message}</p>
                  <p>חזור <a href="/users?userId=${req.query.userId}">לדף המשתמשים</a></p>
                </body>
              </html>
            `);
        }
      });

      // נתיב לעדכון תאריך אירוע
      app.post("/update-event-date", express.json(), async (req, res) => {
        const { eventId, newDate } = req.body;
        const client = await pool.connect();

        try {
          await client.query('BEGIN');

          // עדכון בדאטאבייס
          await client.query(
            'UPDATE events SET date = $1 WHERE id = $2',
            [newDate, eventId]
          );

          // עדכון במערך בזיכרון
          const event = events.find(e => e.id === eventId);
          if (event) {
            event.date = newDate;
          }

          await client.query('COMMIT');
          res.json({ success: true, message: "תאריך האירוע עודכן בהצלחה" });

        } catch (error) {
          await client.query('ROLLBACK');
          console.error("שגיאה בעדכון תאריך האירוע:", error);
          res.status(500).json({ success: false, message: "שגיאה בעדכון תאריך האירוע" });
        } finally {
          client.release();
        }
      });

      // נתיב להרשמה לאירוע
      app.post("/register-event", express.json(), async (req, res) => {
        const { userId, eventId } = req.body;
        const client = await pool.connect();

        try {
          await client.query('BEGIN');

          const eventResult = await client.query('SELECT * FROM events WHERE id = $1', [eventId]);
          if (eventResult.rows.length === 0) {
            return res.status(404).json({ success: false, message: "אירוע לא נמצא" });
          }

          const event = events.find(e => e.id === eventId);

          // בדיקה אם כבר רשום
          const participantExists = await client.query(
            'SELECT * FROM event_participants WHERE event_id = $1 AND user_id = $2 AND status = $3',
            [eventId, userId, 'approved']
          );

          if (participantExists.rows.length > 0) {
            return res.json({ 
              success: false, 
              message: "כבר רשום לאירוע זה",
              buttonState: {
                text: "✓ רשום לאירוע",
                disabled: true,
                class: "registered"
              }
            });
          }

          // בדיקה אם ממתין לאישור
          const pendingExists = await client.query(
            'SELECT * FROM event_participants WHERE event_id = $1 AND user_id = $2 AND status = $3',
            [eventId, userId, 'pending']
          );

          if (pendingExists.rows.length > 0) {
            return res.json({ 
              success: false, 
              message: "בקשתך כבר ממתינה לאישור",
              buttonState: {
                text: "ממתין לאישור...",
                disabled: true,
                class: "pending"
              }
            });
          }

          // הוספת משתתף ממתין
          await client.query(
            'INSERT INTO event_participants (event_id, user_id, status, created_at) VALUES ($1, $2, $3, NOW())',
            [eventId, userId, 'pending']
          );

          // עדכון המערך בזיכרון
          if (!event.pendingParticipants) event.pendingParticipants = [];
          event.pendingParticipants.push(userId);

          await client.query('COMMIT');

          saveUsersData();

          res.json({ 
            success: true, 
            message: "בקשתך נשלחה וממתינה לאישור",
            buttonState: {
              text: "ממתין לאישור...",
              disabled: true,
              class: "pending"
            },
            participantsCount: event.participants.length + 74
          });
        } catch (error) {
          await client.query('ROLLBACK');
          console.error("שגיאה בהרשמה לאירוע:", error);
          res.status(500).json({ success: false, message: "שגיאה בהרשמה לאירוע" });
        } finally {
          client.release();
        }
      });

      app.post("/unregister-event", express.json(), async (req, res) => {
        const { userId, eventId } = req.body;
        const client = await pool.connect();

        try {
          await client.query('BEGIN');

          const event = events.find(e => e.id === eventId);
          if (!event) {
            return res.status(404).json({ success: false, message: "אירוע לא נמצא" });
          }

          // מחיקת המשתתף מהדאטאבייס
          const result = await client.query(
            'DELETE FROM event_participants WHERE event_id = $1 AND user_id = $2 RETURNING *',
            [eventId, userId]
          );

          if (result.rowCount > 0) {
            // עדכון המערך בזיכרון
            const participantIndex = event.participants.indexOf(userId);
            if (participantIndex > -1) {
              event.participants.splice(participantIndex, 1);
            }

            const pendingIndex = event.pendingParticipants.indexOf(userId);
            if (pendingIndex > -1) {
              event.pendingParticipants.splice(pendingIndex, 1);
            }

            await client.query('COMMIT');
            saveUsersData();

            res.json({ 
              success: true, 
              message: "ההרשמה בוטלה בהצלחה",
              buttonState: {
                text: "הירשם לאירוע",
                disabled: false,
                class: ""
              },
              participantsCount: event.participants.length + 74
            });
          } else {
            await client.query('ROLLBACK');
            res.json({ 
              success: false, 
              message: "לא רשום לאירוע זה",
              buttonState: {
                text: "הירשם לאירוע",
                disabled: false,
                class: ""
              }
            });
          }
        } catch (error) {
          await client.query('ROLLBACK');
          console.error("שגיאה בביטול הרשמה:", error);
          res.status(500).json({ success: false, message: "שגיאה בביטול ההרשמה" });
        } finally {
          client.release();
        }
      });

      // נתיב לאישור בקשת הרשמה
      app.post("/approve-registration", express.json(), async (req, res) => {
        const { adminId, userId, eventId, approve } = req.body;
        const client = await pool.connect();

        try {
          await client.query('BEGIN');

          // וידוא שזה המשתמש המנהל
          if (adminId !== "test123") {
            return res.status(403).json({ success: false, message: "אין הרשאה" });
          }

          const event = events.find((e) => e.id === eventId);
          if (!event) {
            return res.status(404).json({ success: false, message: "אירוע לא נמצא" });
          }

          // מצא את המשתמש ברשימת הממתינים
          const pendingIndex = event.pendingParticipants.indexOf(userId);
          if (pendingIndex === -1) {
            return res.status(404).json({ success: false, message: "בקשת הרשמה לא נמצאה" });
          }

          // הסר מרשימת הממתינים במערך
          event.pendingParticipants.splice(pendingIndex, 1);

          if (approve) {
            // עדכן סטטוס בדאטאבייס ל-approved
            await client.query(`
              UPDATE event_participants 
              SET status = 'approved' 
              WHERE event_id = $1 AND user_id = $2
            `, [eventId, userId]);

            // הוסף לרשימת המשתתפים במערך
            if (!event.participants.includes(userId)) {
              event.participants.push(userId);
            }
          } else {
            // מחק את הבקשה מהדאטאבייס אם נדחתה
            await client.query(`
              DELETE FROM event_participants 
              WHERE event_id = $1 AND user_id = $2
            `, [eventId, userId]);
          }

          await client.query('COMMIT');

          // שמור את השינויים בקובץ
          saveUsersData();

          res.json({ 
            success: true, 
            message: approve ? "בקשת ההרשמה אושרה" : "בקשת ההרשמה נדחתה",
            participantsCount: event.participants.length + 74
          });

        } catch (error) {
          await client.query('ROLLBACK');
          console.error("שגיאה באישור הרשמה:", error);
          res.status(500).json({ success: false, message: "שגיאה באישור ההרשמה" });
        } finally {
          client.release();
        }
      });

      // נתיב לביטול הרשמה לאירוע
      app.post("/unregister-event", express.json(), (req, res) => {
        const { userId, eventId } = req.body;

        try {
          const event = events.find((e) => e.id === eventId);
          if (!event) {
            return res.status(404).json({ success: false, message: "אירוע לא נמצא" });
          }

          const participantIndex = event.participants.indexOf(userId);
          if (participantIndex > -1) {
            event.participants.splice(participantIndex, 1);
            res.json({ success: true, message: "ההרשמה בוטלה בהצלחה" });
          } else {
            res.status(400).json({ success: false, message: "לא רשום לאירוע זה" });
          }
        } catch (error) {
          console.error("שגיאה בביטול הרשמה:", error);
          res.status(500).json({ success: false, message: "שגיאה בביטול ההרשמה" });
        }
      });

      // Helper functions for data management
      const BACKUP_DIR = "./data/backups";
      const DATA_DIR = "./data";
      const MAX_BACKUPS = 15;
      const BACKUP_RETENTION_DAYS = 14;

      function loadData(filename) {
        try {
          // נסה לטעון את הקובץ הראשי
          const data = JSON.parse(fs.readFileSync(filename, "utf8"));
          console.log("✅ נתונים נטענו בהצלחה מהקובץ הראשי:", filename);
          return data;
        } catch (mainError) {
          console.error("❌ שגיאה בטעינת הקובץ הראשי:", mainError);

          try {
            // נסה לטעון מהגיבוי הרגיל
            const backupFilename = `${filename}.backup`;
            const backupData = JSON.parse(fs.readFileSync(backupFilename, "utf8"));
            console.log("🔄 משחזר נתונים מגיבוי רגיל:", backupFilename);

            // שחזר את הקובץ הראשי מהגיבוי
            fs.writeFileSync(filename, JSON.stringify(backupData, null, 2), "utf8");
            console.log("✅ הקובץ הראשי שוחזר בהצלחה מגיבוי רגיל");

            return backupData;
          } catch (regularBackupError) {
            console.error("❌ שגיאה בשחזור מגיבוי רגיל:", regularBackupError);

            try {
              // נסה לטעון את הגיבוי האחרון מתיקיית הגיבויים
              if (!fs.existsSync(BACKUP_DIR)) {
                console.error("❌ תיקיית גיבויים לא קיימת");
                return null;
              }

              const backups = fs
                .readdirSync(BACKUP_DIR)
                .filter((f) => f.startsWith(filename.replace(".json", "")))
                .sort(
                  (a, b) =>
                    fs.statSync(`${BACKUP_DIR}/${b}`).mtime.getTime() -
                    fs.statSync(`${BACKUP_DIR}/${a}`).mtime.getTime(),
                );

              if (backups.length === 0) {
                console.error("❌ לא נמצאו גיבויים בתיקייה");
                return null;
              }

              const latestBackup = `${BACKUP_DIR}/${backups[0]}`;
              const latestBackupData = JSON.parse(
                fs.readFileSync(latestBackup, "utf8"),
              );
              console.log("🔄 משחזר נתונים מהגיבוי האחרון:", latestBackup);

              // שחזר את הקובץ הראשי מהגיבוי האחרון
              fs.writeFileSync(
                filename,
                JSON.stringify(latestBackupData, null, 2),
                "utf8",
              );
              console.log("✅ הקובץ הראשי שוחזר בהצלחה מהגיבוי האחרון");

              return latestBackupData;
            } catch (datedBackupError) {
              console.error("❌ שגיאה בשחזור מהגיבוי האחרון:", datedBackupError);
              return null;
            }
          }
        }
      }

      function saveData(data, filename) {
        console.log("🔄 מתחיל תהליך שמירת נתונים...");

        try {
          // וולידציה מורחבת של הנתונים
          if (!validateData(data)) {
            throw new Error("נתונים לא תקינים");
          }

          // יצירת תיקיית גיבויים עם טיפול בשגיאות
          try {
            if (!fs.existsSync(BACKUP_DIR)) {
              fs.mkdirSync(BACKUP_DIR, { recursive: true });
              console.log("✅ תיקיית גיבויים נוצרה:", BACKUP_DIR);
            }
          } catch (mkdirError) {
            console.error("❌ שגיאה ביצירת תיקיית גיבויים:", mkdirError);
            throw mkdirError;
          }

          // שמירת הקובץ הראשי בצורה בטוחה עם גיבוי זמני
          const tempFile = `${filename}.temp`;
          try {
            fs.writeFileSync(tempFile, JSON.stringify(data, null, 2), "utf8");
            fs.renameSync(tempFile, filename);
            console.log("✅ נתונים נשמרו בהצלחה בקובץ הראשי:", filename);
          } catch (mainSaveError) {
            console.error("❌ שגיאה בשמירת הקובץ הראשי:", mainSaveError);
            if (fs.existsSync(tempFile)) {
              fs.unlinkSync(tempFile);
            }
            throw mainSaveError;
          }

          // שמירת גיבוי רגיל עם טיפול בשגיאות
          const backupFilename = `${filename}.backup`;
          try {
            fs.writeFileSync(backupFilename, JSON.stringify(data, null, 2), "utf8");
            console.log("✅ נתונים גובו בהצלחה בגיבוי רגיל:", backupFilename);
          } catch (backupError) {
            console.error("❌ שגיאה בשמירת גיבוי רגיל:", backupError);
            throw backupError;
          }

          // שמירת גיבוי מתוארך עם טיפול בשגיאות
          const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
          const datedBackup = `${BACKUP_DIR}/${filename.replace(".json", "")}_${timestamp}.json`;
          try {
            fs.writeFileSync(datedBackup, JSON.stringify(data, null, 2), "utf8");
            console.log("✅ נשמר גיבוי מתוארך:", datedBackup);
          } catch (datedBackupError) {
            console.error("❌ שגיאה בשמירת גיבוי מתוארך:", datedBackupError);
            throw datedBackupError;
          }

          // ניהול גיבויים ישנים
          const backups = fs
            .readdirSync(BACKUP_DIR)
            .filter((f) => f.startsWith(filename.replace(".json", "")))
            .map((f) => ({
              name: f,
              path: `${BACKUP_DIR}/${f}`,
              mtime: fs.statSync(`${BACKUP_DIR}/${f}`).mtime,
            }))
            .sort((a, b) => b.mtime.getTime() - a.mtime.getTime());

          const twoWeeksAgo = new Date();
          twoWeeksAgo.setDate(twoWeeksAgo.getDate() - BACKUP_RETENTION_DAYS);

          // ניהול מספר הגיבויים וגיל הגיבויים
          backups.forEach((backup, index) => {
            const shouldDelete =
              index >= MAX_BACKUPS || // מחק אם יש יותר מדי גיבויים
              backup.mtime < twoWeeksAgo; // מחק אם הגיבוי ישן מדי

            if (shouldDelete) {
              try {
                fs.unlinkSync(backup.path);
                console.log(
                  `🗑️ נמחק גיבוי ישן: ${backup.name} מתאריך ${backup.mtime.toLocaleDateString()}`,
                );
              } catch (deleteError) {
                console.error(
                  `❌ שגיאה במחיקת גיבוי ישן: ${backup.name}`,
                  deleteError,
                );
              }
            }
          });

          return true;
        } catch (error) {
          console.error("❌ שגיאה בשמירת נתונים:", error);
          return false;
        }
      }

      function validateData(data) {
        if (!data || typeof data !== "object") return false;
        if (!Array.isArray(data.users)) return false;
        if (!Array.isArray(data.likes)) return false;
        if (!Array.isArray(data.events)) return false;
        if (!data.lastUpdate) return false;

        return true;
      }

      function loadData(filename) {
        console.log("🔄 מנסה לטעון נתונים מ:", filename);

        try {
          const data = JSON.parse(fs.readFileSync(filename, "utf8"));
          if (!validateData(data)) {
            throw new Error("מבנה נתונים לא תקין");
          }
          console.log("✅ נתונים נטענו בהצלחה מהקובץ הראשי:", filename);
          return data;
        } catch (mainError) {
          console.error("❌ שגיאה בטעינת הקובץ הראשי:", mainError);

          try {
            const backupFilename = `${filename}.backup`;
            console.log("🔄 מנסה לטעון מגיבוי רגיל:", backupFilename);
            const backupData = JSON.parse(fs.readFileSync(backupFilename, "utf8"));

            if (!validateData(backupData)) {
              throw new Error("מבנה נתונים לא תקין בגיבוי");
            }

            console.log("✅ נתונים נטענו בהצלחה מגיבוי רגיל");
            fs.writeFileSync(filename, JSON.stringify(backupData, null, 2), "utf8");

            return backupData;
          } catch (backupError) {
            console.error("❌ שגיאה בשחזור מגיבוי רגיל:", backupError);

            // נסה לטעון מהגיבוי האחרון בתיקיית הגיבויים
            try {
              if (!fs.existsSync(BACKUP_DIR)) {
                throw new Error("תיקיית גיבויים לא קיימת");
              }

              const backups = fs
                .readdirSync(BACKUP_DIR)
                .filter((f) => f.startsWith(filename.replace(".json", "")))
                .sort(
                  (a, b) =>
                    fs.statSync(`${BACKUP_DIR}/${b}`).mtime.getTime() -
                    fs.statSync(`${BACKUP_DIR}/${a}`).mtime.getTime(),
                );

              if (backups.length === 0) {
                throw new Error("לא נמצאו גיבויים בתיקייה");
              }

              const latestBackup = `${BACKUP_DIR}/${backups[0]}`;
              console.log("🔄 מנסה לטעון מהגיבוי האחרון:", latestBackup);
              const latestBackupData = JSON.parse(
                fs.readFileSync(latestBackup, "utf8"),
              );

              if (!validateData(latestBackupData)) {
                throw new Error("מבנה נתונים לא תקין בגיבוי האחרון");
              }

              console.log("✅ נתונים נטענו בהצלחה מהגיבוי האחרון");
              fs.writeFileSync(
                filename,
                JSON.stringify(latestBackupData, null, 2),
                "utf8",
              );

              return latestBackupData;
            } catch (datedBackupError) {
              console.error("❌ שגיאה בשחזור מהגיבוי האחרון:", datedBackupError);
              console.error("⚠️ לא ניתן לשחזר נתונים מאף מקור");
              return null;
            }
          }
        }
      }

      // פונקציה לשמירת נתוני משתמשים - משתמשת רק במסד נתונים
      async function saveUsersData() {
        const client = await pool.connect();
        try {
          await client.query('BEGIN');

          // הנתונים כבר נשמרים בדאטאבייס בזמן אמת
          // אין צורך בשמירה נוספת

          await client.query('COMMIT');
          return true;
        } catch (error) {
          await client.query('ROLLBACK');
          console.error("שגיאה בשמירת נתונים:", error);
          return false;
        } finally {
          client.release();
        }
      }

      // פונקציה לטעינת נתוני משתמשים בהפעלת השרת
      async function initializeData() {
        try {
          // יצירת תיקיות אם לא קיימות
          if (!fs.existsSync(DATA_DIR)) {
            fs.mkdirSync(DATA_DIR, { recursive: true });
            console.log("✅ תיקיית נתונים קבועה נוצרה:", DATA_DIR);
          }
          if (!fs.existsSync(BACKUP_DIR)) {
            fs.mkdirSync(BACKUP_DIR, { recursive: true });
            console.log("✅ תיקיית גיבויים קבועה נוצרה:", BACKUP_DIR);
          }

          // נסה לטעון נתונים קיימים
          const data = await loadData(DATA_DIR + "/users_data.json");
          if (data) {
            users.length = 0;
            likes.length = 0;
            events.length = 0;

            users.push(...data.users);
            likes.push(...data.likes);
            if (data.events) events.push(...data.events);
          }

          // הגדר שמירה אוטומטית כל דקה
          setInterval(saveUsersData, 60 * 1000);
        } catch (error) {
          console.error("❌ שגיאה באתחול הנתונים:", error);
        }
      }

      async function saveUsersData() {
        const client = await pool.connect();
        try {
          await client.query('BEGIN');

          // The data is already being saved to the database in real-time
          // No need for additional saving

          await client.query('COMMIT');
          return true;
        } catch (error) {
          await client.query('ROLLBACK');
          console.error("שגיאה בשמירת נתונים:", error);
          return false;
        } finally {
          client.release();
        }
      }

      // קרא לפונקציה בהפעלת השרת
      initializeData();

      function loadUsersData() {
        const data = loadData("users_data.json");
        if (data) {
          users.length = 0;
          likes.length = 0;
          events.length = 0;

          users.push(...data.users);
          likes.push(...data.likes);
          if (data.events) events.push(...data.events);

          // הסר כפילויות על ידי שמירת משתמשים ייחודיים לפי ID
          const uniqueUsers = Array.from(
            new Map(users.map((user) => [user.id, user])).values(),
          );
          users.length = 0;
          users.push(...uniqueUsers);

          console.log("📊 סטטיסטיקות נתונים:");
          console.log(`- משתמשים: ${users.length}`);
          console.log(`- לייקים: ${likes.length}`);
          console.log(`- אירועים: ${events.length}`);
          console.log("נתוני המשתמשים נטענו בהצלחה");
          return true;
        }
        return false;
      }

      // טען נתונים בהפעלת השרת
      async function loadInitialData() {
        try {
          const client = await pool.connect();

          // Load notifications
          const notificationsResult = await client.query('SELECT * FROM notifications ORDER BY created_at DESC');
          systemNotifications.length = 0;
          systemNotifications.push(...notificationsResult.rows.map(row => ({
            id: row.id,
            userId: row.user_id,
            type: row.type,
            title: row.title,
            content: row.content,
            date: row.created_at,
            isRead: row.is_read
          })));

          // Load users with proper field mapping
          const usersResult = await client.query('SELECT * FROM users');
          users.length = 0;
          users.push(...usersResult.rows.map(row => ({
            id: row.id,
            firstName: row.first_name,
            lastName: row.last_name,
            email: row.email,
            password: row.password,
            gender: row.gender,
            relationshipStatus: row.relationship_status,
            hasChildren: row.has_children,
            dob: row.dob,
            height: row.height,
            aboutMe: row.about_me,
            lookingFor: row.looking_for,
            religiousLevel: row.religious_level,
            city: row.city,
            phone: row.phone,
            facebook: row.facebook,
            instagram: row.instagram,
            profileImage: row.profile_image,
            hasSubscription: row.has_subscription,
            isApproved: row.is_approved,
            createdAt: row.created_at
          })));

          // Load likes
          const likesResult = await client.query('SELECT * FROM likes');
          likes.length = 0;
          likes.push(...likesResult.rows.map(row => ({
            id: row.id,
            fromUserId: row.from_user_id,
            toUserId: row.to_user_id,
            timestamp: row.created_at
          })));

          // Load views
          const viewsResult = await client.query('SELECT * FROM views');
          views.length = 0;
          views.push(...viewsResult.rows.map(row => ({
            fromUserId: row.from_user_id,
            toUserId: row.to_user_id,
            timestamp: row.timestamp,
            isAdminView: row.is_admin_view
          })));

          // Load events
          const eventsResult = await client.query('SELECT * FROM events');
          events.length = 0;
          events.push(...eventsResult.rows.map(event => ({
            ...event,
            participants: [],
            pendingParticipants: []
          })));

          // Load event participants
          const participantsResult = await client.query('SELECT * FROM event_participants WHERE status = $1', ['approved']);
          participantsResult.rows.forEach(row => {
            const event = events.find(e => e.id === row.event_id);
            if (event) {
              event.participants = event.participants || [];
              event.participants.push(row.user_id);
            }
          });

          // Load pending participants
          const pendingResult = await client.query('SELECT * FROM event_participants WHERE status = $1', ['pending']);
          pendingResult.rows.forEach(row => {
            const event = events.find(e => e.id === row.event_id);
            if (event) {
              event.pendingParticipants = event.pendingParticipants || [];
              event.pendingParticipants.push(row.user_id);
            }
          });

          client.release();
          console.log('✅ נתונים נטענו בהצלחה מהדאטאבייס');
        } catch (dbError) {
          console.error('❌ שגיאה בטעינה מהדאטאבייס:', dbError);
          // אם נכשל, נסה לטעון מהקובץ המקומי
          loadUsersData();
        }
      }

      loadInitialData();

      // הוספת נתיב חדש לקבלת נתוני משתמשים (רק למנהל)
      app.get("/admin/users-data", (req, res) => {
        const userId = req.query.userId;

        // בדיקה שזה באמת המנהל
        if (userId !== "test123") {
          return res.status(403).send("אין הרשאות גישה");
        }

        try {
          saveUsersData(); // שמירת נתונים עדכניים
          res.download("users_data.json"); // שליחת הקובץ להורדה
        } catch (error) {
          res.status(500).send("שגיאה בייצוא הנתונים");
        }
      });

      // שמירת נתונים בכל הרשמה חדשה
      app.post("/signup", upload.single("profileImage"), async (req, res) => {
        try {
          // ... הקוד הקיים של ההרשמה ...

          // שמירת הנתונים לאחר כל הרשמה
          await saveUsersData();

          // המשך הקוד הקיים...
        } catch (error) {
          console.error("שגיאה:", error);
          res.status(500).send("שגיאה בתהליך ההרשמה");
        }
      });

      // פקודה להתחלת השרת
      // נתיב לאישור מנוי על ידי מנהל
      app.post("/admin/approve-subscription", express.json(), async (req, res) => {
        try {
          const { adminId, userId } = req.body;
          console.log("קיבלתי בקשה לעדכון מנוי:", { adminId, userId });

          if (adminId !== "test123") {
            console.log("דחיית בקשה - אין הרשאת מנהל");
            return res.status(403).json({ success: false, message: "אין הרשאה" });
          }

          const user = users.find((u) => u.id === userId);
          if (!user) {
            console.log("משתמש לא נמצא:", userId);
            return res.status(404).json({ success: false, message: "משתמש לא נמצא" });
          }

          // Toggle subscription status
          user.hasSubscription = !user.hasSubscription;
          console.log("עדכון סטטוס מנוי:", {
            userId,
            hasSubscription: user.hasSubscription,
          });

          // Update subscription in database
          const client = await pool.connect();
          try {
            await client.query('UPDATE users SET has_subscription = $1 WHERE id = $2', [user.hasSubscription, userId]);
            console.log("✅ סטטוס מנוי עודכן בדאטאבייס");
          } catch (dbError) {
            console.error("❌ שגיאה בעדכון סטטוס מנוי בדאטאבייס:", dbError);
          } finally {
            client.release();
          }

          // Save changes to file
          saveUsersData();

          res.json({
            success: true,
            message: user.hasSubscription
              ? "המנוי הופעל בהצלחה"
              : "המנוי בוטל בהצלחה",
            hasSubscription: user.hasSubscription,
          });
        } catch (error) {
          console.error("שגיאה בעדכון מנוי:", error);
          res.status(500).json({ success: false, message: "שגיאה בעדכון המנוי" });
        }
      });

      // נתיב לאישור מנוי על ידי מנהל
      // נתיב לאישור משתמש
      app.post("/admin/approve-user", express.json(), (req, res) => {
        const { adminId, userId } = req.body;

        if (adminId !== "test123") {
          return res.status(403).json({ success: false, message: "אין הרשאה" });
        }

        const user = users.find((u) => u.id === userId);
        if (!user) {
          return res.status(404).json({ success: false, message: "משתמש לא נמצא" });
        }

        user.isApproved = true;
        saveUsersData();
        res.json({ success: true, message: "המשתמש אושר בהצלחה" });
      });

      // נתיב למחיקת משתמש
      app.post("/admin/delete-registered-user", express.json(), async (req, res) => {
        const { adminId, userId } = req.body;

        if (adminId !== "test123") {
          return res.status(403).json({ success: false, message: "אין הרשאה" });
        }

        if (userId === "test123") {
          return res.status(403).json({ success: false, message: "לא ניתן למחוק את חשבון המנהל" });
        }

        const client = await pool.connect();
        try {
          await client.query('BEGIN');

          // מחיקת כל הלייקים של המשתמש
          await client.query('DELETE FROM likes WHERE from_user_id = $1 OR to_user_id = $1', [userId]);

          // מחיקת כל הצפיות של המשתמש
          await client.query('DELETE FROM views WHERE from_user_id = $1 OR to_user_id = $1', [userId]);

          // מחיקת השתתפויות באירועים
          await client.query('DELETE FROM event_participants WHERE user_id = $1', [userId]);

          // מחיקת המשתמש עצמו
          await client.query('DELETE FROM users WHERE id = $1', [userId]);

          // עדכון המערכים בזיכרון בצורה בטוחה
          const userIndex = users.findIndex(u => u.id === userId);
          if (userIndex > -1) {
            users.splice(userIndex, 1);
          }

          // עדכון מערכי הלייקים והצפיות
          const updatedLikes = likes.filter(l => l.fromUserId !== userId && l.toUserId !== userId);
          const updatedViews = views.filter(v => v.fromUserId !== userId && v.toUserId !== userId);

          // עדכון בטוח של המערכים
          while(likes.length) likes.pop();
          while(views.length) views.pop();

          updatedLikes.forEach(like => likes.push(like));
          updatedViews.forEach(view => views.push(view));

          // עדכון האירועים
          events.forEach(event => {
            if (event.participants) {
              event.participants = event.participants.filter(p => p !== userId);
            }
            if (event.pendingParticipants) {
              event.pendingParticipants = event.pendingParticipants.filter(p => p !== userId);
            }
          });

          await client.query('COMMIT');
          await saveUsersData();

          res.json({ success: true, message: "המשתמש נמחק בהצלחה" });
        } catch (error) {
          await client.query('ROLLBACK');
          console.error("שגיאה במחיקת משתמש:", error);
          res.status(500).json({ success: false, message: "שגיאה במחיקת המשתמש" });
        } finally {
          client.release();
        }
      });
      // נתיב לעדכון אירוע קיים
      app.post("/admin/update-event", upload.single("eventImage"), async (req, res) => {
        const { adminId, eventId, name, date, location, description } = req.body;

        if (adminId !== "test123") {
          return res.status(403).json({ success: false, message: "אין הרשאה" });
        }

        try {
          const eventIndex = events.findIndex(e => e.id === eventId);
          if (eventIndex === -1) {
            return res.status(404).json({ success: false, message: "אירוע לא נמצא" });
          }

          // עדכון האירוע בזיכרון
          const updatedEvent = {
            ...events[eventIndex],
            name: name || events[eventIndex].name,
            date: date || events[eventIndex].date,
            location: location || events[eventIndex].location,
            description: description || events[eventIndex].description,
            image: req.file ? `/uploads/${req.file.filename}` : events[eventIndex].image
          };

          events[eventIndex] = updatedEvent;

          // עדכון במסד הנתונים
          const client = await pool.connect();
          try {
            await client.query('BEGIN');

            await client.query(`
              UPDATE events 
              SET name = $1, date = $2, location = $3, description = $4, image = $5
              WHERE id = $6
            `, [updatedEvent.name, updatedEvent.date, updatedEvent.location, 
                updatedEvent.description, updatedEvent.image, eventId]);

            await client.query('COMMIT');
            console.log("✅ אירוע עודכן בהצלחה בדאטאבייס");

            // שמירת השינויים בקובץ
            saveUsersData();

            res.json({ 
              success: true, 
              message: "האירוע עודכן בהצלחה",
              event: updatedEvent
            });
          } catch (dbError) {
            await client.query('ROLLBACK');
            console.error("❌ שגיאה בעדכון אירוע בדאטאבייס:", dbError);
            throw dbError;
          } finally {
            client.release();
          }
        } catch (error) {
          console.error("שגיאה בעדכון אירוע:", error);
          res.status(500).json({ success: false, message: "שגיאה בעדכון האירוע" });
        }
      });

      // נתיב ליצירת אירוע חדש
      app.post("/admin/create-event", upload.single("eventImage"), async (req, res) => {
        try {
          const { adminId, eventName: name, eventDate: date, eventLocation: location, eventDescription: description } = req.body;

          if (adminId !== "test123") {
            return res.status(403).json({ success: false, message: "אין הרשאה" });
          }

          if (!name || !date || !location) {
            return res.status(400).json({ success: false, message: "חסרים פרטים חובה" });
          }

          const newEvent = {
            id: Date.now().toString(),
            name,
            date,
            location,
            description: description || "",
            image: null,
            participants: [],
            pendingParticipants: []
          };

          if (req.file) {
            try {
              const imageBuffer = fs.readFileSync(req.file.path);

              // שמירת התמונה בדאטאבייס
              const client = await pool.connect();
              try {
                const imageId = Date.now().toString();
                await client.query(
                  'INSERT INTO images (id, data, mime_type) VALUES ($1, $2, $3)',
                  [imageId, imageBuffer, req.file.mimetype]
                );
                await client.query('COMMIT');
                newEvent.image = `/image/${imageId}`;
                console.log("✅ תמונת אירוע נשמרה בדאטאבייס:", imageId);
              } catch (dbError) {
                console.error("❌ שגיאה בשמירת תמונה בדאטאבייס:", dbError);
                throw dbError;
              } finally {
                client.release();
              }

              // מחיקת הקובץ הזמני
              fs.unlinkSync(req.file.path);
            } catch (imageError) {
              console.error("שגיאה בשמירת תמונה:", imageError);
              throw imageError;
            }
          }

          // וידוא שיש מערכי משתתפים באירועים קיימים
          events.forEach(event => {
            if (!event.participants) event.participants = [];
            if (!event.pendingParticipants) event.pendingParticipants = [];
          });

          // שמירה בדאטאבייס
          const client = await pool.connect();
          try {
            await client.query('BEGIN');

            await client.query(`
              INSERT INTO events (id, name, date, location, description, image)
              VALUES ($1, $2, $3, $4, $5, $6)
            `, [newEvent.id, newEvent.name, newEvent.date, newEvent.location, newEvent.description, newEvent.image]);

            await client.query('COMMIT');
            console.log("✅ אירוע חדש נשמר בדאטאבייס");
          } catch (dbError) {
            await client.query('ROLLBACK');
            console.error("❌ שגיאה בשמירת אירוע בדאטאבייס:", dbError);
            throw dbError;
          } finally {
            client.release();
          }

          events.push(newEvent);

          // שמירה מיידית לקובץ
          const data = {
            users: users,
            likes: likes,
            events: events,
            lastUpdate: new Date().toISOString(),
          };
          fs.writeFileSync("users_data.json", JSON.stringify(data, null, 2), "utf8");

          res.json({ success: true, message: "האירוע נוצר בהצלחה" });
        } catch (error) {
          console.error("שגיאה ביצירת אירוע:", error);
          res.status(500).json({ success: false, message: "שגיאה ביצירת האירוע" });
        }
      });

      // נתיב לעדכון אירוע
      app.post("/admin/update-event", upload.single("eventImage"), async (req, res) => {
        const { adminId, eventId, name, date, location, description } = req.body;

        if (adminId !== "test123") {
          return res.status(403).json({ success: false, message: "אין הרשאה" });
        }

        try {
          const event = events.find(e => e.id === eventId);
          if (!event) {
            return res.status(404).json({ success: false, message: "אירוע לא נמצא" });
          }

          event.name = name;
          event.date = date;
          event.location = location;
          event.description = description;

          if (req.file) {
            const imageId = await saveImageToDB(req.file.buffer, req.file.mimetype);
            event.image = `/image/${imageId}`;
          }

          saveUsersData();
          res.json({ success: true, message: "האירוע עודכן בהצלחה" });
        } catch (error) {
          console.error("שגיאה בעדכון אירוע:", error);
          res.status(500).json({ success: false, message: "שגיאה בעדכון האירוע" });
        }
      });

      // נתיב למחיקת אירוע
      // נתיב לשינוי סיסמה
      app.post("/change-password", express.json(), async (req, res) => {
        const { userId, currentPassword, newPassword } = req.body;
        const client = await pool.connect();

        try {
          const user = users.find(u => u.id === userId);
          if (!user) {
            return res.status(404).json({ success: false, message: "משתמש לא נמצא" });
          }

          // בדיקת הסיסמה הנוכחית
          const hashedCurrentPassword = hashPassword(currentPassword);
          if (user.password !== hashedCurrentPassword) {
            return res.status(400).json({ success: false, message: "סיסמה נוכחית שגויה" });
          }

          // הצפנת הסיסמה החדשה
          const hashedNewPassword = hashPassword(newPassword);

          // עדכון בדאטאבייס
          await client.query('BEGIN');
          await client.query(
            'UPDATE users SET password = $1 WHERE id = $2',
            [hashedNewPassword, userId]
          );
          await client.query('COMMIT');

          // עדכון במערך המשתמשים
          user.password = hashedNewPassword;

          // שמירת השינויים
          saveUsersData();

          res.json({ success: true, message: "הסיסמה עודכנה בהצלחה" });
        } catch (error) {
          await client.query('ROLLBACK');
          console.error("שגיאה בעדכון סיסמה:", error);
          res.status(500).json({ success: false, message: "שגיאה בעדכון הסיסמה" });
        } finally {
          client.release();
        }
      });

      app.post("/admin/delete-event", express.json(), async (req, res) => {
        const { adminId, eventId } = req.body;

        if (adminId !== "test123") {
          return res.status(403).json({ success: false, message: "אין הרשאה" });
        }

        const client = await pool.connect();
        try {
          await client.query('BEGIN');

          // Delete event participants first due to foreign key constraint
          await client.query('DELETE FROM event_participants WHERE event_id = $1', [eventId]);

          // Delete the event itself
          await client.query('DELETE FROM events WHERE id = $1', [eventId]);

          await client.query('COMMIT');

          // Remove from local array
          const eventIndex = events.findIndex((e) => e.id === eventId);
          if (eventIndex > -1) {
            events.splice(eventIndex, 1);
          }

          // Save to local file
          saveUsersData();

          console.log("✅ אירוע נמחק בהצלחה מהדאטאבייס והשרת");
          res.json({ success: true, message: "האירוע נמחק בהצלחה" });
        } catch (error) {
          await client.query('ROLLBACK');
          console.error("שגיאה במחיקת אירוע:", error);
          res.status(500).json({ success: false, message: "שגיאה במחיקת האירוע" });
        } finally {
          client.release();
        }
      });

      app.get("/admin/events", (req, res) => {
        const userId = req.query.userId;

        if (userId !== "test123") {
          return res.redirect("/login");
        }

        res.send(`
          <!DOCTYPE html>
          <html lang="he" dir="rtl">
          <head>
            <meta charset="UTF-8">
            <title>ניהול אירועים - הכר/י את החצי השני שלך</title>
            <style>${commonStyles}</style>
          </head>
          <body>
            <div class="navbar">
              <a href="/home?userId=${userId}" class="navbar-brand">ממשק ניהול</a>
            </div>

            <div class="page-container">
              <h1>ניהול אירועים</h1>

              <div class="card" style="margin-bottom: 30px;">
                <h2>יצירת אירוע חדש</h2>
                <form id="createEventForm" enctype="multipart/form-data">
                  <div style="margin-bottom: 15px;">
                    <label>שם האירוע:</label>
                    <input type="text" id="eventName" required>
                  </div>

                  <div style="margin-bottom: 15px;">
                    <label>תאריך:</label>
                    <input type="date" id="eventDate" required>
                  </div>

                  <div style="margin-bottom: 15px;">
                    <label>מיקום:</label>
                    <input type="text" id="eventLocation" required>
                  </div>

                  <div style="margin-bottom: 15px;">
                    <label>תיאור:</label>
                    <textarea id="eventDescription" rows="4" required></textarea>
                  </div>

                  <div style="margin-bottom: 15px;">
                    <label>תמונת האירוע:</label>
                    <input type="file" id="eventImage" name="eventImage" accept="image/*">
                  </div>

                  <button type="submit" class="button">צור אירוע</button>
                </form>
              </div>

              <div class="card">
                <h2>אירועים קיימים</h2>
                <div id="eventsList">
                  ${events
                    .map(
                      (event) => `
                    <div style="padding: 15px; margin: 10px 0; background: var(--accent-color); border-radius: 8px;" id="event-${event.id}">
                      <div class="event-display">
                        <h3>${event.name}</h3>
                        <p><strong>תאריך:</strong> ${formatDateInHebrew(event.date)}</p>
                        <p><strong>מיקום:</strong> ${event.location}</p>
                        <p><strong>תיאור:</strong> ${event.description}</p>
                        <p><strong>משתתפים:</strong> ${event.participants.length}</p>
                        ${event.image ? `<img src="${event.image}" alt="תמונת אירוע" style="max-width: 200px; margin: 10px 0;">` : ''}
                        <div style="display: flex; gap: 10px; margin-top: 10px;">
                          <button onclick="showEditForm('${event.id}')" class="button">ערוך אירוע</button>
                          <button onclick="deleteEvent('${event.id}')" class="button" style="background: #dc3545;">מחק אירוע</button>
                        </div>
                      </div>
                      <div class="event-edit" style="display: none;">
                        <h3>עריכת אירוע</h3>
                        <form onsubmit="updateEvent(event, '${event.id}')" class="edit-form">
                          <div style="margin-bottom: 15px;">
                            <label>שם האירוע:</label>
                            <input type="text" name="name" value="${event.name}" required>
                          </div>
                          <div style="margin-bottom: 15px;">
                            <p><strong>תאריך:</strong> ${formatDateInHebrew(event.date)}</p>
                            <input type="date" name="date" value="${event.date}" required>
                          </div>
                          <div style="margin-bottom: 15px;">
                            <label>מיקום:</label>
                            <input type="text" name="location" value="${event.location}" required>
                          </div>
                          <div style="margin-bottom: 15px;">
                            <label>תיאור:</label>
                            <textarea name="description" rows="4" required>${event.description}</textarea>
                          </div>
                          <div style="margin-bottom: 15px;">
                            <label>תמונת האירוע:</label>
                            <input type="file" name="eventImage" accept="image/*">
                          </div>
                          <div style="display: flex; gap: 10px;">
                            <button type="submit" class="button">שמור שינויים</button>
                            <button type="button" onclick="hideEditForm('${event.id}')" class="button" style="background: #6c757d;">ביטול</button>
                          </div>
                        </form>
                      </div>
                    </div>
                  `,
                    )
                    .join("")}

                  <script>
                    function showEditForm(eventId) {
                      document.querySelector(\`#event-\${eventId} .event-display\`).style.display = 'none';
                      document.querySelector(\`#event-\${eventId} .event-edit\`).style.display = 'block';
                    }

                    function hideEditForm(eventId) {
                      document.querySelector(\`#event-\${eventId} .event-display\`).style.display = 'block';
                      document.querySelector(\`#event-\${eventId} .event-edit\`).style.display = 'none';
                    }

                    async function updateEvent(e, eventId) {
                      e.preventDefault();
                      const form = e.target;
                      const formData = new FormData(form);
                      formData.append('adminId', '${userId}');
                      formData.append('eventId', eventId);

                      try {
                        const response = await fetch('/admin/update-event', {
                          method: 'POST',
                          body: formData
                        });

                        const data = await response.json();
                        if (data.success) {
                          alert('האירוע עודכן בהצלחה');
                          location.reload();
                        } else {
                          alert('שגיאה בעדכון האירוע: ' + data.message);
                        }
                      } catch (error) {
                        alert('שגיאה בעדכון האירוע');
                      }
                    }
                  </script>
                </div>
              </div>
            </div>

            <script>
              document.getElementById('createEventForm').addEventListener('submit', async (e) => {
                e.preventDefault();

                try {
                  const formData = new FormData();
                  formData.append('adminId', '${userId}');
                  formData.append('name', document.getElementById('eventName').value);
                  formData.append('date', document.getElementById('eventDate').value);
                  formData.append('location', document.getElementById('eventLocation').value);
                  formData.append('description', document.getElementById('eventDescription').value);

                  const imageFile = document.getElementById('eventImage').files[0];
                  if (imageFile) {
                    formData.append('eventImage', imageFile);
                  }

                  const response = await fetch('/admin/create-event', {
                    method: 'POST',
                    body: formData
                  });

                  const data = await response.json();
                  if (data.success) {
                    alert('האירוע נוצר בהצלחה');
                    location.reload();
                  } else {
                    alert('שגיאה ביצירת האירוע: ' + data.message);
                  }
                } catch (error) {
                  alert('שגיאה ביצירת האירוע');
                }
              });

              async function deleteEvent(eventId) {
                if (!confirm('האם אתה בטוח שברצונך למחוק אירוע זה?')) return;

                try {
                  const response = await fetch('/admin/delete-event', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      adminId: '${userId}',
                      eventId: eventId
                    })
                  });

                  const data = await response.json();
                  if (data.success) {
                    alert('האירוע נמחק בהצלחה');
                    location.reload();
                  } else {
                    alert('שגיאה במחיקת האירוע: ' + data.message);
                  }
                } catch (error) {
                  alert('שגיאה במחיקת האירוע');
                }
              }
            </script>
          </body>
          </html>
        `);
      });

      app.post("/admin/delete-user", express.json(), async (req, res) => {
        const { adminId, userId } = req.body;

        if (adminId !== "test123") {
          return res.status(403).json({ success: false, message: "אין הרשאה" });
        }

        const client = await pool.connect();

        try {
          await client.query('BEGIN');

          // מחק את המשתמש מהאירועים
          await client.query('DELETE FROM event_participants WHERE user_id = $1', [userId]);

          // מחק את המשתמש עצמו
          await client.query('DELETE FROM users WHERE id = $1', [userId]);

          await client.query('COMMIT');
          console.log("✅ משתמש נמחק בהצלחה מהדאטאבייס");

          // מחק מהמערכים בזיכרון
          users.splice(users.findIndex(u => u.id === userId), 1);
          likes = likes.filter(like => like.fromUserId !== userId && like.toUserId !== userId);
          events.forEach(event => {
            event.participants = event.participants.filter(id => id !== userId);
            event.pendingParticipants = event.pendingParticipants.filter(id => id !== userId);
          });

          // שמור את השינויים בקובץ
          saveUsersData();

          res.json({ success: true, message: "המשתמש נמחק בהצלחה" });
        } catch (dbError) {
          await client.query('ROLLBACK');
          console.error("❌ שגיאה במחיקת משתמש מהדאטאבייס:", dbError);
          throw dbError;
        } finally {
          client.release();
        }
      });

      // נתיב לאישור מנוי
      app.post("/admin/approve-subscription", express.json(), (req, res) => {
        const { adminId, userId } = req.body;

        if (adminId !== "test123") {
          return res.status(403).json({ success: false, message: "אין הרשאה" });
        }

        const user = users.find((u) => u.id === userId);
        if (!user) {
          return res.status(404).json({ success: false, message: "משתמש לא נמצא" });
        }

        user.hasSubscription = !user.hasSubscription;
        saveUsersData();
        res.json({
          success: true,
          message: user.hasSubscription ? "המנוי הופעל בהצלחה" : "המנוי בוטל בהצלחה",
        });
      });

      // שמירה אוטומטית כל דקה
      setInterval(saveUsersData, 60 * 1000);

      // שמירת נתונים לפני סגירת השרת
      process.on("SIGTERM", () => {
        console.log("שומר נתונים לפני סגירה...");
        saveUsersData();
        process.exit(0);
      });

      process.on("SIGINT", () => {
        console.log("שומר נתונים לפני סגירה...");
        saveUsersData();
        process.exit(0);
      });

      // שמירת נתונים לפני סגירת השרת
      process.on("beforeExit", () => {
        console.log("שומר נתונים לפני סגירה...");
        saveUsersData();
      });

      process.on("SIGINT", () => {
        console.log("שומר נתונים לפני סגירה...");
        saveUsersData();
        process.exit(0);
      });

      app.listen(port, "0.0.0.0", () => {
        console.log(`השרת פועל בכתובת http://0.0.0.0:${port}`);
        // טען נתונים בהפעלת השרת
        loadUsersData();
      });
      // דף צפיות בפרופיל
      app.get("/matches/views", (req, res) => {
        const userId = req.query.userId;
        if (!userId) {
          return res.redirect("/login");
        }

        const currentUser = users.find((u) => u.id === userId);
        if (!currentUser) {
          return res.redirect("/login");
        }

        // בדיקה אם המשתמש יכול לראות צפיות
        const canSeeViews = currentUser.gender === 'female' || currentUser.hasSubscription;

        // מיון הצפיות לפי תאריך, מהחדש לישן
        let userViews = views
          .filter((view) => view.toUserId === userId && (!view.isAdminView || userId === "test123"))
          .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

        res.send(`
          <!DOCTYPE html>
          <html lang="he" dir="rtl">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>צפיות בפרופיל - הכר/י את החצי השני שלך</title>
            <style>${commonStyles}</style>
          </head>
          <body>
            <div class="navbar">
              <a href="/home?userId=${userId}" class="navbar-brand">הכר/י את החצי השני שלך</a>
              <div class="navbar-nav">
                <a href="/home?userId=${userId}" class="nav-link">דף הבית</a>
                <a href="/notifications?userId=${userId}" class="nav-link" style="position: relative;">
                  התראות
                    ${(() => {
                      const unreadCount = systemNotifications.filter(
                        (n) => n.userId === userId && !n.isRead,
                      ).length;
                      return unreadCount > 0
                        ? `<span style="position: absolute; top: -8px; right: -8px; background-color: red; color: white; 
                        border-radius: 50%; padding: 2px 6px; font-size: 12px; min-width: 20px; text-align: center;">
                          ${unreadCount}
                        </span>`
                        : "";
                    })()}
                <a href="/users?userId=${userId}" class="nav-link">כרטיסי שידוך</a>
                    <a href="/matches?userId=${userId}" 
         class="nav-link ${req.path.includes('/matches') ? 'active' : ''} ${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 'blinking' : ''}" 
         style="${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 
           'background: linear-gradient(45deg, #FFD700, #FFA500); color: #8B4513; box-shadow: 0 2px 5px rgba(255, 215, 0, 0.3);' 
           : ''}">
         המאצ'ים שלי
      </a>


                <a href="/events?userId=${userId}" class="nav-link">אירועים</a>
                <a href="/profile?userId=${userId}" class="nav-link">הפרופיל שלי</a>
                <a href="/login" class="nav-link">התנתק</a>
              </div>
            </div>
            </div>
            </div>

            <div class="page-container">
              <h1 style="font-size: 2.8em; background: linear-gradient(120deg, var(--primary-color) 0%, var(--secondary-color) 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; text-align: center; margin-bottom: 25px;">המאצ'ים שלי ❤️</h1>

              <div style="display: flex; gap: 15px; margin-bottom: 30px; justify-content: center;">
                <button onclick="window.location.href='/matches?userId=${userId}'" 
                        style="flex: 1; padding: 15px; border-radius: 12px; background: linear-gradient(135deg, var(--accent-color) 0%, var(--form-background) 100%); border: 2px solid var(--primary-color); color: var(--dark-color); font-weight: bold; cursor: pointer; max-width: 200px;">
                  👀 מי צפה בי
                </button>
                <button onclick="window.location.href='/matches/likes?userId=${userId}'"
                        style="flex: 1; padding: 15px; border-radius: 12px; background: linear-gradient(135deg, var(--accent-color) 0%, var(--form-background) 100%); border: 2px solid var(--primary-color); color: var(--dark-color); font-weight: bold; cursor: pointer; max-width: 200px;">
                  ❤️ כרטיסים שאהבתי
                </button>
                <button onclick="window.location.href='/matches?userId=${userId}'"
                        style="flex: 1; padding: 15px; border-radius: 12px; background: linear-gradient(135deg, var(--accent-color) 0%, var(--form-background) 100%); border: 2px solid var(--primary-color); color: var(--dark-color); font-weight: bold; cursor: pointer; max-width: 200px;">
                  💕 המאצ'ים שלי
                </button>
              </div>

            <div class="page-container">
               <div class="card" style="margin-bottom: 30px;">
              <h2>מי צפה בפרופיל שלי? 👀</h2>
              ${(() => {
                const currentUser = users.find(u => u.id === userId);

                // Check if user can see profile views
                if (currentUser.gender === 'female' || currentUser.hasSubscription) {
                  // Show all views except admin views (unless viewer is admin)
                  return views
                    .filter((view) => view.toUserId === userId && (!view.isAdminView || userId === "test123"))
                    .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
                    .map((view) => {
                      const viewer = users.find((u) => u.id === view.fromUserId);
                      if (!viewer) return '';
                      return `
                      <div style="padding: 15px; margin: 10px 0; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-radius: 8px; display: flex; align-items: center; gap: 15px;">
                        <div style="width: 50px; height: 50px; border-radius: 50%; overflow: hidden; flex-shrink: 0;">
                          ${
                            viewer.profileImage
                              ? `<img src="${viewer.profileImage}" alt="תמונת פרופיל" style="width: 100%; height: 100%; object-fit: cover;">`
                              : `<div style="width: 100%; height: 100%; background: var(--accent-color); display: flex; align-items: center; justify-content: center;">👤</div>`
                          }
                        </div>
                        <div style="flex-grow: 1;">
                          <div style="display: flex; align-items: center; gap: 10px;">
                            <strong>${viewer.firstName} ${viewer.lastName.charAt(0)}.</strong>
                            ${viewer.hasSubscription ? '<span style="background: linear-gradient(45deg, #FFD700, #FFA500); color: #8B4513; padding: 3px 8px; font-weight: bold; border-radius: 12px; font-size: 0.8em;">✨ VIP</span>' : ''}
                          </div>
                          <div style="color: var(--gray-color); font-size: 0.9em;">

                           </div>
                        </div>
                        <button onclick="window.location.href='/view-profile?viewId=${viewer.id}&userId=${userId}'" class="button" style="padding: 8px 15px; font-size: 0.9em;">
                          צפה בפרופיל
                        </button>
                      </div>
                    `;
                    })
                    .join('') || '<p style="text-align: center; padding: 20px;">עדיין אין צפיות בפרופיל שלך</p>';
                } else {
                  // Show blurred views for male users without subscription
                  const viewCount = views.filter(view => view.toUserId === userId).length;
                  if (viewCount === 0) {
                    return '<p style="text-align: center; padding: 20px;">עדיין אין צפיות בפרופיל שלך</p>';
                  }

                  return `
                    <div style="text-align: center; padding: 20px;">
                      <p style="font-size: 1.2em; margin-bottom: 15px;">יש ${viewCount} צפיות בפרופיל שלך!</p>
                      <div style="filter: blur(5px); pointer-events: none;">
                        ${views
                          .filter((view) => view.toUserId === userId)
                          .slice(0, 3)
                          .map(() => `
                            <div style="padding: 15px; margin: 10px 0; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-radius: 8px;">
                              <div style="width: 50px; height: 50px; background: #ddd; border-radius: 50%; margin: 0 auto;"></div>
                              <div style="height: 20px; background: #ddd; width: 150px; margin: 10px auto; border-radius: 4px;"></div>
                            </div>
                          `).join('')}
                      </div>
                      <div style="margin-top: 20px; padding: 20px; background: linear-gradient(45deg, #FFD700, #FFA500); border-radius: 12px; box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);">
                        <h3 style="color: #8B4513; margin-bottom: 10px;">🔓 רוצה לראות מי צפה בפרופיל שלך?</h3>
                        <p style="color: #8B4513; margin-bottom: 15px;">שדרג למנוי VIP כדי לראות את כל הצפיות בפרופיל שלך, ואת פרטי הקשר של ההתאמות שלך!</p>
                        <button onclick="window.location.href='/subscribe?userId=${userId}'" 
                                style="background: white; color: #8B4513; padding: 10px 20px; border: none; border-radius: 8px; font-weight: bold; cursor: pointer;">
                          שדרג עכשיו ✨
                        </button>
                      </div>
                    </div>
                  `;
                }
              })()}
        `);
      });
      // דף כרטיסים שאהבתי
      app.get("/matches/likes", (req, res) => {
        const userId = req.query.userId;
        if (!userId) {
          return res.redirect("/login");
        }

        const currentUser = users.find((u) => u.id === userId);
        if (!currentUser) {
          return res.redirect("/login");
        }

        // מצא את כל הלייקים של המשתמש
        const userLikes = likes.filter(like => like.fromUserId === userId);

        // מצא את המשתמשים שקיבלו לייק
        const likedUsers = userLikes.map(like => {
          const user = users.find(u => u.id === like.toUserId);
          if (!user) return null;

          // בדוק אם יש התאמה הדדית
          const hasMatch = likes.some(l => l.fromUserId === like.toUserId && l.toUserId === userId);

          return {
            ...user,
            hasMatch,
            likeDate: like.timestamp
          };
        }).filter(Boolean);

        res.send(`
          <!DOCTYPE html>
          <html lang="he" dir="rtl">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>כרטיסים שאהבתי - הכר/י את החצי השני שלך</title>
            <style>${commonStyles}</style>
          </head>
          <body>
            <div class="navbar">
              <a href="/home?userId=${userId}" class="navbar-brand">הכר/י את החצי השני שלך</a>
              <div class="navbar-nav">
                <a href="/home?userId=${userId}" class="nav-link">דף הבית</a>
                <a href="/notifications?userId=${userId}" class="nav-link" style="position: relative;">
                  התראות
                    ${(() => {
                      const unreadCount = systemNotifications.filter(
                        (n) => n.userId === userId && !n.isRead,
                      ).length;
                      return unreadCount > 0
                        ? `<span style="position: absolute; top: -8px; right: -8px; background-color: red; color: white; 
                        border-radius: 50%; padding: 2px 6px; font-size: 12px; min-width: 20px; text-align: center;">
                          ${unreadCount}
                        </span>`
                        : "";
                    })()}
                <a href="/users?userId=${userId}" class="nav-link">כרטיסי שידוך</a>
               <a href="/matches?userId=${userId}" 
         class="nav-link ${req.path.includes('/matches') ? 'active' : ''} ${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 'blinking' : ''}" 
         style="${views.some(v => v.toUserId === userId && !v.isRead) && !req.path.includes('/matches') ? 
           'background: linear-gradient(45deg, #FFD700, #FFA500); color: #8B4513; box-shadow: 0 2px 5px rgba(255, 215, 0, 0.3);' 
           : ''}">
         המאצ'ים שלי
      </a>


                <a href="/events?userId=${userId}" class="nav-link">אירועים</a>
                <a href="/profile?userId=${userId}" class="nav-link">הפרופיל שלי</a>
                <a href="/login" class="nav-link">התנתק</a>
              </div>
            </div>
            </div>
            </div>

            <div class="page-container">
              <h1 style="font-size: 2.8em; background: linear-gradient(120deg, var(--primary-color) 0%, var(--secondary-color) 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; text-align: center; margin-bottom: 25px;">המאצ'ים שלי ❤️</h1>

              <div style="display: flex; gap: 15px; margin-bottom: 30px; justify-content: center;">
                <button onclick="window.location.href='/matches/views?userId=${userId}'" 
                        style="flex: 1; padding: 15px; border-radius: 12px; background: linear-gradient(135deg, var(--accent-color) 0%, var(--form-background) 100%); border: 2px solid var(--primary-color); color: var(--dark-color); font-weight: bold; cursor: pointer; max-width: 200px;">
                  👀 מי צפה בי
                </button>
                <button onclick="window.location.href='/matches/likes?userId=${userId}'"
                        style="flex: 1; padding: 15px; border-radius: 12px; background: linear-gradient(135deg, var(--accent-color) 0%, var(--form-background) 100%); border: 2px solid var(--primary-color); color: var(--dark-color); font-weight: bold; cursor: pointer; max-width: 200px;">
                  ❤️ כרטיסים שאהבתי
                </button>
                <button onclick="window.location.href='/matches?userId=${userId}'"
                        style="flex: 1; padding: 15px; border-radius: 12px; background: linear-gradient(135deg, var(--accent-color) 0%, var(--form-background) 100%); border: 2px solid var(--primary-color); color: var(--dark-color); font-weight: bold; cursor: pointer; max-width: 200px;">
                  💕 המאצ'ים שלי
                </button>
              </div>

            <div class="page-container">
              <h1>כרטיסים שאהבתי ❤️</h1>

              <div class="grid">
                ${likedUsers.map(user => `
                  <div class="profile-card">
                    <div class="profile-img-container">
                      ${user.profileImage 
                        ? `<img src="${user.profileImage}" class="profile-img" alt="תמונת פרופיל">`
                        : `<div class="profile-img" style="background-color: var(--accent-color); display: flex; justify-content: center; align-items: center;"><div style="font-size: 48px;">👤</div></div>`
                      }
                      ${user.hasMatch ? '<span class="badge badge-match">התאמה! ❤️</span>' : ''}
                    </div>
                    <div class="profile-info">
                      <h3>${user.firstName} ${user.lastName.charAt(0)}.</h3>
                      <div class="profile-details">
                        ${user.dob ? `<span class="profile-detail">גיל: ${calculateAge(user.dob)}</span>` : ''}
                        ${user.city ? `<span class="profile-detail">עיר: ${user.city}</span>` : ''}
                        ${user.relationshipStatus ? `<span class="profile-detail">מצב משפחתי: ${user.relationshipStatus}</span>` : ""}
                      </div>
                      <div class="action-buttons">
                        <button class="profile-btn" onclick="window.location.href='/view-profile?viewId=${user.id}&userId=${userId}'">
                          צפה בפרופיל
                        </button>
                      </div>
                    </div>
                  </div>
                `).join('')}
              </div>
            </div>
          </body>
          </html>
        `);
      });
